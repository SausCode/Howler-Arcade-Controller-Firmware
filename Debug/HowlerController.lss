
HowlerController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005c2  00802000  00008902  00008996  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004e7  008025c2  008025c2  00008f5a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  00008fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001b16b  00000000  00000000  00009940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000675b  00000000  00000000  00024aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f920  00000000  00000000  0002b206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022f4  00000000  00000000  0003ab28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003dedb  00000000  00000000  0003ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000089e3  00000000  00000000  0007acf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000868  00000000  00000000  000836e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006b4a  00000000  00000000  00083f48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2b c1       	rjmp	.+598    	; 0x258 <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	38 c1       	rjmp	.+624    	; 0x29a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__vector_13>
      38:	dd c6       	rjmp	.+3514   	; 0xdf4 <__vector_14>
      3a:	00 00       	nop
      3c:	08 c7       	rjmp	.+3600   	; 0xe4e <__vector_15>
      3e:	00 00       	nop
      40:	33 c7       	rjmp	.+3686   	; 0xea8 <__vector_16>
      42:	00 00       	nop
      44:	5e c7       	rjmp	.+3772   	; 0xf02 <__vector_17>
      46:	00 00       	nop
      48:	89 c7       	rjmp	.+3858   	; 0xf5c <__vector_18>
      4a:	00 00       	nop
      4c:	b4 c7       	rjmp	.+3944   	; 0xfb6 <__vector_19>
      4e:	00 00       	nop
      50:	df c7       	rjmp	.+4030   	; 0x1010 <__vector_20>
      52:	00 00       	nop
      54:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_21>
      58:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_22>
      5c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_23>
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop
      98:	00 c1       	rjmp	.+512    	; 0x29a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c2       	rjmp	.+1136   	; 0x50e <__vector_39>
      9e:	00 00       	nop
      a0:	68 c2       	rjmp	.+1232   	; 0x572 <__vector_40>
      a2:	00 00       	nop
      a4:	98 c2       	rjmp	.+1328   	; 0x5d6 <__vector_41>
      a6:	00 00       	nop
      a8:	c8 c2       	rjmp	.+1424   	; 0x63a <__vector_42>
      aa:	00 00       	nop
      ac:	f6 c0       	rjmp	.+492    	; 0x29a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f4 c0       	rjmp	.+488    	; 0x29a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f2 c0       	rjmp	.+484    	; 0x29a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_46>
      bc:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_47>
      c0:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_48>
      c4:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_49>
      c8:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_50>
      cc:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_51>
      d0:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_52>
      d4:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_53>
      d8:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_54>
      dc:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_55>
      e0:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_56>
      e4:	da c0       	rjmp	.+436    	; 0x29a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d8 c0       	rjmp	.+432    	; 0x29a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d6 c0       	rjmp	.+428    	; 0x29a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d4 c0       	rjmp	.+424    	; 0x29a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d2 c0       	rjmp	.+420    	; 0x29a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d0 c0       	rjmp	.+416    	; 0x29a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ce c0       	rjmp	.+412    	; 0x29a <__bad_interrupt>
      fe:	00 00       	nop
     100:	cc c0       	rjmp	.+408    	; 0x29a <__bad_interrupt>
     102:	00 00       	nop
     104:	ca c0       	rjmp	.+404    	; 0x29a <__bad_interrupt>
     106:	00 00       	nop
     108:	c8 c0       	rjmp	.+400    	; 0x29a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c6 c0       	rjmp	.+396    	; 0x29a <__bad_interrupt>
     10e:	00 00       	nop
     110:	c4 c0       	rjmp	.+392    	; 0x29a <__bad_interrupt>
     112:	00 00       	nop
     114:	c2 c0       	rjmp	.+388    	; 0x29a <__bad_interrupt>
     116:	00 00       	nop
     118:	c0 c0       	rjmp	.+384    	; 0x29a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	30 c1       	rjmp	.+608    	; 0x37e <__vector_71>
     11e:	00 00       	nop
     120:	60 c1       	rjmp	.+704    	; 0x3e2 <__vector_72>
     122:	00 00       	nop
     124:	90 c1       	rjmp	.+800    	; 0x446 <__vector_73>
     126:	00 00       	nop
     128:	c0 c1       	rjmp	.+896    	; 0x4aa <__vector_74>
     12a:	00 00       	nop
     12c:	b6 c0       	rjmp	.+364    	; 0x29a <__bad_interrupt>
     12e:	00 00       	nop
     130:	b4 c0       	rjmp	.+360    	; 0x29a <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_77>
     138:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_78>
     13c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_79>
     140:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_80>
     144:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_81>
     148:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_82>
     14c:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_83>
     150:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_84>
     154:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_85>
     158:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_86>
     15c:	9e c0       	rjmp	.+316    	; 0x29a <__bad_interrupt>
     15e:	00 00       	nop
     160:	9c c0       	rjmp	.+312    	; 0x29a <__bad_interrupt>
     162:	00 00       	nop
     164:	9a c0       	rjmp	.+308    	; 0x29a <__bad_interrupt>
     166:	00 00       	nop
     168:	98 c0       	rjmp	.+304    	; 0x29a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	96 c0       	rjmp	.+300    	; 0x29a <__bad_interrupt>
     16e:	00 00       	nop
     170:	94 c0       	rjmp	.+296    	; 0x29a <__bad_interrupt>
     172:	00 00       	nop
     174:	92 c0       	rjmp	.+292    	; 0x29a <__bad_interrupt>
     176:	00 00       	nop
     178:	90 c0       	rjmp	.+288    	; 0x29a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8e c0       	rjmp	.+284    	; 0x29a <__bad_interrupt>
     17e:	00 00       	nop
     180:	8c c0       	rjmp	.+280    	; 0x29a <__bad_interrupt>
     182:	00 00       	nop
     184:	8a c0       	rjmp	.+276    	; 0x29a <__bad_interrupt>
     186:	00 00       	nop
     188:	88 c0       	rjmp	.+272    	; 0x29a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	86 c0       	rjmp	.+268    	; 0x29a <__bad_interrupt>
     18e:	00 00       	nop
     190:	84 c0       	rjmp	.+264    	; 0x29a <__bad_interrupt>
     192:	00 00       	nop
     194:	82 c0       	rjmp	.+260    	; 0x29a <__bad_interrupt>
     196:	00 00       	nop
     198:	80 c0       	rjmp	.+256    	; 0x29a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7e c0       	rjmp	.+252    	; 0x29a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7c c0       	rjmp	.+248    	; 0x29a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7a c0       	rjmp	.+244    	; 0x29a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	78 c0       	rjmp	.+240    	; 0x29a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	76 c0       	rjmp	.+236    	; 0x29a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_108>
     1b4:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_109>
     1b8:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_110>
     1bc:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_111>
     1c0:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_112>
     1c4:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_113>
     1c8:	68 c0       	rjmp	.+208    	; 0x29a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	66 c0       	rjmp	.+204    	; 0x29a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	64 c0       	rjmp	.+200    	; 0x29a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	62 c0       	rjmp	.+196    	; 0x29a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	60 c0       	rjmp	.+192    	; 0x29a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5e c0       	rjmp	.+188    	; 0x29a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5c c0       	rjmp	.+184    	; 0x29a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5a c0       	rjmp	.+180    	; 0x29a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	58 c0       	rjmp	.+176    	; 0x29a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	56 c0       	rjmp	.+172    	; 0x29a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	54 c0       	rjmp	.+168    	; 0x29a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__vector_125>
     1f8:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__vector_126>
     1fc:	5c 06       	cpc	r5, r28
     1fe:	57 06       	cpc	r5, r23
     200:	52 06       	cpc	r5, r18
     202:	4d 06       	cpc	r4, r29
     204:	48 06       	cpc	r4, r24
     206:	43 06       	cpc	r4, r19
     208:	3e 06       	cpc	r3, r30
     20a:	2b 10       	cpse	r2, r11
     20c:	2e 10       	cpse	r2, r14
     20e:	31 10       	cpse	r3, r1
     210:	34 10       	cpse	r3, r4
     212:	37 10       	cpse	r3, r7
     214:	3a 10       	cpse	r3, r10
     216:	3d 10       	cpse	r3, r13
     218:	c0 24       	eor	r12, r0
     21a:	c3 24       	eor	r12, r3
     21c:	c6 24       	eor	r12, r6
     21e:	c9 24       	eor	r12, r9
     220:	cc 24       	eor	r12, r12
     222:	cf 24       	eor	r12, r15
     224:	d2 24       	eor	r13, r2
     226:	d5 24       	eor	r13, r5
     228:	d8 24       	eor	r13, r8
     22a:	db 24       	eor	r13, r11
     22c:	de 24       	eor	r13, r14
     22e:	e1 24       	eor	r14, r1
     230:	e4 24       	eor	r14, r4
     232:	e7 24       	eor	r14, r7
     234:	ea 24       	eor	r14, r10
     236:	ed 24       	eor	r14, r13
     238:	f0 24       	eor	r15, r0
     23a:	f3 24       	eor	r15, r3
     23c:	f6 24       	eor	r15, r6
     23e:	f9 24       	eor	r15, r9
     240:	fc 24       	eor	r15, r12
     242:	ff 24       	eor	r15, r15
     244:	02 25       	eor	r16, r2
     246:	05 25       	eor	r16, r5
     248:	08 25       	eor	r16, r8
     24a:	0b 25       	eor	r16, r11
     24c:	0e 25       	eor	r16, r14
     24e:	11 25       	eor	r17, r1
     250:	14 25       	eor	r17, r4
     252:	17 25       	eor	r17, r7
     254:	1a 25       	eor	r17, r10
     256:	1d 25       	eor	r17, r13

00000258 <__ctors_end>:
     258:	11 24       	eor	r1, r1
     25a:	1f be       	out	0x3f, r1	; 63
     25c:	cf ef       	ldi	r28, 0xFF	; 255
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df e3       	ldi	r29, 0x3F	; 63
     262:	de bf       	out	0x3e, r29	; 62
     264:	00 e0       	ldi	r16, 0x00	; 0
     266:	0c bf       	out	0x3c, r16	; 60

00000268 <__do_copy_data>:
     268:	15 e2       	ldi	r17, 0x25	; 37
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e2       	ldi	r27, 0x20	; 32
     26e:	e2 e0       	ldi	r30, 0x02	; 2
     270:	f9 e8       	ldi	r31, 0x89	; 137
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	a2 3c       	cpi	r26, 0xC2	; 194
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	2a e2       	ldi	r18, 0x2A	; 42
     284:	a2 ec       	ldi	r26, 0xC2	; 194
     286:	b5 e2       	ldi	r27, 0x25	; 37
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a9 3a       	cpi	r26, 0xA9	; 169
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <main>
     296:	0c 94 7f 44 	jmp	0x88fe	; 0x88fe <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     29c:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     29e:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     2a0:	28 2f       	mov	r18, r24
     2a2:	39 2f       	mov	r19, r25
     2a4:	21 15       	cp	r18, r1
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	38 07       	cpc	r19, r24
     2aa:	29 f4       	brne	.+10     	; 0x2b6 <adc_set_callback+0x1a>
		adca_callback = callback;
     2ac:	60 93 37 2a 	sts	0x2A37, r22	; 0x802a37 <adca_callback>
     2b0:	70 93 38 2a 	sts	0x2A38, r23	; 0x802a38 <adca_callback+0x1>
     2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <adc_set_callback+0x28>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     2b6:	20 34       	cpi	r18, 0x40	; 64
     2b8:	32 40       	sbci	r19, 0x02	; 2
     2ba:	21 f4       	brne	.+8      	; 0x2c4 <adc_set_callback+0x28>
		adcb_callback = callback;
     2bc:	60 93 35 2a 	sts	0x2A35, r22	; 0x802a35 <adcb_callback>
     2c0:	70 93 36 2a 	sts	0x2A36, r23	; 0x802a36 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2c4:	4f bf       	out	0x3f, r20	; 63
     2c6:	08 95       	ret

000002c8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2c8:	81 15       	cp	r24, r1
     2ca:	22 e0       	ldi	r18, 0x02	; 2
     2cc:	92 07       	cpc	r25, r18
     2ce:	71 f4       	brne	.+28     	; 0x2ec <adc_enable_clock+0x24>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     2d0:	80 91 c3 25 	lds	r24, 0x25C3	; 0x8025c3 <adca_enable_count>
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	98 0f       	add	r25, r24
     2d8:	90 93 c3 25 	sts	0x25C3, r25	; 0x8025c3 <adca_enable_count>
     2dc:	81 11       	cpse	r24, r1
     2de:	16 c0       	rjmp	.+44     	; 0x30c <adc_enable_clock+0x44>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2e0:	62 e0       	ldi	r22, 0x02	; 2
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <sysclk_enable_module>
     2ea:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2ec:	80 34       	cpi	r24, 0x40	; 64
     2ee:	92 40       	sbci	r25, 0x02	; 2
     2f0:	69 f4       	brne	.+26     	; 0x30c <adc_enable_clock+0x44>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     2f2:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <__data_end>
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	98 0f       	add	r25, r24
     2fa:	90 93 c2 25 	sts	0x25C2, r25	; 0x8025c2 <__data_end>
     2fe:	81 11       	cpse	r24, r1
     300:	05 c0       	rjmp	.+10     	; 0x30c <adc_enable_clock+0x44>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     302:	62 e0       	ldi	r22, 0x02	; 2
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <sysclk_enable_module>
     30c:	08 95       	ret

0000030e <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     30e:	81 15       	cp	r24, r1
     310:	22 e0       	ldi	r18, 0x02	; 2
     312:	92 07       	cpc	r25, r18
     314:	69 f4       	brne	.+26     	; 0x330 <adc_disable_clock+0x22>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     316:	80 91 c3 25 	lds	r24, 0x25C3	; 0x8025c3 <adca_enable_count>
     31a:	81 50       	subi	r24, 0x01	; 1
     31c:	80 93 c3 25 	sts	0x25C3, r24	; 0x8025c3 <adca_enable_count>
     320:	81 11       	cpse	r24, r1
     322:	15 c0       	rjmp	.+42     	; 0x34e <adc_disable_clock+0x40>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     324:	62 e0       	ldi	r22, 0x02	; 2
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <sysclk_disable_module>
     32e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     330:	80 34       	cpi	r24, 0x40	; 64
     332:	92 40       	sbci	r25, 0x02	; 2
     334:	61 f4       	brne	.+24     	; 0x34e <adc_disable_clock+0x40>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     336:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <__data_end>
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 c2 25 	sts	0x25C2, r24	; 0x8025c2 <__data_end>
     340:	81 11       	cpse	r24, r1
     342:	05 c0       	rjmp	.+10     	; 0x34e <adc_disable_clock+0x40>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <sysclk_disable_module>
     34e:	08 95       	ret

00000350 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     358:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     35a:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     35c:	b5 df       	rcall	.-150    	; 0x2c8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     35e:	88 81       	ld	r24, Y
     360:	81 60       	ori	r24, 0x01	; 1
     362:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     364:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     366:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     368:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     36a:	e9 e4       	ldi	r30, 0x49	; 73
     36c:	fa e2       	ldi	r31, 0x2A	; 42
     36e:	81 81       	ldd	r24, Z+1	; 0x01
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     374:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	08 95       	ret

0000037e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	0b b6       	in	r0, 0x3b	; 59
     38a:	0f 92       	push	r0
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3a4:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     3a8:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     3ac:	e0 91 37 2a 	lds	r30, 0x2A37	; 0x802a37 <adca_callback>
     3b0:	f0 91 38 2a 	lds	r31, 0x2A38	; 0x802a38 <adca_callback+0x1>
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	19 95       	eicall
}
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0b be       	out	0x3b, r0	; 59
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	0b b6       	in	r0, 0x3b	; 59
     3ee:	0f 92       	push	r0
     3f0:	2f 93       	push	r18
     3f2:	3f 93       	push	r19
     3f4:	4f 93       	push	r20
     3f6:	5f 93       	push	r21
     3f8:	6f 93       	push	r22
     3fa:	7f 93       	push	r23
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	af 93       	push	r26
     402:	bf 93       	push	r27
     404:	ef 93       	push	r30
     406:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     408:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     40c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     410:	e0 91 37 2a 	lds	r30, 0x2A37	; 0x802a37 <adca_callback>
     414:	f0 91 38 2a 	lds	r31, 0x2A38	; 0x802a38 <adca_callback+0x1>
     418:	62 e0       	ldi	r22, 0x02	; 2
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	19 95       	eicall
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	0f 90       	pop	r0
     43a:	0b be       	out	0x3b, r0	; 59
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	0b b6       	in	r0, 0x3b	; 59
     452:	0f 92       	push	r0
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	ef 93       	push	r30
     46a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     46c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     470:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     474:	e0 91 37 2a 	lds	r30, 0x2A37	; 0x802a37 <adca_callback>
     478:	f0 91 38 2a 	lds	r31, 0x2A38	; 0x802a38 <adca_callback+0x1>
     47c:	64 e0       	ldi	r22, 0x04	; 4
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	19 95       	eicall
}
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	0f 90       	pop	r0
     49e:	0b be       	out	0x3b, r0	; 59
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	0b b6       	in	r0, 0x3b	; 59
     4b6:	0f 92       	push	r0
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 37 2a 	lds	r30, 0x2A37	; 0x802a37 <adca_callback>
     4dc:	f0 91 38 2a 	lds	r31, 0x2A38	; 0x802a38 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	4f 93       	push	r20
     522:	5f 93       	push	r21
     524:	6f 93       	push	r22
     526:	7f 93       	push	r23
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	af 93       	push	r26
     52e:	bf 93       	push	r27
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     534:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     538:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     53c:	e0 91 35 2a 	lds	r30, 0x2A35	; 0x802a35 <adcb_callback>
     540:	f0 91 36 2a 	lds	r31, 0x2A36	; 0x802a36 <adcb_callback+0x1>
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	80 e4       	ldi	r24, 0x40	; 64
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	19 95       	eicall
}
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0b be       	out	0x3b, r0	; 59
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	0b b6       	in	r0, 0x3b	; 59
     57e:	0f 92       	push	r0
     580:	2f 93       	push	r18
     582:	3f 93       	push	r19
     584:	4f 93       	push	r20
     586:	5f 93       	push	r21
     588:	6f 93       	push	r22
     58a:	7f 93       	push	r23
     58c:	8f 93       	push	r24
     58e:	9f 93       	push	r25
     590:	af 93       	push	r26
     592:	bf 93       	push	r27
     594:	ef 93       	push	r30
     596:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     598:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     59c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5a0:	e0 91 35 2a 	lds	r30, 0x2A35	; 0x802a35 <adcb_callback>
     5a4:	f0 91 36 2a 	lds	r31, 0x2A36	; 0x802a36 <adcb_callback+0x1>
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	80 e4       	ldi	r24, 0x40	; 64
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	19 95       	eicall
}
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	0b b6       	in	r0, 0x3b	; 59
     5e2:	0f 92       	push	r0
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	4f 93       	push	r20
     5ea:	5f 93       	push	r21
     5ec:	6f 93       	push	r22
     5ee:	7f 93       	push	r23
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     5fc:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     600:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     604:	e0 91 35 2a 	lds	r30, 0x2A35	; 0x802a35 <adcb_callback>
     608:	f0 91 36 2a 	lds	r31, 0x2A36	; 0x802a36 <adcb_callback+0x1>
     60c:	64 e0       	ldi	r22, 0x04	; 4
     60e:	80 e4       	ldi	r24, 0x40	; 64
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	19 95       	eicall
}
     614:	ff 91       	pop	r31
     616:	ef 91       	pop	r30
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	0b b6       	in	r0, 0x3b	; 59
     646:	0f 92       	push	r0
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     660:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     664:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     668:	e0 91 35 2a 	lds	r30, 0x2A35	; 0x802a35 <adcb_callback>
     66c:	f0 91 36 2a 	lds	r31, 0x2A36	; 0x802a36 <adcb_callback+0x1>
     670:	68 e0       	ldi	r22, 0x08	; 8
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	19 95       	eicall
}
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	0f be       	out	0x3f, r0	; 63
     698:	0f 90       	pop	r0
     69a:	1f 90       	pop	r1
     69c:	18 95       	reti

0000069e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ec 01       	movw	r28, r24
     6ae:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     6b0:	81 15       	cp	r24, r1
     6b2:	22 e0       	ldi	r18, 0x02	; 2
     6b4:	92 07       	cpc	r25, r18
     6b6:	71 f4       	brne	.+28     	; 0x6d4 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     6b8:	61 e2       	ldi	r22, 0x21	; 33
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	da d0       	rcall	.+436    	; 0x874 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     6c0:	e8 2e       	mov	r14, r24
     6c2:	f1 2c       	mov	r15, r1
     6c4:	60 e2       	ldi	r22, 0x20	; 32
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	d4 d0       	rcall	.+424    	; 0x874 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     6cc:	fe 2c       	mov	r15, r14
     6ce:	ee 24       	eor	r14, r14
     6d0:	e8 2a       	or	r14, r24
     6d2:	10 c0       	rjmp	.+32     	; 0x6f4 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	92 40       	sbci	r25, 0x02	; 2
     6d8:	51 f5       	brne	.+84     	; 0x72e <adc_write_configuration+0x90>
     6da:	65 e2       	ldi	r22, 0x25	; 37
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	c9 d0       	rcall	.+402    	; 0x874 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     6e2:	e8 2e       	mov	r14, r24
     6e4:	f1 2c       	mov	r15, r1
     6e6:	64 e2       	ldi	r22, 0x24	; 36
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	c3 d0       	rcall	.+390    	; 0x874 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     6ee:	fe 2c       	mov	r15, r14
     6f0:	ee 24       	eor	r14, r14

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     6f2:	e8 2a       	or	r14, r24
	cpu_irq_disable();
     6f4:	df b6       	in	r13, 0x3f	; 63
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     6f6:	f8 94       	cli
     6f8:	ce 01       	movw	r24, r28
     6fa:	e6 dd       	rcall	.-1076   	; 0x2c8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     6fc:	88 81       	ld	r24, Y

	adc->CTRLA = ADC_FLUSH_bm;
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	98 83       	st	Y, r25
	adc->CAL = cal;
     702:	ec 86       	std	Y+12, r14	; 0x0c
     704:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
     706:	f8 01       	movw	r30, r16
     708:	25 81       	ldd	r18, Z+5	; 0x05
     70a:	36 81       	ldd	r19, Z+6	; 0x06
     70c:	28 8f       	std	Y+24, r18	; 0x18
     70e:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     710:	92 81       	ldd	r25, Z+2	; 0x02
     712:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     714:	94 81       	ldd	r25, Z+4	; 0x04
     716:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     718:	93 81       	ldd	r25, Z+3	; 0x03
     71a:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	99 83       	std	Y+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     720:	81 70       	andi	r24, 0x01	; 1
     722:	90 81       	ld	r25, Z
     724:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
     726:	88 83       	st	Y, r24
     728:	ce 01       	movw	r24, r28
     72a:	f1 dd       	rcall	.-1054   	; 0x30e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     72c:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	08 95       	ret

0000073e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
     74a:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     74c:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     74e:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     750:	bb dd       	rcall	.-1162   	; 0x2c8 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     752:	88 81       	ld	r24, Y
     754:	80 7c       	andi	r24, 0xC0	; 192
     756:	f8 01       	movw	r30, r16
     758:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     75a:	88 8d       	ldd	r24, Y+24	; 0x18
     75c:	99 8d       	ldd	r25, Y+25	; 0x19
     75e:	85 83       	std	Z+5, r24	; 0x05
     760:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     772:	ce 01       	movw	r24, r28
     774:	cc dd       	rcall	.-1128   	; 0x30e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     776:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	08 95       	ret

00000784 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	7c 01       	movw	r14, r24
     796:	d6 2e       	mov	r13, r22
     798:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     79a:	86 2f       	mov	r24, r22
     79c:	83 70       	andi	r24, 0x03	; 3
     79e:	29 f4       	brne	.+10     	; 0x7aa <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     7a0:	96 2f       	mov	r25, r22
     7a2:	96 95       	lsr	r25
     7a4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     7aa:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     7ae:	90 ff       	sbrs	r25, 0
		index++;
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
     7b2:	e7 01       	movw	r28, r14
     7b4:	a0 96       	adiw	r28, 0x20	; 32
     7b6:	98 e0       	ldi	r25, 0x08	; 8
     7b8:	89 9f       	mul	r24, r25
     7ba:	c0 0d       	add	r28, r0
     7bc:	d1 1d       	adc	r29, r1
     7be:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7c0:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     7c2:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     7c4:	c7 01       	movw	r24, r14
     7c6:	80 dd       	rcall	.-1280   	; 0x2c8 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     7c8:	f8 01       	movw	r30, r16
     7ca:	80 81       	ld	r24, Z
     7cc:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     7ce:	82 81       	ldd	r24, Z+2	; 0x02
     7d0:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
     7d4:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
     7d6:	d0 fe       	sbrs	r13, 0
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     7da:	83 81       	ldd	r24, Z+3	; 0x03
     7dc:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
	adc_disable_clock(adc);
     7de:	c7 01       	movw	r24, r14
     7e0:	96 dd       	rcall	.-1236   	; 0x30e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e2:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	08 95       	ret

000007f6 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	7c 01       	movw	r14, r24
     808:	d6 2e       	mov	r13, r22
     80a:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     80c:	86 2f       	mov	r24, r22
     80e:	83 70       	andi	r24, 0x03	; 3
     810:	29 f4       	brne	.+10     	; 0x81c <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     812:	96 2f       	mov	r25, r22
     814:	96 95       	lsr	r25
     816:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	02 c0       	rjmp	.+4      	; 0x820 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     81c:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     81e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     820:	90 ff       	sbrs	r25, 0
		index++;
     822:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
     824:	e7 01       	movw	r28, r14
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	98 e0       	ldi	r25, 0x08	; 8
     82a:	89 9f       	mul	r24, r25
     82c:	c0 0d       	add	r28, r0
     82e:	d1 1d       	adc	r29, r1
     830:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     832:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     834:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     836:	c7 01       	movw	r24, r14
     838:	47 dd       	rcall	.-1394   	; 0x2c8 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     83a:	88 81       	ld	r24, Y
     83c:	f8 01       	movw	r30, r16
     83e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	81 83       	std	Z+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
     848:	d0 fe       	sbrs	r13, 0
     84a:	02 c0       	rjmp	.+4      	; 0x850 <adcch_read_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     84c:	8e 81       	ldd	r24, Y+6	; 0x06
     84e:	83 83       	std	Z+3, r24	; 0x03
	}
#endif
	adc_disable_clock(adc);
     850:	c7 01       	movw	r24, r14
     852:	5d dd       	rcall	.-1350   	; 0x30e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     854:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	08 95       	ret

00000868 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     868:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     86a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     86c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     86e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     870:	60 83       	st	Z, r22
	ret                             // Return to caller
     872:	08 95       	ret

00000874 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     874:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     878:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     87a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     87c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     880:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     882:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     886:	08 95       	ret

00000888 <qdec_evsys_pin_2_chmux>:
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
	((TC0_t *)tc)->CNT = cnt_value;
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	fa 01       	movw	r30, r20
     88c:	e0 58       	subi	r30, 0x80	; 128
     88e:	fe 4f       	sbci	r31, 0xFE	; 254
     890:	81 15       	cp	r24, r1
     892:	26 e0       	ldi	r18, 0x06	; 6
     894:	92 07       	cpc	r25, r18
     896:	21 f4       	brne	.+8      	; 0x8a0 <qdec_evsys_pin_2_chmux+0x18>
     898:	26 2f       	mov	r18, r22
     89a:	20 65       	ori	r18, 0x50	; 80
     89c:	20 83       	st	Z, r18
     89e:	0e c0       	rjmp	.+28     	; 0x8bc <qdec_evsys_pin_2_chmux+0x34>
     8a0:	80 32       	cpi	r24, 0x20	; 32
     8a2:	26 e0       	ldi	r18, 0x06	; 6
     8a4:	92 07       	cpc	r25, r18
     8a6:	19 f4       	brne	.+6      	; 0x8ae <qdec_evsys_pin_2_chmux+0x26>
     8a8:	68 65       	ori	r22, 0x58	; 88
     8aa:	60 83       	st	Z, r22
     8ac:	08 95       	ret
     8ae:	80 34       	cpi	r24, 0x40	; 64
     8b0:	26 e0       	ldi	r18, 0x06	; 6
     8b2:	92 07       	cpc	r25, r18
     8b4:	19 f4       	brne	.+6      	; 0x8bc <qdec_evsys_pin_2_chmux+0x34>
     8b6:	60 66       	ori	r22, 0x60	; 96
     8b8:	60 83       	st	Z, r22
     8ba:	08 95       	ret
     8bc:	80 36       	cpi	r24, 0x60	; 96
     8be:	96 40       	sbci	r25, 0x06	; 6
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <qdec_evsys_pin_2_chmux+0x3e>
     8c2:	68 66       	ori	r22, 0x68	; 104
     8c4:	60 83       	st	Z, r22
     8c6:	08 95       	ret

000008c8 <qdec_get_config_defaults>:
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	96 e0       	ldi	r25, 0x06	; 6
     8ce:	80 83       	st	Z, r24
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	12 82       	std	Z+2, r1	; 0x02
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	83 83       	std	Z+3, r24	; 0x03
     8da:	94 83       	std	Z+4, r25	; 0x04
     8dc:	15 82       	std	Z+5, r1	; 0x05
     8de:	16 82       	std	Z+6, r1	; 0x06
     8e0:	12 86       	std	Z+10, r1	; 0x0a
     8e2:	13 86       	std	Z+11, r1	; 0x0b
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	98 e0       	ldi	r25, 0x08	; 8
     8e8:	84 87       	std	Z+12, r24	; 0x0c
     8ea:	95 87       	std	Z+13, r25	; 0x0d
     8ec:	80 e4       	ldi	r24, 0x40	; 64
     8ee:	98 e0       	ldi	r25, 0x08	; 8
     8f0:	82 8b       	std	Z+18, r24	; 0x12
     8f2:	93 8b       	std	Z+19, r25	; 0x13
     8f4:	10 8a       	std	Z+16, r1	; 0x10
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	81 8b       	std	Z+17, r24	; 0x11
     8fa:	88 ee       	ldi	r24, 0xE8	; 232
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	84 8b       	std	Z+20, r24	; 0x14
     904:	95 8b       	std	Z+21, r25	; 0x15
     906:	a6 8b       	std	Z+22, r26	; 0x16
     908:	b7 8b       	std	Z+23, r27	; 0x17
     90a:	84 e0       	ldi	r24, 0x04	; 4
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	86 87       	std	Z+14, r24	; 0x0e
     910:	97 87       	std	Z+15, r25	; 0x0f
     912:	08 95       	ret

00000914 <qdec_config_phase_pins>:
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	fc 01       	movw	r30, r24
     91a:	60 83       	st	Z, r22
     91c:	71 83       	std	Z+1, r23	; 0x01
     91e:	42 83       	std	Z+2, r20	; 0x02
     920:	03 83       	std	Z+3, r16	; 0x03
     922:	14 83       	std	Z+4, r17	; 0x04
     924:	25 83       	std	Z+5, r18	; 0x05
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <qdec_config_disable_index_pin>:
     92c:	fc 01       	movw	r30, r24
     92e:	16 82       	std	Z+6, r1	; 0x06
     930:	08 95       	ret

00000932 <qdec_config_event_channel>:
     932:	fc 01       	movw	r30, r24
     934:	63 87       	std	Z+11, r22	; 0x0b
     936:	08 95       	ret

00000938 <qdec_config_tc>:
     938:	fc 01       	movw	r30, r24
     93a:	64 87       	std	Z+12, r22	; 0x0c
     93c:	75 87       	std	Z+13, r23	; 0x0d
     93e:	08 95       	ret

00000940 <qdec_config_revolution>:
     940:	fc 01       	movw	r30, r24
     942:	66 87       	std	Z+14, r22	; 0x0e
     944:	77 87       	std	Z+15, r23	; 0x0f
     946:	08 95       	ret

00000948 <qdec_config_enable_freq>:
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	fc 01       	movw	r30, r24
     94c:	20 8b       	std	Z+16, r18	; 0x10
     94e:	44 8b       	std	Z+20, r20	; 0x14
     950:	55 8b       	std	Z+21, r21	; 0x15
     952:	66 8b       	std	Z+22, r22	; 0x16
     954:	77 8b       	std	Z+23, r23	; 0x17
     956:	08 95       	ret

00000958 <qdec_config_freq_event_channel>:
     958:	fc 01       	movw	r30, r24
     95a:	61 8b       	std	Z+17, r22	; 0x11
     95c:	08 95       	ret

0000095e <qdec_config_freq_tc>:
     95e:	fc 01       	movw	r30, r24
     960:	62 8b       	std	Z+18, r22	; 0x12
     962:	73 8b       	std	Z+19, r23	; 0x13
     964:	08 95       	ret

00000966 <qdec_enabled>:
     966:	2f 92       	push	r2
     968:	3f 92       	push	r3
     96a:	4f 92       	push	r4
     96c:	5f 92       	push	r5
     96e:	6f 92       	push	r6
     970:	7f 92       	push	r7
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
     98c:	e8 81       	ld	r30, Y
     98e:	f9 81       	ldd	r31, Y+1	; 0x01
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	9c 01       	movw	r18, r24
     996:	0a 80       	ldd	r0, Y+2	; 0x02
     998:	02 c0       	rjmp	.+4      	; 0x99e <qdec_enabled+0x38>
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <qdec_enabled+0x34>
     9a2:	22 83       	std	Z+2, r18	; 0x02
     9a4:	0a 80       	ldd	r0, Y+2	; 0x02
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <qdec_enabled+0x46>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	0a 94       	dec	r0
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <qdec_enabled+0x42>
     9b0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     9b4:	e8 81       	ld	r30, Y
     9b6:	f9 81       	ldd	r31, Y+1	; 0x01
     9b8:	80 89       	ldd	r24, Z+16	; 0x10
     9ba:	88 7f       	andi	r24, 0xF8	; 248
     9bc:	9d 81       	ldd	r25, Y+5	; 0x05
     9be:	91 11       	cpse	r25, r1
     9c0:	90 e4       	ldi	r25, 0x40	; 64
     9c2:	89 2b       	or	r24, r25
     9c4:	80 8b       	std	Z+16, r24	; 0x10
     9c6:	8e 81       	ldd	r24, Y+6	; 0x06
     9c8:	88 23       	and	r24, r24
     9ca:	e9 f0       	breq	.+58     	; 0xa06 <qdec_enabled+0xa0>
     9cc:	e8 81       	ld	r30, Y
     9ce:	f9 81       	ldd	r31, Y+1	; 0x01
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9c 01       	movw	r18, r24
     9d6:	0a 80       	ldd	r0, Y+2	; 0x02
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <qdec_enabled+0x78>
     9da:	22 0f       	add	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	0a 94       	dec	r0
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <qdec_enabled+0x74>
     9e2:	22 83       	std	Z+2, r18	; 0x02
     9e4:	0a 80       	ldd	r0, Y+2	; 0x02
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <qdec_enabled+0x86>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	0a 94       	dec	r0
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <qdec_enabled+0x82>
     9f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     9f4:	e8 81       	ld	r30, Y
     9f6:	f9 81       	ldd	r31, Y+1	; 0x01
     9f8:	80 89       	ldd	r24, Z+16	; 0x10
     9fa:	88 7f       	andi	r24, 0xF8	; 248
     9fc:	9f 81       	ldd	r25, Y+7	; 0x07
     9fe:	91 11       	cpse	r25, r1
     a00:	90 e4       	ldi	r25, 0x40	; 64
     a02:	89 2b       	or	r24, r25
     a04:	80 8b       	std	Z+16, r24	; 0x10
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	6a 81       	ldd	r22, Y+2	; 0x02
     a14:	88 81       	ld	r24, Y
     a16:	99 81       	ldd	r25, Y+1	; 0x01
     a18:	37 df       	rcall	.-402    	; 0x888 <qdec_evsys_pin_2_chmux>
     a1a:	ab 84       	ldd	r10, Y+11	; 0x0b
     a1c:	b1 2c       	mov	r11, r1
     a1e:	88 e7       	ldi	r24, 0x78	; 120
     a20:	a8 1a       	sub	r10, r24
     a22:	8e ef       	ldi	r24, 0xFE	; 254
     a24:	b8 0a       	sbc	r11, r24
     a26:	cb 80       	ldd	r12, Y+3	; 0x03
     a28:	dc 80       	ldd	r13, Y+4	; 0x04
     a2a:	e9 ee       	ldi	r30, 0xE9	; 233
     a2c:	ce 16       	cp	r12, r30
     a2e:	e3 e0       	ldi	r30, 0x03	; 3
     a30:	de 06       	cpc	r13, r30
     a32:	b8 f0       	brcs	.+46     	; 0xa62 <qdec_enabled+0xfc>
     a34:	96 01       	movw	r18, r12
     a36:	36 95       	lsr	r19
     a38:	27 95       	ror	r18
     a3a:	36 95       	lsr	r19
     a3c:	27 95       	ror	r18
     a3e:	36 95       	lsr	r19
     a40:	27 95       	ror	r18
     a42:	a5 ec       	ldi	r26, 0xC5	; 197
     a44:	b0 e2       	ldi	r27, 0x20	; 32
     a46:	0e 94 99 43 	call	0x8732	; 0x8732 <__umulhisi3>
     a4a:	9c 01       	movw	r18, r24
     a4c:	32 95       	swap	r19
     a4e:	22 95       	swap	r18
     a50:	2f 70       	andi	r18, 0x0F	; 15
     a52:	23 27       	eor	r18, r19
     a54:	3f 70       	andi	r19, 0x0F	; 15
     a56:	23 27       	eor	r18, r19
     a58:	a0 ec       	ldi	r26, 0xC0	; 192
     a5a:	bd e5       	ldi	r27, 0x5D	; 93
     a5c:	0e 94 99 43 	call	0x8732	; 0x8732 <__umulhisi3>
     a60:	1a c0       	rjmp	.+52     	; 0xa96 <qdec_enabled+0x130>
     a62:	e1 2c       	mov	r14, r1
     a64:	f1 2c       	mov	r15, r1
     a66:	d7 01       	movw	r26, r14
     a68:	c6 01       	movw	r24, r12
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	aa 1f       	adc	r26, r26
     a70:	bb 1f       	adc	r27, r27
     a72:	c8 0e       	add	r12, r24
     a74:	d9 1e       	adc	r13, r25
     a76:	ea 1e       	adc	r14, r26
     a78:	fb 1e       	adc	r15, r27
     a7a:	cc 0c       	add	r12, r12
     a7c:	dd 1c       	adc	r13, r13
     a7e:	ee 1c       	adc	r14, r14
     a80:	ff 1c       	adc	r15, r15
     a82:	cc 0c       	add	r12, r12
     a84:	dd 1c       	adc	r13, r13
     a86:	ee 1c       	adc	r14, r14
     a88:	ff 1c       	adc	r15, r15
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	66 0f       	add	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	88 1f       	adc	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	6b 01       	movw	r12, r22
     a98:	7c 01       	movw	r14, r24
     a9a:	68 30       	cpi	r22, 0x08	; 8
     a9c:	71 05       	cpc	r23, r1
     a9e:	81 05       	cpc	r24, r1
     aa0:	91 05       	cpc	r25, r1
     aa2:	38 f0       	brcs	.+14     	; 0xab2 <qdec_enabled+0x14c>
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f7 e0       	ldi	r31, 0x07	; 7
     aa8:	cf 2e       	mov	r12, r31
     aaa:	d1 2c       	mov	r13, r1
     aac:	e1 2c       	mov	r14, r1
     aae:	f1 2c       	mov	r15, r1
     ab0:	f0 2d       	mov	r31, r0
     ab2:	8c 2d       	mov	r24, r12
     ab4:	88 60       	ori	r24, 0x08	; 8
     ab6:	f5 01       	movw	r30, r10
     ab8:	80 83       	st	Z, r24
     aba:	8e 81       	ldd	r24, Y+6	; 0x06
     abc:	88 23       	and	r24, r24
     abe:	89 f0       	breq	.+34     	; 0xae2 <qdec_enabled+0x17c>
     ac0:	80 81       	ld	r24, Z
     ac2:	98 85       	ldd	r25, Y+8	; 0x08
     ac4:	92 95       	swap	r25
     ac6:	99 0f       	add	r25, r25
     ac8:	90 7e       	andi	r25, 0xE0	; 224
     aca:	80 61       	ori	r24, 0x10	; 16
     acc:	89 2b       	or	r24, r25
     ace:	80 83       	st	Z, r24
     ad0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ad2:	4f 5f       	subi	r20, 0xFF	; 255
     ad4:	6a 81       	ldd	r22, Y+2	; 0x02
     ad6:	6e 5f       	subi	r22, 0xFE	; 254
     ad8:	88 81       	ld	r24, Y
     ada:	99 81       	ldd	r25, Y+1	; 0x01
     adc:	d5 de       	rcall	.-598    	; 0x888 <qdec_evsys_pin_2_chmux>
     ade:	f5 01       	movw	r30, r10
     ae0:	c1 82       	std	Z+1, r12	; 0x01
     ae2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ae6:	da d7       	rcall	.+4020   	; 0x1a9c <tc_enable>
     ae8:	8b 85       	ldd	r24, Y+11	; 0x0b
     aea:	98 e0       	ldi	r25, 0x08	; 8
     aec:	98 0f       	add	r25, r24
     aee:	ec 85       	ldd	r30, Y+12	; 0x0c
     af0:	fd 85       	ldd	r31, Y+13	; 0x0d
     af2:	83 81       	ldd	r24, Z+3	; 0x03
     af4:	80 71       	andi	r24, 0x10	; 16
     af6:	83 83       	std	Z+3, r24	; 0x03
     af8:	83 81       	ldd	r24, Z+3	; 0x03
     afa:	80 66       	ori	r24, 0x60	; 96
     afc:	89 2b       	or	r24, r25
     afe:	83 83       	std	Z+3, r24	; 0x03
     b00:	ec 85       	ldd	r30, Y+12	; 0x0c
     b02:	fd 85       	ldd	r31, Y+13	; 0x0d
     b04:	10 a2       	std	Z+32, r1	; 0x20
     b06:	11 a2       	std	Z+33, r1	; 0x21
     b08:	8e 85       	ldd	r24, Y+14	; 0x0e
     b0a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	ec 85       	ldd	r30, Y+12	; 0x0c
     b10:	fd 85       	ldd	r31, Y+13	; 0x0d
     b12:	86 a3       	std	Z+38, r24	; 0x26
     b14:	97 a3       	std	Z+39, r25	; 0x27
     b16:	ec 85       	ldd	r30, Y+12	; 0x0c
     b18:	fd 85       	ldd	r31, Y+13	; 0x0d
     b1a:	80 81       	ld	r24, Z
     b1c:	80 7f       	andi	r24, 0xF0	; 240
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	80 83       	st	Z, r24
     b22:	88 89       	ldd	r24, Y+16	; 0x10
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <qdec_enabled+0x1c4>
     b28:	14 c1       	rjmp	.+552    	; 0xd52 <qdec_enabled+0x3ec>
     b2a:	e9 89       	ldd	r30, Y+17	; 0x11
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	e8 57       	subi	r30, 0x78	; 120
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	ab 85       	ldd	r26, Y+11	; 0x0b
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	a8 57       	subi	r26, 0x78	; 120
     b38:	be 4f       	sbci	r27, 0xFE	; 254
     b3a:	8c 91       	ld	r24, X
     b3c:	87 70       	andi	r24, 0x07	; 7
     b3e:	80 83       	st	Z, r24
     b40:	49 89       	ldd	r20, Y+17	; 0x11
     b42:	6a 81       	ldd	r22, Y+2	; 0x02
     b44:	88 81       	ld	r24, Y
     b46:	99 81       	ldd	r25, Y+1	; 0x01
     b48:	9f de       	rcall	.-706    	; 0x888 <qdec_evsys_pin_2_chmux>
     b4a:	8a 89       	ldd	r24, Y+18	; 0x12
     b4c:	9b 89       	ldd	r25, Y+19	; 0x13
     b4e:	a6 d7       	rcall	.+3916   	; 0x1a9c <tc_enable>
     b50:	89 89       	ldd	r24, Y+17	; 0x11
     b52:	98 e0       	ldi	r25, 0x08	; 8
     b54:	98 0f       	add	r25, r24
     b56:	ea 89       	ldd	r30, Y+18	; 0x12
     b58:	fb 89       	ldd	r31, Y+19	; 0x13
     b5a:	83 81       	ldd	r24, Z+3	; 0x03
     b5c:	80 71       	andi	r24, 0x10	; 16
     b5e:	83 83       	std	Z+3, r24	; 0x03
     b60:	83 81       	ldd	r24, Z+3	; 0x03
     b62:	80 6a       	ori	r24, 0xA0	; 160
     b64:	89 2b       	or	r24, r25
     b66:	83 83       	std	Z+3, r24	; 0x03
     b68:	ea 89       	ldd	r30, Y+18	; 0x12
     b6a:	fb 89       	ldd	r31, Y+19	; 0x13
     b6c:	10 a2       	std	Z+32, r1	; 0x20
     b6e:	11 a2       	std	Z+33, r1	; 0x21
     b70:	ea 89       	ldd	r30, Y+18	; 0x12
     b72:	fb 89       	ldd	r31, Y+19	; 0x13
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	9f ef       	ldi	r25, 0xFF	; 255
     b78:	86 a3       	std	Z+38, r24	; 0x26
     b7a:	97 a3       	std	Z+39, r25	; 0x27
     b7c:	ea 89       	ldd	r30, Y+18	; 0x12
     b7e:	fb 89       	ldd	r31, Y+19	; 0x13
     b80:	e6 fd       	sbrc	r30, 6
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <qdec_enabled+0x226>
     b84:	81 81       	ldd	r24, Z+1	; 0x01
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	81 83       	std	Z+1, r24	; 0x01
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <qdec_enabled+0x22c>
     b8c:	81 81       	ldd	r24, Z+1	; 0x01
     b8e:	80 61       	ori	r24, 0x10	; 16
     b90:	81 83       	std	Z+1, r24	; 0x01
     b92:	6c 89       	ldd	r22, Y+20	; 0x14
     b94:	7d 89       	ldd	r23, Y+21	; 0x15
     b96:	8e 89       	ldd	r24, Y+22	; 0x16
     b98:	9f 89       	ldd	r25, Y+23	; 0x17
     b9a:	28 ee       	ldi	r18, 0xE8	; 232
     b9c:	33 e0       	ldi	r19, 0x03	; 3
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	0e 94 6f 43 	call	0x86de	; 0x86de <__udivmodsi4>
     ba6:	ce 84       	ldd	r12, Y+14	; 0x0e
     ba8:	df 84       	ldd	r13, Y+15	; 0x0f
     baa:	e1 2c       	mov	r14, r1
     bac:	f1 2c       	mov	r15, r1
     bae:	ca 01       	movw	r24, r20
     bb0:	b9 01       	movw	r22, r18
     bb2:	a7 01       	movw	r20, r14
     bb4:	96 01       	movw	r18, r12
     bb6:	0e 94 6f 43 	call	0x86de	; 0x86de <__udivmodsi4>
     bba:	ea 89       	ldd	r30, Y+18	; 0x12
     bbc:	fb 89       	ldd	r31, Y+19	; 0x13
     bbe:	2e 38       	cpi	r18, 0x8E	; 142
     bc0:	8b e5       	ldi	r24, 0x5B	; 91
     bc2:	38 07       	cpc	r19, r24
     bc4:	41 05       	cpc	r20, r1
     bc6:	51 05       	cpc	r21, r1
     bc8:	28 f4       	brcc	.+10     	; 0xbd4 <qdec_enabled+0x26e>
     bca:	80 81       	ld	r24, Z
     bcc:	80 7f       	andi	r24, 0xF0	; 240
     bce:	87 60       	ori	r24, 0x07	; 7
     bd0:	80 83       	st	Z, r24
     bd2:	3e c0       	rjmp	.+124    	; 0xc50 <qdec_enabled+0x2ea>
     bd4:	27 33       	cpi	r18, 0x37	; 55
     bd6:	8e e6       	ldi	r24, 0x6E	; 110
     bd8:	38 07       	cpc	r19, r24
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	48 07       	cpc	r20, r24
     bde:	51 05       	cpc	r21, r1
     be0:	28 f4       	brcc	.+10     	; 0xbec <qdec_enabled+0x286>
     be2:	80 81       	ld	r24, Z
     be4:	80 7f       	andi	r24, 0xF0	; 240
     be6:	86 60       	ori	r24, 0x06	; 6
     be8:	80 83       	st	Z, r24
     bea:	32 c0       	rjmp	.+100    	; 0xc50 <qdec_enabled+0x2ea>
     bec:	29 3d       	cpi	r18, 0xD9	; 217
     bee:	88 eb       	ldi	r24, 0xB8	; 184
     bf0:	38 07       	cpc	r19, r24
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	48 07       	cpc	r20, r24
     bf6:	51 05       	cpc	r21, r1
     bf8:	28 f4       	brcc	.+10     	; 0xc04 <qdec_enabled+0x29e>
     bfa:	80 81       	ld	r24, Z
     bfc:	80 7f       	andi	r24, 0xF0	; 240
     bfe:	85 60       	ori	r24, 0x05	; 5
     c00:	80 83       	st	Z, r24
     c02:	26 c0       	rjmp	.+76     	; 0xc50 <qdec_enabled+0x2ea>
     c04:	21 3c       	cpi	r18, 0xC1	; 193
     c06:	86 ec       	ldi	r24, 0xC6	; 198
     c08:	38 07       	cpc	r19, r24
     c0a:	8d e2       	ldi	r24, 0x2D	; 45
     c0c:	48 07       	cpc	r20, r24
     c0e:	51 05       	cpc	r21, r1
     c10:	28 f4       	brcc	.+10     	; 0xc1c <qdec_enabled+0x2b6>
     c12:	80 81       	ld	r24, Z
     c14:	80 7f       	andi	r24, 0xF0	; 240
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	80 83       	st	Z, r24
     c1a:	1a c0       	rjmp	.+52     	; 0xc50 <qdec_enabled+0x2ea>
     c1c:	21 38       	cpi	r18, 0x81	; 129
     c1e:	8d e8       	ldi	r24, 0x8D	; 141
     c20:	38 07       	cpc	r19, r24
     c22:	8b e5       	ldi	r24, 0x5B	; 91
     c24:	48 07       	cpc	r20, r24
     c26:	51 05       	cpc	r21, r1
     c28:	28 f4       	brcc	.+10     	; 0xc34 <qdec_enabled+0x2ce>
     c2a:	80 81       	ld	r24, Z
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	83 60       	ori	r24, 0x03	; 3
     c30:	80 83       	st	Z, r24
     c32:	0e c0       	rjmp	.+28     	; 0xc50 <qdec_enabled+0x2ea>
     c34:	21 30       	cpi	r18, 0x01	; 1
     c36:	3b 41       	sbci	r19, 0x1B	; 27
     c38:	47 4b       	sbci	r20, 0xB7	; 183
     c3a:	51 05       	cpc	r21, r1
     c3c:	28 f4       	brcc	.+10     	; 0xc48 <qdec_enabled+0x2e2>
     c3e:	80 81       	ld	r24, Z
     c40:	80 7f       	andi	r24, 0xF0	; 240
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	80 83       	st	Z, r24
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <qdec_enabled+0x2ea>
     c48:	80 81       	ld	r24, Z
     c4a:	80 7f       	andi	r24, 0xF0	; 240
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	80 83       	st	Z, r24
     c50:	ea 89       	ldd	r30, Y+18	; 0x12
     c52:	fb 89       	ldd	r31, Y+19	; 0x13
     c54:	80 81       	ld	r24, Z
     c56:	e8 2f       	mov	r30, r24
     c58:	ef 70       	andi	r30, 0x0F	; 15
     c5a:	8e 2f       	mov	r24, r30
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fc 01       	movw	r30, r24
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	e7 30       	cpi	r30, 0x07	; 7
     c64:	f1 05       	cpc	r31, r1
     c66:	30 f4       	brcc	.+12     	; 0xc74 <qdec_enabled+0x30e>
     c68:	88 27       	eor	r24, r24
     c6a:	e2 50       	subi	r30, 0x02	; 2
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	8f 4f       	sbci	r24, 0xFF	; 255
     c70:	0c 94 91 43 	jmp	0x8722	; 0x8722 <__tablejump2__>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	dc 01       	movw	r26, r24
     c7a:	22 c0       	rjmp	.+68     	; 0xcc0 <qdec_enabled+0x35a>
     c7c:	8d e8       	ldi	r24, 0x8D	; 141
     c7e:	9b e5       	ldi	r25, 0x5B	; 91
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	1d c0       	rjmp	.+58     	; 0xcc0 <qdec_enabled+0x35a>
     c86:	86 e3       	ldi	r24, 0x36	; 54
     c88:	9e e6       	ldi	r25, 0x6E	; 110
     c8a:	a1 e0       	ldi	r26, 0x01	; 1
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	18 c0       	rjmp	.+48     	; 0xcc0 <qdec_enabled+0x35a>
     c90:	88 ed       	ldi	r24, 0xD8	; 216
     c92:	98 eb       	ldi	r25, 0xB8	; 184
     c94:	a5 e0       	ldi	r26, 0x05	; 5
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	13 c0       	rjmp	.+38     	; 0xcc0 <qdec_enabled+0x35a>
     c9a:	80 ec       	ldi	r24, 0xC0	; 192
     c9c:	96 ec       	ldi	r25, 0xC6	; 198
     c9e:	ad e2       	ldi	r26, 0x2D	; 45
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	0e c0       	rjmp	.+28     	; 0xcc0 <qdec_enabled+0x35a>
     ca4:	80 e8       	ldi	r24, 0x80	; 128
     ca6:	9d e8       	ldi	r25, 0x8D	; 141
     ca8:	ab e5       	ldi	r26, 0x5B	; 91
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	09 c0       	rjmp	.+18     	; 0xcc0 <qdec_enabled+0x35a>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	9b e1       	ldi	r25, 0x1B	; 27
     cb2:	a7 eb       	ldi	r26, 0xB7	; 183
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <qdec_enabled+0x35a>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	96 e3       	ldi	r25, 0x36	; 54
     cbc:	ae e6       	ldi	r26, 0x6E	; 110
     cbe:	b1 e0       	ldi	r27, 0x01	; 1
     cc0:	1c 01       	movw	r2, r24
     cc2:	2d 01       	movw	r4, r26
     cc4:	28 2f       	mov	r18, r24
     cc6:	33 2d       	mov	r19, r3
     cc8:	44 2d       	mov	r20, r4
     cca:	55 2d       	mov	r21, r5
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 e0       	ldi	r16, 0x02	; 2
     cd6:	0e 94 06 44 	call	0x880c	; 0x880c <__ashldi3>
     cda:	a2 2e       	mov	r10, r18
     cdc:	b3 2e       	mov	r11, r19
     cde:	c4 2e       	mov	r12, r20
     ce0:	d5 2e       	mov	r13, r21
     ce2:	e6 2e       	mov	r14, r22
     ce4:	f7 2e       	mov	r15, r23
     ce6:	e8 2f       	mov	r30, r24
     ce8:	19 2f       	mov	r17, r25
     cea:	05 e0       	ldi	r16, 0x05	; 5
     cec:	0e 94 06 44 	call	0x880c	; 0x880c <__ashldi3>
     cf0:	0e 2f       	mov	r16, r30
     cf2:	0e 94 28 44 	call	0x8850	; 0x8850 <__subdi3>
     cf6:	a2 2c       	mov	r10, r2
     cf8:	b3 2c       	mov	r11, r3
     cfa:	c4 2c       	mov	r12, r4
     cfc:	d5 2c       	mov	r13, r5
     cfe:	e1 2c       	mov	r14, r1
     d00:	f1 2c       	mov	r15, r1
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	0e 94 1f 44 	call	0x883e	; 0x883e <__adddi3>
     d0a:	03 e0       	ldi	r16, 0x03	; 3
     d0c:	0e 94 06 44 	call	0x880c	; 0x880c <__ashldi3>
     d10:	cc 88       	ldd	r12, Y+20	; 0x14
     d12:	dd 88       	ldd	r13, Y+21	; 0x15
     d14:	ee 88       	ldd	r14, Y+22	; 0x16
     d16:	ff 88       	ldd	r15, Y+23	; 0x17
     d18:	16 01       	movw	r2, r12
     d1a:	27 01       	movw	r4, r14
     d1c:	ac 2c       	mov	r10, r12
     d1e:	b3 2c       	mov	r11, r3
     d20:	c4 2c       	mov	r12, r4
     d22:	d5 2c       	mov	r13, r5
     d24:	e1 2c       	mov	r14, r1
     d26:	f1 2c       	mov	r15, r1
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	0e 94 aa 43 	call	0x8754	; 0x8754 <__udivdi3>
     d2e:	02 e0       	ldi	r16, 0x02	; 2
     d30:	0e 94 06 44 	call	0x880c	; 0x880c <__ashldi3>
     d34:	2e 84       	ldd	r2, Y+14	; 0x0e
     d36:	3f 84       	ldd	r3, Y+15	; 0x0f
     d38:	a2 2c       	mov	r10, r2
     d3a:	b3 2c       	mov	r11, r3
     d3c:	c1 2c       	mov	r12, r1
     d3e:	d1 2c       	mov	r13, r1
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	0e 94 aa 43 	call	0x8754	; 0x8754 <__udivdi3>
     d46:	28 8f       	std	Y+24, r18	; 0x18
     d48:	39 8f       	std	Y+25, r19	; 0x19
     d4a:	4a 8f       	std	Y+26, r20	; 0x1a
     d4c:	5b 8f       	std	Y+27, r21	; 0x1b
     d4e:	1c 8e       	std	Y+28, r1	; 0x1c
     d50:	1d 8e       	std	Y+29, r1	; 0x1d
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	9f 90       	pop	r9
     d68:	8f 90       	pop	r8
     d6a:	7f 90       	pop	r7
     d6c:	6f 90       	pop	r6
     d6e:	5f 90       	pop	r5
     d70:	4f 90       	pop	r4
     d72:	3f 90       	pop	r3
     d74:	2f 90       	pop	r2
     d76:	08 95       	ret

00000d78 <qdec_get_position>:
	tc_write_count(config->timer, 0);
}

uint16_t qdec_get_position(qdec_config_t *config)
{
	return tc_read_count(config->timer);
     d78:	dc 01       	movw	r26, r24
     d7a:	1c 96       	adiw	r26, 0x0c	; 12
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	1d 97       	sbiw	r26, 0x0d	; 13
 * \param tc Pointer to TC module.
 * \note Output the Counter value CNT
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	return (((TC0_t *)tc)->CNT);
     d82:	80 a1       	ldd	r24, Z+32	; 0x20
     d84:	91 a1       	ldd	r25, Z+33	; 0x21
}
     d86:	08 95       	ret

00000d88 <qdec_get_direction>:
{
#if XMEGA_E
	return !(((TC5_t *)config->timer)->CTRLGSET & TC5_DIR_bm);

#else
	return !(((TC0_t *)config->timer)->CTRLFSET & TC0_DIR_bm);
     d88:	dc 01       	movw	r26, r24
     d8a:	1c 96       	adiw	r26, 0x0c	; 12
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	1d 97       	sbiw	r26, 0x0d	; 13
     d92:	81 85       	ldd	r24, Z+9	; 0x09
     d94:	80 95       	com	r24

#endif
}
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	08 95       	ret

00000d9a <qdec_get_frequency>:

uint16_t qdec_get_frequency(qdec_config_t *config)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
	uint16_t capture = 0;

	/* While the CC flag is setted, read the CC value.
	 * This allows to read all CC buffers on XMEGA E and read the last value
	 */
	while (tc_is_cc_interrupt(config->freq_opt.timer, TC_CCA)) {
     da0:	ea 89       	ldd	r30, Y+18	; 0x12
     da2:	fb 89       	ldd	r31, Y+19	; 0x13
 * \return  CCx Interrupt or not
 */
static inline bool tc_is_cc_interrupt(volatile void *tc,
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
     da4:	cf 01       	movw	r24, r30
     da6:	80 74       	andi	r24, 0x40	; 64
     da8:	99 27       	eor	r25, r25
#endif
}

uint16_t qdec_get_frequency(qdec_config_t *config)
{
	uint16_t capture = 0;
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0

	/* While the CC flag is setted, read the CC value.
	 * This allows to read all CC buffers on XMEGA E and read the last value
	 */
	while (tc_is_cc_interrupt(config->freq_opt.timer, TC_CCA)) {
     dae:	05 c0       	rjmp	.+10     	; 0xdba <qdec_get_frequency+0x20>
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			return (((TC0_t *)tc)->CCA);
     db0:	20 a5       	ldd	r18, Z+40	; 0x28
     db2:	31 a5       	ldd	r19, Z+41	; 0x29
     db4:	02 c0       	rjmp	.+4      	; 0xdba <qdec_get_frequency+0x20>
			return (((TC0_t *)tc)->CCD);
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				return (((TC1_t *)tc)->CCA);
     db6:	20 a5       	ldd	r18, Z+40	; 0x28
     db8:	31 a5       	ldd	r19, Z+41	; 0x29
 * \return  CCx Interrupt or not
 */
static inline bool tc_is_cc_interrupt(volatile void *tc,
		enum tc_cc_channel_t channel_index)
{
	if (tc_is_tc0(void *tc)) {
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <qdec_get_frequency+0x2c>
		switch (channel_index) {
		case TC_CCA:
			return (((TC0_t *)tc)->INTFLAGS & TC0_CCAIF_bm);
     dbe:	44 85       	ldd	r20, Z+12	; 0x0c
     dc0:	44 fd       	sbrc	r20, 4
     dc2:	f6 cf       	rjmp	.-20     	; 0xdb0 <qdec_get_frequency+0x16>
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <qdec_get_frequency+0x32>
			return (((TC0_t *)tc)->INTFLAGS & TC0_CCDIF_bm);
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				return (((TC1_t *)tc)->INTFLAGS &
     dc6:	44 85       	ldd	r20, Z+12	; 0x0c
     dc8:	44 fd       	sbrc	r20, 4
     dca:	f5 cf       	rjmp	.-22     	; 0xdb6 <qdec_get_frequency+0x1c>
		capture = tc_read_cc(config->freq_opt.timer, TC_CCA);
	}
	if (capture == 0) {
     dcc:	21 15       	cp	r18, r1
     dce:	31 05       	cpc	r19, r1
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <qdec_get_frequency+0x3e>
		/* Out of range and certainly due to a rebounce not filtered */
		return config->freq_opt.last_freq;
     dd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <qdec_get_frequency+0x54>
	}

	config->freq_opt.last_freq = config->freq_opt.coef / capture;
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	68 8d       	ldd	r22, Y+24	; 0x18
     dde:	79 8d       	ldd	r23, Y+25	; 0x19
     de0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     de2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     de4:	0e 94 6f 43 	call	0x86de	; 0x86de <__udivmodsi4>
     de8:	c9 01       	movw	r24, r18
     dea:	2c 8f       	std	Y+28, r18	; 0x1c
     dec:	3d 8f       	std	Y+29, r19	; 0x1d
	return config->freq_opt.last_freq;
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	0b b6       	in	r0, 0x3b	; 59
     e00:	0f 92       	push	r0
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     e1a:	e0 91 0a 26 	lds	r30, 0x260A	; 0x80260a <tc_tcc0_ovf_callback>
     e1e:	f0 91 0b 26 	lds	r31, 0x260B	; 0x80260b <tc_tcc0_ovf_callback+0x1>
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	09 f0       	breq	.+2      	; 0xe28 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     e26:	19 95       	eicall
	}
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0b be       	out	0x3b, r0	; 59
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	0b b6       	in	r0, 0x3b	; 59
     e5a:	0f 92       	push	r0
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     e74:	e0 91 08 26 	lds	r30, 0x2608	; 0x802608 <tc_tcc0_err_callback>
     e78:	f0 91 09 26 	lds	r31, 0x2609	; 0x802609 <tc_tcc0_err_callback+0x1>
     e7c:	30 97       	sbiw	r30, 0x00	; 0
     e7e:	09 f0       	breq	.+2      	; 0xe82 <__vector_15+0x34>
		tc_tcc0_err_callback();
     e80:	19 95       	eicall
	}
}
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	0b be       	out	0x3b, r0	; 59
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     ece:	e0 91 06 26 	lds	r30, 0x2606	; 0x802606 <tc_tcc0_cca_callback>
     ed2:	f0 91 07 26 	lds	r31, 0x2607	; 0x802607 <tc_tcc0_cca_callback+0x1>
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	09 f0       	breq	.+2      	; 0xedc <__vector_16+0x34>
		tc_tcc0_cca_callback();
     eda:	19 95       	eicall
	}
}
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0b be       	out	0x3b, r0	; 59
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	0b b6       	in	r0, 0x3b	; 59
     f0e:	0f 92       	push	r0
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     f28:	e0 91 04 26 	lds	r30, 0x2604	; 0x802604 <tc_tcc0_ccb_callback>
     f2c:	f0 91 05 26 	lds	r31, 0x2605	; 0x802605 <tc_tcc0_ccb_callback+0x1>
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     f34:	19 95       	eicall
	}
}
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0b be       	out	0x3b, r0	; 59
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	0b b6       	in	r0, 0x3b	; 59
     f68:	0f 92       	push	r0
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     f82:	e0 91 02 26 	lds	r30, 0x2602	; 0x802602 <tc_tcc0_ccc_callback>
     f86:	f0 91 03 26 	lds	r31, 0x2603	; 0x802603 <tc_tcc0_ccc_callback+0x1>
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     f8e:	19 95       	eicall
	}
}
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0b be       	out	0x3b, r0	; 59
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	0b b6       	in	r0, 0x3b	; 59
     fc2:	0f 92       	push	r0
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     fdc:	e0 91 00 26 	lds	r30, 0x2600	; 0x802600 <tc_tcc0_ccd_callback>
     fe0:	f0 91 01 26 	lds	r31, 0x2601	; 0x802601 <tc_tcc0_ccd_callback+0x1>
     fe4:	30 97       	sbiw	r30, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     fe8:	19 95       	eicall
	}
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	0b b6       	in	r0, 0x3b	; 59
    101c:	0f 92       	push	r0
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1036:	e0 91 fe 25 	lds	r30, 0x25FE	; 0x8025fe <tc_tcc1_ovf_callback>
    103a:	f0 91 ff 25 	lds	r31, 0x25FF	; 0x8025ff <tc_tcc1_ovf_callback+0x1>
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	09 f0       	breq	.+2      	; 0x1044 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    1042:	19 95       	eicall
	}
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	0b b6       	in	r0, 0x3b	; 59
    1076:	0f 92       	push	r0
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1090:	e0 91 fc 25 	lds	r30, 0x25FC	; 0x8025fc <tc_tcc1_err_callback>
    1094:	f0 91 fd 25 	lds	r31, 0x25FD	; 0x8025fd <tc_tcc1_err_callback+0x1>
    1098:	30 97       	sbiw	r30, 0x00	; 0
    109a:	09 f0       	breq	.+2      	; 0x109e <__vector_21+0x34>
		tc_tcc1_err_callback();
    109c:	19 95       	eicall
	}
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0b be       	out	0x3b, r0	; 59
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    10ea:	e0 91 fa 25 	lds	r30, 0x25FA	; 0x8025fa <tc_tcc1_cca_callback>
    10ee:	f0 91 fb 25 	lds	r31, 0x25FB	; 0x8025fb <tc_tcc1_cca_callback+0x1>
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    10f6:	19 95       	eicall
	}
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0b be       	out	0x3b, r0	; 59
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	0b b6       	in	r0, 0x3b	; 59
    112a:	0f 92       	push	r0
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1144:	e0 91 f8 25 	lds	r30, 0x25F8	; 0x8025f8 <tc_tcc1_ccb_callback>
    1148:	f0 91 f9 25 	lds	r31, 0x25F9	; 0x8025f9 <tc_tcc1_ccb_callback+0x1>
    114c:	30 97       	sbiw	r30, 0x00	; 0
    114e:	09 f0       	breq	.+2      	; 0x1152 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    1150:	19 95       	eicall
	}
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0b be       	out	0x3b, r0	; 59
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	0b b6       	in	r0, 0x3b	; 59
    1184:	0f 92       	push	r0
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    119e:	e0 91 f6 25 	lds	r30, 0x25F6	; 0x8025f6 <tc_tcd0_ovf_callback>
    11a2:	f0 91 f7 25 	lds	r31, 0x25F7	; 0x8025f7 <tc_tcd0_ovf_callback+0x1>
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    11aa:	19 95       	eicall
	}
}
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0b be       	out	0x3b, r0	; 59
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	0b b6       	in	r0, 0x3b	; 59
    11de:	0f 92       	push	r0
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    11f8:	e0 91 f4 25 	lds	r30, 0x25F4	; 0x8025f4 <tc_tcd0_err_callback>
    11fc:	f0 91 f5 25 	lds	r31, 0x25F5	; 0x8025f5 <tc_tcd0_err_callback+0x1>
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	09 f0       	breq	.+2      	; 0x1206 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1204:	19 95       	eicall
	}
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0b be       	out	0x3b, r0	; 59
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	0b b6       	in	r0, 0x3b	; 59
    1238:	0f 92       	push	r0
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1252:	e0 91 f2 25 	lds	r30, 0x25F2	; 0x8025f2 <tc_tcd0_cca_callback>
    1256:	f0 91 f3 25 	lds	r31, 0x25F3	; 0x8025f3 <tc_tcd0_cca_callback+0x1>
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	09 f0       	breq	.+2      	; 0x1260 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    125e:	19 95       	eicall
	}
}
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0b be       	out	0x3b, r0	; 59
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	0b b6       	in	r0, 0x3b	; 59
    1292:	0f 92       	push	r0
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    12ac:	e0 91 f0 25 	lds	r30, 0x25F0	; 0x8025f0 <tc_tcd0_ccb_callback>
    12b0:	f0 91 f1 25 	lds	r31, 0x25F1	; 0x8025f1 <tc_tcd0_ccb_callback+0x1>
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	09 f0       	breq	.+2      	; 0x12ba <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    12b8:	19 95       	eicall
	}
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0b be       	out	0x3b, r0	; 59
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	0b b6       	in	r0, 0x3b	; 59
    12ec:	0f 92       	push	r0
    12ee:	2f 93       	push	r18
    12f0:	3f 93       	push	r19
    12f2:	4f 93       	push	r20
    12f4:	5f 93       	push	r21
    12f6:	6f 93       	push	r22
    12f8:	7f 93       	push	r23
    12fa:	8f 93       	push	r24
    12fc:	9f 93       	push	r25
    12fe:	af 93       	push	r26
    1300:	bf 93       	push	r27
    1302:	ef 93       	push	r30
    1304:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1306:	e0 91 ee 25 	lds	r30, 0x25EE	; 0x8025ee <tc_tcd0_ccc_callback>
    130a:	f0 91 ef 25 	lds	r31, 0x25EF	; 0x8025ef <tc_tcd0_ccc_callback+0x1>
    130e:	30 97       	sbiw	r30, 0x00	; 0
    1310:	09 f0       	breq	.+2      	; 0x1314 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1312:	19 95       	eicall
	}
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0b be       	out	0x3b, r0	; 59
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	0b b6       	in	r0, 0x3b	; 59
    1346:	0f 92       	push	r0
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1360:	e0 91 ec 25 	lds	r30, 0x25EC	; 0x8025ec <tc_tcd0_ccd_callback>
    1364:	f0 91 ed 25 	lds	r31, 0x25ED	; 0x8025ed <tc_tcd0_ccd_callback+0x1>
    1368:	30 97       	sbiw	r30, 0x00	; 0
    136a:	09 f0       	breq	.+2      	; 0x136e <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    136c:	19 95       	eicall
	}
}
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	7f 91       	pop	r23
    137c:	6f 91       	pop	r22
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	0f 90       	pop	r0
    1388:	0b be       	out	0x3b, r0	; 59
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	0b b6       	in	r0, 0x3b	; 59
    13a0:	0f 92       	push	r0
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    13ba:	e0 91 ea 25 	lds	r30, 0x25EA	; 0x8025ea <tc_tcd1_ovf_callback>
    13be:	f0 91 eb 25 	lds	r31, 0x25EB	; 0x8025eb <tc_tcd1_ovf_callback+0x1>
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    13c6:	19 95       	eicall
	}
}
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0b be       	out	0x3b, r0	; 59
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	0b b6       	in	r0, 0x3b	; 59
    13fa:	0f 92       	push	r0
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1414:	e0 91 e8 25 	lds	r30, 0x25E8	; 0x8025e8 <tc_tcd1_err_callback>
    1418:	f0 91 e9 25 	lds	r31, 0x25E9	; 0x8025e9 <tc_tcd1_err_callback+0x1>
    141c:	30 97       	sbiw	r30, 0x00	; 0
    141e:	09 f0       	breq	.+2      	; 0x1422 <__vector_84+0x34>
		tc_tcd1_err_callback();
    1420:	19 95       	eicall
	}
}
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0b be       	out	0x3b, r0	; 59
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	0b b6       	in	r0, 0x3b	; 59
    1454:	0f 92       	push	r0
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    146e:	e0 91 e6 25 	lds	r30, 0x25E6	; 0x8025e6 <tc_tcd1_cca_callback>
    1472:	f0 91 e7 25 	lds	r31, 0x25E7	; 0x8025e7 <tc_tcd1_cca_callback+0x1>
    1476:	30 97       	sbiw	r30, 0x00	; 0
    1478:	09 f0       	breq	.+2      	; 0x147c <__vector_85+0x34>
		tc_tcd1_cca_callback();
    147a:	19 95       	eicall
	}
}
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0b be       	out	0x3b, r0	; 59
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	0b b6       	in	r0, 0x3b	; 59
    14ae:	0f 92       	push	r0
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    14c8:	e0 91 e4 25 	lds	r30, 0x25E4	; 0x8025e4 <tc_tcd1_ccb_callback>
    14cc:	f0 91 e5 25 	lds	r31, 0x25E5	; 0x8025e5 <tc_tcd1_ccb_callback+0x1>
    14d0:	30 97       	sbiw	r30, 0x00	; 0
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    14d4:	19 95       	eicall
	}
}
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0b be       	out	0x3b, r0	; 59
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	0b b6       	in	r0, 0x3b	; 59
    1508:	0f 92       	push	r0
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1522:	e0 91 e2 25 	lds	r30, 0x25E2	; 0x8025e2 <tc_tce0_ovf_callback>
    1526:	f0 91 e3 25 	lds	r31, 0x25E3	; 0x8025e3 <tc_tce0_ovf_callback+0x1>
    152a:	30 97       	sbiw	r30, 0x00	; 0
    152c:	09 f0       	breq	.+2      	; 0x1530 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    152e:	19 95       	eicall
	}
}
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    157c:	e0 91 e0 25 	lds	r30, 0x25E0	; 0x8025e0 <tc_tce0_err_callback>
    1580:	f0 91 e1 25 	lds	r31, 0x25E1	; 0x8025e1 <tc_tce0_err_callback+0x1>
    1584:	30 97       	sbiw	r30, 0x00	; 0
    1586:	09 f0       	breq	.+2      	; 0x158a <__vector_48+0x34>
		tc_tce0_err_callback();
    1588:	19 95       	eicall
	}
}
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0b be       	out	0x3b, r0	; 59
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	0b b6       	in	r0, 0x3b	; 59
    15bc:	0f 92       	push	r0
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    15d6:	e0 91 de 25 	lds	r30, 0x25DE	; 0x8025de <tc_tce0_cca_callback>
    15da:	f0 91 df 25 	lds	r31, 0x25DF	; 0x8025df <tc_tce0_cca_callback+0x1>
    15de:	30 97       	sbiw	r30, 0x00	; 0
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__vector_49+0x34>
		tc_tce0_cca_callback();
    15e2:	19 95       	eicall
	}
}
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	0b b6       	in	r0, 0x3b	; 59
    1616:	0f 92       	push	r0
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1630:	e0 91 dc 25 	lds	r30, 0x25DC	; 0x8025dc <tc_tce0_ccb_callback>
    1634:	f0 91 dd 25 	lds	r31, 0x25DD	; 0x8025dd <tc_tce0_ccb_callback+0x1>
    1638:	30 97       	sbiw	r30, 0x00	; 0
    163a:	09 f0       	breq	.+2      	; 0x163e <__vector_50+0x34>
		tc_tce0_ccb_callback();
    163c:	19 95       	eicall
	}
}
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0b be       	out	0x3b, r0	; 59
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	0b b6       	in	r0, 0x3b	; 59
    1670:	0f 92       	push	r0
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    168a:	e0 91 da 25 	lds	r30, 0x25DA	; 0x8025da <tc_tce0_ccc_callback>
    168e:	f0 91 db 25 	lds	r31, 0x25DB	; 0x8025db <tc_tce0_ccc_callback+0x1>
    1692:	30 97       	sbiw	r30, 0x00	; 0
    1694:	09 f0       	breq	.+2      	; 0x1698 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1696:	19 95       	eicall
	}
}
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	9f 91       	pop	r25
    16a2:	8f 91       	pop	r24
    16a4:	7f 91       	pop	r23
    16a6:	6f 91       	pop	r22
    16a8:	5f 91       	pop	r21
    16aa:	4f 91       	pop	r20
    16ac:	3f 91       	pop	r19
    16ae:	2f 91       	pop	r18
    16b0:	0f 90       	pop	r0
    16b2:	0b be       	out	0x3b, r0	; 59
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	0b b6       	in	r0, 0x3b	; 59
    16ca:	0f 92       	push	r0
    16cc:	2f 93       	push	r18
    16ce:	3f 93       	push	r19
    16d0:	4f 93       	push	r20
    16d2:	5f 93       	push	r21
    16d4:	6f 93       	push	r22
    16d6:	7f 93       	push	r23
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    16e4:	e0 91 d8 25 	lds	r30, 0x25D8	; 0x8025d8 <tc_tce0_ccd_callback>
    16e8:	f0 91 d9 25 	lds	r31, 0x25D9	; 0x8025d9 <tc_tce0_ccd_callback+0x1>
    16ec:	30 97       	sbiw	r30, 0x00	; 0
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    16f0:	19 95       	eicall
	}
}
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0b be       	out	0x3b, r0	; 59
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1718:	1f 92       	push	r1
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	0b b6       	in	r0, 0x3b	; 59
    1724:	0f 92       	push	r0
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    173e:	e0 91 d6 25 	lds	r30, 0x25D6	; 0x8025d6 <tc_tce1_ovf_callback>
    1742:	f0 91 d7 25 	lds	r31, 0x25D7	; 0x8025d7 <tc_tce1_ovf_callback+0x1>
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <__vector_53+0x34>
		tc_tce1_ovf_callback();
    174a:	19 95       	eicall
	}
}
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0b be       	out	0x3b, r0	; 59
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0
    176e:	1f 90       	pop	r1
    1770:	18 95       	reti

00001772 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	0b b6       	in	r0, 0x3b	; 59
    177e:	0f 92       	push	r0
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1798:	e0 91 d4 25 	lds	r30, 0x25D4	; 0x8025d4 <tc_tce1_err_callback>
    179c:	f0 91 d5 25 	lds	r31, 0x25D5	; 0x8025d5 <tc_tce1_err_callback+0x1>
    17a0:	30 97       	sbiw	r30, 0x00	; 0
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__vector_54+0x34>
		tc_tce1_err_callback();
    17a4:	19 95       	eicall
	}
}
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	0f 90       	pop	r0
    17c0:	0b be       	out	0x3b, r0	; 59
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	0b b6       	in	r0, 0x3b	; 59
    17d8:	0f 92       	push	r0
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    17f2:	e0 91 d2 25 	lds	r30, 0x25D2	; 0x8025d2 <tc_tce1_cca_callback>
    17f6:	f0 91 d3 25 	lds	r31, 0x25D3	; 0x8025d3 <tc_tce1_cca_callback+0x1>
    17fa:	30 97       	sbiw	r30, 0x00	; 0
    17fc:	09 f0       	breq	.+2      	; 0x1800 <__vector_55+0x34>
		tc_tce1_cca_callback();
    17fe:	19 95       	eicall
	}
}
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0b be       	out	0x3b, r0	; 59
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	0b b6       	in	r0, 0x3b	; 59
    1832:	0f 92       	push	r0
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    184c:	e0 91 d0 25 	lds	r30, 0x25D0	; 0x8025d0 <tc_tce1_ccb_callback>
    1850:	f0 91 d1 25 	lds	r31, 0x25D1	; 0x8025d1 <tc_tce1_ccb_callback+0x1>
    1854:	30 97       	sbiw	r30, 0x00	; 0
    1856:	09 f0       	breq	.+2      	; 0x185a <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1858:	19 95       	eicall
	}
}
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	0b be       	out	0x3b, r0	; 59
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	0b b6       	in	r0, 0x3b	; 59
    188c:	0f 92       	push	r0
    188e:	2f 93       	push	r18
    1890:	3f 93       	push	r19
    1892:	4f 93       	push	r20
    1894:	5f 93       	push	r21
    1896:	6f 93       	push	r22
    1898:	7f 93       	push	r23
    189a:	8f 93       	push	r24
    189c:	9f 93       	push	r25
    189e:	af 93       	push	r26
    18a0:	bf 93       	push	r27
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    18a6:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <tc_tcf0_ovf_callback>
    18aa:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <tc_tcf0_ovf_callback+0x1>
    18ae:	30 97       	sbiw	r30, 0x00	; 0
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    18b2:	19 95       	eicall
	}
}
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0b be       	out	0x3b, r0	; 59
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	0b b6       	in	r0, 0x3b	; 59
    18e6:	0f 92       	push	r0
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1900:	e0 91 cc 25 	lds	r30, 0x25CC	; 0x8025cc <tc_tcf0_err_callback>
    1904:	f0 91 cd 25 	lds	r31, 0x25CD	; 0x8025cd <tc_tcf0_err_callback+0x1>
    1908:	30 97       	sbiw	r30, 0x00	; 0
    190a:	09 f0       	breq	.+2      	; 0x190e <__vector_109+0x34>
		tc_tcf0_err_callback();
    190c:	19 95       	eicall
	}
}
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	0b b6       	in	r0, 0x3b	; 59
    1940:	0f 92       	push	r0
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    195a:	e0 91 ca 25 	lds	r30, 0x25CA	; 0x8025ca <tc_tcf0_cca_callback>
    195e:	f0 91 cb 25 	lds	r31, 0x25CB	; 0x8025cb <tc_tcf0_cca_callback+0x1>
    1962:	30 97       	sbiw	r30, 0x00	; 0
    1964:	09 f0       	breq	.+2      	; 0x1968 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1966:	19 95       	eicall
	}
}
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0b be       	out	0x3b, r0	; 59
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	0b b6       	in	r0, 0x3b	; 59
    199a:	0f 92       	push	r0
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    19b4:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <tc_tcf0_ccb_callback>
    19b8:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <tc_tcf0_ccb_callback+0x1>
    19bc:	30 97       	sbiw	r30, 0x00	; 0
    19be:	09 f0       	breq	.+2      	; 0x19c2 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    19c0:	19 95       	eicall
	}
}
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0b be       	out	0x3b, r0	; 59
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	0b b6       	in	r0, 0x3b	; 59
    19f4:	0f 92       	push	r0
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1a0e:	e0 91 c6 25 	lds	r30, 0x25C6	; 0x8025c6 <tc_tcf0_ccc_callback>
    1a12:	f0 91 c7 25 	lds	r31, 0x25C7	; 0x8025c7 <tc_tcf0_ccc_callback+0x1>
    1a16:	30 97       	sbiw	r30, 0x00	; 0
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1a1a:	19 95       	eicall
	}
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0b be       	out	0x3b, r0	; 59
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	0b b6       	in	r0, 0x3b	; 59
    1a4e:	0f 92       	push	r0
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1a68:	e0 91 c4 25 	lds	r30, 0x25C4	; 0x8025c4 <tc_tcf0_ccd_callback>
    1a6c:	f0 91 c5 25 	lds	r31, 0x25C5	; 0x8025c5 <tc_tcf0_ccd_callback+0x1>
    1a70:	30 97       	sbiw	r30, 0x00	; 0
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1a74:	19 95       	eicall
	}
}
    1a76:	ff 91       	pop	r31
    1a78:	ef 91       	pop	r30
    1a7a:	bf 91       	pop	r27
    1a7c:	af 91       	pop	r26
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	7f 91       	pop	r23
    1a84:	6f 91       	pop	r22
    1a86:	5f 91       	pop	r21
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	0f 90       	pop	r0
    1a90:	0b be       	out	0x3b, r0	; 59
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	18 95       	reti

00001a9c <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1a9c:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a9e:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1aa0:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	39 2f       	mov	r19, r25
    1aa6:	21 15       	cp	r18, r1
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	38 07       	cpc	r19, r24
    1aac:	59 f4       	brne	.+22     	; 0x1ac4 <tc_enable+0x28>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1ab8:	64 e0       	ldi	r22, 0x04	; 4
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1ac2:	5b c0       	rjmp	.+182    	; 0x1b7a <tc_enable+0xde>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1ac4:	20 34       	cpi	r18, 0x40	; 64
    1ac6:	88 e0       	ldi	r24, 0x08	; 8
    1ac8:	38 07       	cpc	r19, r24
    1aca:	59 f4       	brne	.+22     	; 0x1ae2 <tc_enable+0x46>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1acc:	62 e0       	ldi	r22, 0x02	; 2
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1ad6:	64 e0       	ldi	r22, 0x04	; 4
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1ae0:	4c c0       	rjmp	.+152    	; 0x1b7a <tc_enable+0xde>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1ae2:	21 15       	cp	r18, r1
    1ae4:	89 e0       	ldi	r24, 0x09	; 9
    1ae6:	38 07       	cpc	r19, r24
    1ae8:	59 f4       	brne	.+22     	; 0x1b00 <tc_enable+0x64>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	84 e0       	ldi	r24, 0x04	; 4
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	84 e0       	ldi	r24, 0x04	; 4
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1afe:	3d c0       	rjmp	.+122    	; 0x1b7a <tc_enable+0xde>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1b00:	20 34       	cpi	r18, 0x40	; 64
    1b02:	89 e0       	ldi	r24, 0x09	; 9
    1b04:	38 07       	cpc	r19, r24
    1b06:	59 f4       	brne	.+22     	; 0x1b1e <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	84 e0       	ldi	r24, 0x04	; 4
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1b1c:	2e c0       	rjmp	.+92     	; 0x1b7a <tc_enable+0xde>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1b1e:	21 15       	cp	r18, r1
    1b20:	8a e0       	ldi	r24, 0x0A	; 10
    1b22:	38 07       	cpc	r19, r24
    1b24:	59 f4       	brne	.+22     	; 0x1b3c <tc_enable+0xa0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	85 e0       	ldi	r24, 0x05	; 5
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b30:	64 e0       	ldi	r22, 0x04	; 4
    1b32:	85 e0       	ldi	r24, 0x05	; 5
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1b3a:	1f c0       	rjmp	.+62     	; 0x1b7a <tc_enable+0xde>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1b3c:	20 34       	cpi	r18, 0x40	; 64
    1b3e:	8a e0       	ldi	r24, 0x0A	; 10
    1b40:	38 07       	cpc	r19, r24
    1b42:	59 f4       	brne	.+22     	; 0x1b5a <tc_enable+0xbe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	85 e0       	ldi	r24, 0x05	; 5
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b4e:	64 e0       	ldi	r22, 0x04	; 4
    1b50:	85 e0       	ldi	r24, 0x05	; 5
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1b58:	10 c0       	rjmp	.+32     	; 0x1b7a <tc_enable+0xde>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1b5a:	21 15       	cp	r18, r1
    1b5c:	3b 40       	sbci	r19, 0x0B	; 11
    1b5e:	59 f4       	brne	.+22     	; 0x1b76 <tc_enable+0xda>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	86 e0       	ldi	r24, 0x06	; 6
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b6a:	64 e0       	ldi	r22, 0x04	; 4
    1b6c:	86 e0       	ldi	r24, 0x06	; 6
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <sysclk_enable_module>
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <tc_enable+0xde>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b76:	cf bf       	out	0x3f, r28	; 63
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <tc_enable+0xf0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b7a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b7c:	f8 94       	cli
    1b7e:	e9 e4       	ldi	r30, 0x49	; 73
    1b80:	fa e2       	ldi	r31, 0x2A	; 42
    1b82:	81 81       	ldd	r24, Z+1	; 0x01
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b88:	9f bf       	out	0x3f, r25	; 63
    1b8a:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1b94:	e0 91 0c 26 	lds	r30, 0x260C	; 0x80260c <transfer>
    1b98:	f0 91 0d 26 	lds	r31, 0x260D	; 0x80260d <transfer+0x1>
    1b9c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1b9e:	83 ff       	sbrs	r24, 3
    1ba0:	0b c0       	rjmp	.+22     	; 0x1bb8 <twim_interrupt_handler+0x28>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1ba2:	88 60       	ori	r24, 0x08	; 8
    1ba4:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1baa:	86 ef       	ldi	r24, 0xF6	; 246
    1bac:	9f ef       	ldi	r25, 0xFF	; 255
    1bae:	80 93 16 26 	sts	0x2616, r24	; 0x802616 <transfer+0xa>
    1bb2:	90 93 17 26 	sts	0x2617, r25	; 0x802617 <transfer+0xb>
    1bb6:	90 c0       	rjmp	.+288    	; 0x1cd8 <twim_interrupt_handler+0x148>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1bb8:	98 2f       	mov	r25, r24
    1bba:	94 71       	andi	r25, 0x14	; 20
    1bbc:	49 f0       	breq	.+18     	; 0x1bd0 <twim_interrupt_handler+0x40>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	9f ef       	ldi	r25, 0xFF	; 255
    1bc6:	80 93 16 26 	sts	0x2616, r24	; 0x802616 <transfer+0xa>
    1bca:	90 93 17 26 	sts	0x2617, r25	; 0x802617 <transfer+0xb>
    1bce:	84 c0       	rjmp	.+264    	; 0x1cd8 <twim_interrupt_handler+0x148>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1bd0:	86 ff       	sbrs	r24, 6
    1bd2:	45 c0       	rjmp	.+138    	; 0x1c5e <twim_interrupt_handler+0xce>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1bd4:	cc e0       	ldi	r28, 0x0C	; 12
    1bd6:	d6 e2       	ldi	r29, 0x26	; 38
    1bd8:	aa 81       	ldd	r26, Y+2	; 0x02
    1bda:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	9d 81       	ldd	r25, Y+5	; 0x05
    1be0:	14 96       	adiw	r26, 0x04	; 4
    1be2:	2d 91       	ld	r18, X+
    1be4:	3c 91       	ld	r19, X
    1be6:	15 97       	sbiw	r26, 0x05	; 5
    1be8:	82 17       	cp	r24, r18
    1bea:	93 07       	cpc	r25, r19
    1bec:	6c f4       	brge	.+26     	; 0x1c08 <twim_interrupt_handler+0x78>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1bee:	9c 01       	movw	r18, r24
    1bf0:	2f 5f       	subi	r18, 0xFF	; 255
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	20 93 10 26 	sts	0x2610, r18	; 0x802610 <transfer+0x4>
    1bf8:	30 93 11 26 	sts	0x2611, r19	; 0x802611 <transfer+0x5>
    1bfc:	a8 0f       	add	r26, r24
    1bfe:	b9 1f       	adc	r27, r25
    1c00:	11 96       	adiw	r26, 0x01	; 1
    1c02:	8c 91       	ld	r24, X
    1c04:	87 83       	std	Z+7, r24	; 0x07
    1c06:	68 c0       	rjmp	.+208    	; 0x1cd8 <twim_interrupt_handler+0x148>

	} else if (transfer.data_count < pkg->length) {
    1c08:	80 91 12 26 	lds	r24, 0x2612	; 0x802612 <transfer+0x6>
    1c0c:	90 91 13 26 	lds	r25, 0x2613	; 0x802613 <transfer+0x7>
    1c10:	18 96       	adiw	r26, 0x08	; 8
    1c12:	2d 91       	ld	r18, X+
    1c14:	3c 91       	ld	r19, X
    1c16:	19 97       	sbiw	r26, 0x09	; 9
    1c18:	82 17       	cp	r24, r18
    1c1a:	93 07       	cpc	r25, r19
    1c1c:	c8 f4       	brcc	.+50     	; 0x1c50 <twim_interrupt_handler+0xc0>

		if (transfer.read) {
    1c1e:	20 91 14 26 	lds	r18, 0x2614	; 0x802614 <transfer+0x8>
    1c22:	22 23       	and	r18, r18
    1c24:	21 f0       	breq	.+8      	; 0x1c2e <twim_interrupt_handler+0x9e>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1c26:	86 81       	ldd	r24, Z+6	; 0x06
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	86 83       	std	Z+6, r24	; 0x06
    1c2c:	55 c0       	rjmp	.+170    	; 0x1cd8 <twim_interrupt_handler+0x148>

		} else {
			const uint8_t * const data = pkg->buffer;
    1c2e:	16 96       	adiw	r26, 0x06	; 6
    1c30:	2d 91       	ld	r18, X+
    1c32:	3c 91       	ld	r19, X
    1c34:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1c36:	ac 01       	movw	r20, r24
    1c38:	4f 5f       	subi	r20, 0xFF	; 255
    1c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3c:	40 93 12 26 	sts	0x2612, r20	; 0x802612 <transfer+0x6>
    1c40:	50 93 13 26 	sts	0x2613, r21	; 0x802613 <transfer+0x7>
    1c44:	d9 01       	movw	r26, r18
    1c46:	a8 0f       	add	r26, r24
    1c48:	b9 1f       	adc	r27, r25
    1c4a:	8c 91       	ld	r24, X
    1c4c:	87 83       	std	Z+7, r24	; 0x07
    1c4e:	44 c0       	rjmp	.+136    	; 0x1cd8 <twim_interrupt_handler+0x148>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1c54:	10 92 16 26 	sts	0x2616, r1	; 0x802616 <transfer+0xa>
    1c58:	10 92 17 26 	sts	0x2617, r1	; 0x802617 <transfer+0xb>
    1c5c:	3d c0       	rjmp	.+122    	; 0x1cd8 <twim_interrupt_handler+0x148>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1c5e:	88 23       	and	r24, r24
    1c60:	ac f5       	brge	.+106    	; 0x1ccc <twim_interrupt_handler+0x13c>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1c62:	ac e0       	ldi	r26, 0x0C	; 12
    1c64:	b6 e2       	ldi	r27, 0x26	; 38
    1c66:	12 96       	adiw	r26, 0x02	; 2
    1c68:	cd 91       	ld	r28, X+
    1c6a:	dc 91       	ld	r29, X
    1c6c:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1c6e:	16 96       	adiw	r26, 0x06	; 6
    1c70:	8d 91       	ld	r24, X+
    1c72:	9c 91       	ld	r25, X
    1c74:	17 97       	sbiw	r26, 0x07	; 7
    1c76:	28 85       	ldd	r18, Y+8	; 0x08
    1c78:	39 85       	ldd	r19, Y+9	; 0x09
    1c7a:	82 17       	cp	r24, r18
    1c7c:	93 07       	cpc	r25, r19
    1c7e:	e8 f4       	brcc	.+58     	; 0x1cba <twim_interrupt_handler+0x12a>

		uint8_t * const data = pkg->buffer;
    1c80:	6e 81       	ldd	r22, Y+6	; 0x06
    1c82:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1c84:	9c 01       	movw	r18, r24
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	20 93 12 26 	sts	0x2612, r18	; 0x802612 <transfer+0x6>
    1c8e:	30 93 13 26 	sts	0x2613, r19	; 0x802613 <transfer+0x7>
    1c92:	47 81       	ldd	r20, Z+7	; 0x07
    1c94:	db 01       	movw	r26, r22
    1c96:	a8 0f       	add	r26, r24
    1c98:	b9 1f       	adc	r27, r25
    1c9a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1c9c:	88 85       	ldd	r24, Y+8	; 0x08
    1c9e:	99 85       	ldd	r25, Y+9	; 0x09
    1ca0:	28 17       	cp	r18, r24
    1ca2:	39 07       	cpc	r19, r25
    1ca4:	18 f4       	brcc	.+6      	; 0x1cac <twim_interrupt_handler+0x11c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	83 83       	std	Z+3, r24	; 0x03
    1caa:	16 c0       	rjmp	.+44     	; 0x1cd8 <twim_interrupt_handler+0x148>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1cac:	87 e0       	ldi	r24, 0x07	; 7
    1cae:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1cb0:	10 92 16 26 	sts	0x2616, r1	; 0x802616 <transfer+0xa>
    1cb4:	10 92 17 26 	sts	0x2617, r1	; 0x802617 <transfer+0xb>
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <twim_interrupt_handler+0x148>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1cbe:	89 ef       	ldi	r24, 0xF9	; 249
    1cc0:	9f ef       	ldi	r25, 0xFF	; 255
    1cc2:	80 93 16 26 	sts	0x2616, r24	; 0x802616 <transfer+0xa>
    1cc6:	90 93 17 26 	sts	0x2617, r25	; 0x802617 <transfer+0xb>
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <twim_interrupt_handler+0x148>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1ccc:	8b ef       	ldi	r24, 0xFB	; 251
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	80 93 16 26 	sts	0x2616, r24	; 0x802616 <transfer+0xa>
    1cd4:	90 93 17 26 	sts	0x2617, r25	; 0x802617 <transfer+0xb>
	}
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1cde:	1f 92       	push	r1
    1ce0:	0f 92       	push	r0
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	0f 92       	push	r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	0b b6       	in	r0, 0x3b	; 59
    1cea:	0f 92       	push	r0
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
    1d04:	45 df       	rcall	.-374    	; 0x1b90 <twim_interrupt_handler>
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0b be       	out	0x3b, r0	; 59
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	0b b6       	in	r0, 0x3b	; 59
    1d38:	0f 92       	push	r0
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	1e df       	rcall	.-452    	; 0x1b90 <twim_interrupt_handler>
    1d54:	ff 91       	pop	r31
    1d56:	ef 91       	pop	r30
    1d58:	bf 91       	pop	r27
    1d5a:	af 91       	pop	r26
    1d5c:	9f 91       	pop	r25
    1d5e:	8f 91       	pop	r24
    1d60:	7f 91       	pop	r23
    1d62:	6f 91       	pop	r22
    1d64:	5f 91       	pop	r21
    1d66:	4f 91       	pop	r20
    1d68:	3f 91       	pop	r19
    1d6a:	2f 91       	pop	r18
    1d6c:	0f 90       	pop	r0
    1d6e:	0b be       	out	0x3b, r0	; 59
    1d70:	0f 90       	pop	r0
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	0f 90       	pop	r0
    1d76:	1f 90       	pop	r1
    1d78:	18 95       	reti

00001d7a <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1d7a:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1d7c:	db 01       	movw	r26, r22
    1d7e:	14 96       	adiw	r26, 0x04	; 4
    1d80:	8c 91       	ld	r24, X
    1d82:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1d84:	88 e7       	ldi	r24, 0x78	; 120
    1d86:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1d8c:	ec e0       	ldi	r30, 0x0C	; 12
    1d8e:	f6 e2       	ldi	r31, 0x26	; 38
    1d90:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    1d92:	12 86       	std	Z+10, r1	; 0x0a
    1d94:	13 86       	std	Z+11, r1	; 0x0b

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1d96:	e0 ea       	ldi	r30, 0xA0	; 160
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1da0:	78 94       	sei

	return STATUS_OK;
}
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	08 95       	ret

00001da8 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ec 01       	movw	r28, r24
    1dae:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1db0:	89 2b       	or	r24, r25
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <twi_master_transfer+0xe>
    1db4:	51 c0       	rjmp	.+162    	; 0x1e58 <twi_master_transfer+0xb0>
    1db6:	30 97       	sbiw	r30, 0x00	; 0
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <twi_master_transfer+0x14>
    1dba:	51 c0       	rjmp	.+162    	; 0x1e5e <twi_master_transfer+0xb6>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1dbc:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1dbe:	80 91 15 26 	lds	r24, 0x2615	; 0x802615 <transfer+0x9>
    1dc2:	88 23       	and	r24, r24
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <twi_master_transfer+0x24>

		if (no_wait) { return ERR_BUSY; }
    1dc6:	99 23       	and	r25, r25
    1dc8:	f1 f3       	breq	.-4      	; 0x1dc6 <twi_master_transfer+0x1e>
    1dca:	4c c0       	rjmp	.+152    	; 0x1e64 <twi_master_transfer+0xbc>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1dcc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1dce:	f8 94       	cli
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1dd0:	ac e0       	ldi	r26, 0x0C	; 12
    1dd2:	b6 e2       	ldi	r27, 0x26	; 38
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	19 96       	adiw	r26, 0x09	; 9
    1dd8:	9c 93       	st	X, r25
    1dda:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    1ddc:	20 e8       	ldi	r18, 0x80	; 128
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	1a 96       	adiw	r26, 0x0a	; 10
    1de2:	2d 93       	st	X+, r18
    1de4:	3c 93       	st	X, r19
    1de6:	1b 97       	sbiw	r26, 0x0b	; 11
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1de8:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1dea:	cd 93       	st	X+, r28
    1dec:	dc 93       	st	X, r29
    1dee:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    1df0:	12 96       	adiw	r26, 0x02	; 2
    1df2:	6d 93       	st	X+, r22
    1df4:	7c 93       	st	X, r23
    1df6:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    1df8:	14 96       	adiw	r26, 0x04	; 4
    1dfa:	1d 92       	st	X+, r1
    1dfc:	1c 92       	st	X, r1
    1dfe:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    1e00:	16 96       	adiw	r26, 0x06	; 6
    1e02:	1d 92       	st	X+, r1
    1e04:	1c 92       	st	X, r1
    1e06:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    1e08:	18 96       	adiw	r26, 0x08	; 8
    1e0a:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    1e10:	24 81       	ldd	r18, Z+4	; 0x04
    1e12:	35 81       	ldd	r19, Z+5	; 0x05
    1e14:	23 2b       	or	r18, r19
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <twi_master_transfer+0x74>
    1e18:	41 11       	cpse	r20, r1
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <twi_master_transfer+0x78>
			transfer.bus->MASTER.ADDR = chip;
    1e1c:	8e 83       	std	Y+6, r24	; 0x06
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <twi_master_transfer+0x7c>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1e20:	81 60       	ori	r24, 0x01	; 1
    1e22:	8e 83       	std	Y+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1e24:	ec e0       	ldi	r30, 0x0C	; 12
    1e26:	f6 e2       	ldi	r31, 0x26	; 38
    1e28:	22 85       	ldd	r18, Z+10	; 0x0a
    1e2a:	33 85       	ldd	r19, Z+11	; 0x0b
    1e2c:	20 38       	cpi	r18, 0x80	; 128
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	d9 f3       	breq	.-10     	; 0x1e28 <twi_master_transfer+0x80>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1e34:	83 70       	andi	r24, 0x03	; 3
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	49 f0       	breq	.+18     	; 0x1e4c <twi_master_transfer+0xa4>
    1e3a:	ac e0       	ldi	r26, 0x0C	; 12
    1e3c:	b6 e2       	ldi	r27, 0x26	; 38
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1e44:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1e46:	83 70       	andi	r24, 0x03	; 3
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	c9 f7       	brne	.-14     	; 0x1e3e <twi_master_transfer+0x96>

	status_code_t const status = transfer.status;
    1e4c:	ec e0       	ldi	r30, 0x0C	; 12
    1e4e:	f6 e2       	ldi	r31, 0x26	; 38
    1e50:	82 85       	ldd	r24, Z+10	; 0x0a
    1e52:	93 85       	ldd	r25, Z+11	; 0x0b

	transfer.locked = false;
    1e54:	11 86       	std	Z+9, r1	; 0x09
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1e58:	88 ef       	ldi	r24, 0xF8	; 248
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <twi_master_transfer+0xc0>
    1e5e:	88 ef       	ldi	r24, 0xF8	; 248
    1e60:	9f ef       	ldi	r25, 0xFF	; 255
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1e64:	86 ef       	ldi	r24, 0xF6	; 246
    1e66:	9f ef       	ldi	r25, 0xFF	; 255

		status = twim_release();
	}

	return status;
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e6e:	81 11       	cpse	r24, r1
    1e70:	18 c0       	rjmp	.+48     	; 0x1ea2 <udd_sleep_mode+0x34>
    1e72:	90 91 a4 28 	lds	r25, 0x28A4	; 0x8028a4 <udd_b_idle>
    1e76:	99 23       	and	r25, r25
    1e78:	89 f0       	breq	.+34     	; 0x1e9c <udd_sleep_mode+0x2e>
    1e7a:	2f b7       	in	r18, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	e9 e4       	ldi	r30, 0x49	; 73
    1e80:	fa e2       	ldi	r31, 0x2A	; 42
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	91 50       	subi	r25, 0x01	; 1
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	2f bf       	out	0x3f, r18	; 63
    1e8a:	08 c0       	rjmp	.+16     	; 0x1e9c <udd_sleep_mode+0x2e>
    1e8c:	2f b7       	in	r18, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	e9 e4       	ldi	r30, 0x49	; 73
    1e92:	fa e2       	ldi	r31, 0x2A	; 42
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	9f 5f       	subi	r25, 0xFF	; 255
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	2f bf       	out	0x3f, r18	; 63
    1e9c:	80 93 a4 28 	sts	0x28A4, r24	; 0x8028a4 <udd_b_idle>
    1ea0:	08 95       	ret
    1ea2:	90 91 a4 28 	lds	r25, 0x28A4	; 0x8028a4 <udd_b_idle>
    1ea6:	99 23       	and	r25, r25
    1ea8:	89 f3       	breq	.-30     	; 0x1e8c <udd_sleep_mode+0x1e>
    1eaa:	f8 cf       	rjmp	.-16     	; 0x1e9c <udd_sleep_mode+0x2e>

00001eac <udd_ctrl_init>:
    1eac:	0f 93       	push	r16
    1eae:	e8 ec       	ldi	r30, 0xC8	; 200
    1eb0:	f4 e0       	ldi	r31, 0x04	; 4
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 7d       	andi	r24, 0xDF	; 223
    1eb6:	80 83       	st	Z, r24
    1eb8:	80 81       	ld	r24, Z
    1eba:	8f 7d       	andi	r24, 0xDF	; 223
    1ebc:	80 83       	st	Z, r24
    1ebe:	e8 e3       	ldi	r30, 0x38	; 56
    1ec0:	f8 e2       	ldi	r31, 0x28	; 40
    1ec2:	02 e0       	ldi	r16, 0x02	; 2
    1ec4:	05 93       	las	Z, r16
    1ec6:	10 92 3a 28 	sts	0x283A, r1	; 0x80283a <udd_sram+0x26>
    1eca:	10 92 3b 28 	sts	0x283B, r1	; 0x80283b <udd_sram+0x27>
    1ece:	00 e2       	ldi	r16, 0x20	; 32
    1ed0:	06 93       	lac	Z, r16
    1ed2:	00 e4       	ldi	r16, 0x40	; 64
    1ed4:	06 93       	lac	Z, r16
    1ed6:	e0 e3       	ldi	r30, 0x30	; 48
    1ed8:	f8 e2       	ldi	r31, 0x28	; 40
    1eda:	00 e2       	ldi	r16, 0x20	; 32
    1edc:	06 93       	lac	Z, r16
    1ede:	00 e4       	ldi	r16, 0x40	; 64
    1ee0:	06 93       	lac	Z, r16
    1ee2:	e9 e3       	ldi	r30, 0x39	; 57
    1ee4:	fa e2       	ldi	r31, 0x2A	; 42
    1ee6:	14 86       	std	Z+12, r1	; 0x0c
    1ee8:	15 86       	std	Z+13, r1	; 0x0d
    1eea:	16 86       	std	Z+14, r1	; 0x0e
    1eec:	17 86       	std	Z+15, r1	; 0x0f
    1eee:	12 86       	std	Z+10, r1	; 0x0a
    1ef0:	13 86       	std	Z+11, r1	; 0x0b
    1ef2:	10 92 11 28 	sts	0x2811, r1	; 0x802811 <udd_ep_control_state>
    1ef6:	10 92 12 28 	sts	0x2812, r1	; 0x802812 <udd_ep_control_state+0x1>
    1efa:	0f 91       	pop	r16
    1efc:	08 95       	ret

00001efe <udd_ctrl_stall_data>:
    1efe:	0f 93       	push	r16
    1f00:	85 e0       	ldi	r24, 0x05	; 5
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <udd_ep_control_state>
    1f08:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <udd_ep_control_state+0x1>
    1f0c:	e9 e3       	ldi	r30, 0x39	; 57
    1f0e:	f8 e2       	ldi	r31, 0x28	; 40
    1f10:	04 e0       	ldi	r16, 0x04	; 4
    1f12:	05 93       	las	Z, r16
    1f14:	e1 e3       	ldi	r30, 0x31	; 49
    1f16:	f8 e2       	ldi	r31, 0x28	; 40
    1f18:	04 e0       	ldi	r16, 0x04	; 4
    1f1a:	05 93       	las	Z, r16
    1f1c:	0f 91       	pop	r16
    1f1e:	08 95       	ret

00001f20 <udd_ctrl_send_zlp_in>:
    1f20:	0f 93       	push	r16
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <udd_ep_control_state>
    1f2a:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <udd_ep_control_state+0x1>
    1f2e:	10 92 3a 28 	sts	0x283A, r1	; 0x80283a <udd_sram+0x26>
    1f32:	10 92 3b 28 	sts	0x283B, r1	; 0x80283b <udd_sram+0x27>
    1f36:	e8 e3       	ldi	r30, 0x38	; 56
    1f38:	f8 e2       	ldi	r31, 0x28	; 40
    1f3a:	02 e0       	ldi	r16, 0x02	; 2
    1f3c:	06 93       	lac	Z, r16
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <udd_ctrl_endofrequest>:
    1f42:	e0 91 45 2a 	lds	r30, 0x2A45	; 0x802a45 <udd_g_ctrlreq+0xc>
    1f46:	f0 91 46 2a 	lds	r31, 0x2A46	; 0x802a46 <udd_g_ctrlreq+0xd>
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <udd_ctrl_endofrequest+0xe>
    1f4e:	19 95       	eicall
    1f50:	08 95       	ret

00001f52 <udd_ctrl_in_sent>:
    1f52:	0f 93       	push	r16
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <udd_ep_control_state>
    1f5c:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <udd_ep_control_state+0x1>
    1f60:	03 97       	sbiw	r24, 0x03	; 3
    1f62:	19 f4       	brne	.+6      	; 0x1f6a <udd_ctrl_in_sent+0x18>
    1f64:	ee df       	rcall	.-36     	; 0x1f42 <udd_ctrl_endofrequest>
    1f66:	a2 df       	rcall	.-188    	; 0x1eac <udd_ctrl_init>
    1f68:	61 c0       	rjmp	.+194    	; 0x202c <udd_ctrl_in_sent+0xda>
    1f6a:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <udd_ctrl_payload_nb_trans>
    1f6e:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    1f72:	c0 91 43 2a 	lds	r28, 0x2A43	; 0x802a43 <udd_g_ctrlreq+0xa>
    1f76:	d0 91 44 2a 	lds	r29, 0x2A44	; 0x802a44 <udd_g_ctrlreq+0xb>
    1f7a:	c8 1b       	sub	r28, r24
    1f7c:	d9 0b       	sbc	r29, r25
    1f7e:	89 f5       	brne	.+98     	; 0x1fe2 <udd_ctrl_in_sent+0x90>
    1f80:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    1f84:	30 91 10 28 	lds	r19, 0x2810	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f88:	82 0f       	add	r24, r18
    1f8a:	93 1f       	adc	r25, r19
    1f8c:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    1f90:	90 93 10 28 	sts	0x2810, r25	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
    1f94:	20 91 3f 2a 	lds	r18, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    1f98:	30 91 40 2a 	lds	r19, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    1f9c:	82 17       	cp	r24, r18
    1f9e:	93 07       	cpc	r25, r19
    1fa0:	21 f0       	breq	.+8      	; 0x1faa <udd_ctrl_in_sent+0x58>
    1fa2:	80 91 18 26 	lds	r24, 0x2618	; 0x802618 <b_shortpacket.5533>
    1fa6:	88 23       	and	r24, r24
    1fa8:	59 f0       	breq	.+22     	; 0x1fc0 <udd_ctrl_in_sent+0x6e>
    1faa:	84 e0       	ldi	r24, 0x04	; 4
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <udd_ep_control_state>
    1fb2:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <udd_ep_control_state+0x1>
    1fb6:	e0 e3       	ldi	r30, 0x30	; 48
    1fb8:	f8 e2       	ldi	r31, 0x28	; 40
    1fba:	02 e0       	ldi	r16, 0x02	; 2
    1fbc:	06 93       	lac	Z, r16
    1fbe:	36 c0       	rjmp	.+108    	; 0x202c <udd_ctrl_in_sent+0xda>
    1fc0:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <udd_g_ctrlreq+0xe>
    1fc4:	f0 91 48 2a 	lds	r31, 0x2A48	; 0x802a48 <udd_g_ctrlreq+0xf>
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	99 f0       	breq	.+38     	; 0x1ff2 <udd_ctrl_in_sent+0xa0>
    1fcc:	19 95       	eicall
    1fce:	88 23       	and	r24, r24
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <udd_ctrl_in_sent+0xa0>
    1fd2:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <udd_ctrl_payload_nb_trans>
    1fd6:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    1fda:	c0 91 43 2a 	lds	r28, 0x2A43	; 0x802a43 <udd_g_ctrlreq+0xa>
    1fde:	d0 91 44 2a 	lds	r29, 0x2A44	; 0x802a44 <udd_g_ctrlreq+0xb>
    1fe2:	c8 30       	cpi	r28, 0x08	; 8
    1fe4:	d1 05       	cpc	r29, r1
    1fe6:	28 f0       	brcs	.+10     	; 0x1ff2 <udd_ctrl_in_sent+0xa0>
    1fe8:	10 92 18 26 	sts	0x2618, r1	; 0x802618 <b_shortpacket.5533>
    1fec:	c8 e0       	ldi	r28, 0x08	; 8
    1fee:	d0 e0       	ldi	r29, 0x00	; 0
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <udd_ctrl_in_sent+0xa6>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 18 26 	sts	0x2618, r24	; 0x802618 <b_shortpacket.5533>
    1ff8:	e4 e1       	ldi	r30, 0x14	; 20
    1ffa:	f8 e2       	ldi	r31, 0x28	; 40
    1ffc:	c6 a3       	std	Z+38, r28	; 0x26
    1ffe:	d7 a3       	std	Z+39, r29	; 0x27
    2000:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <udd_ctrl_payload_nb_trans>
    2004:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    2008:	20 91 41 2a 	lds	r18, 0x2A41	; 0x802a41 <udd_g_ctrlreq+0x8>
    200c:	30 91 42 2a 	lds	r19, 0x2A42	; 0x802a42 <udd_g_ctrlreq+0x9>
    2010:	28 0f       	add	r18, r24
    2012:	39 1f       	adc	r19, r25
    2014:	20 a7       	std	Z+40, r18	; 0x28
    2016:	31 a7       	std	Z+41, r19	; 0x29
    2018:	c8 0f       	add	r28, r24
    201a:	d9 1f       	adc	r29, r25
    201c:	c0 93 0d 28 	sts	0x280D, r28	; 0x80280d <udd_ctrl_payload_nb_trans>
    2020:	d0 93 0e 28 	sts	0x280E, r29	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    2024:	e8 e3       	ldi	r30, 0x38	; 56
    2026:	f8 e2       	ldi	r31, 0x28	; 40
    2028:	02 e0       	ldi	r16, 0x02	; 2
    202a:	06 93       	lac	Z, r16
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <udd_ep_get_size>:
    2034:	fc 01       	movw	r30, r24
    2036:	81 81       	ldd	r24, Z+1	; 0x01
    2038:	e8 2f       	mov	r30, r24
    203a:	e7 70       	andi	r30, 0x07	; 7
    203c:	8e 2f       	mov	r24, r30
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	fc 01       	movw	r30, r24
    2042:	31 97       	sbiw	r30, 0x01	; 1
    2044:	e7 30       	cpi	r30, 0x07	; 7
    2046:	f1 05       	cpc	r31, r1
    2048:	d8 f4       	brcc	.+54     	; 0x2080 <udd_ep_get_size+0x4c>
    204a:	88 27       	eor	r24, r24
    204c:	eb 5f       	subi	r30, 0xFB	; 251
    204e:	fe 4f       	sbci	r31, 0xFE	; 254
    2050:	8f 4f       	sbci	r24, 0xFF	; 255
    2052:	0c 94 91 43 	jmp	0x8722	; 0x8722 <__tablejump2__>
    2056:	80 e1       	ldi	r24, 0x10	; 16
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	08 95       	ret
    205c:	80 e2       	ldi	r24, 0x20	; 32
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	08 95       	ret
    2062:	80 e4       	ldi	r24, 0x40	; 64
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	08 95       	ret
    2068:	80 e8       	ldi	r24, 0x80	; 128
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	08 95       	ret
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	08 95       	ret
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	08 95       	ret
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	08 95       	ret
    2080:	88 e0       	ldi	r24, 0x08	; 8
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	08 95       	ret

00002086 <udd_ep_get_job>:
    2086:	28 2f       	mov	r18, r24
    2088:	2f 70       	andi	r18, 0x0F	; 15
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	22 0f       	add	r18, r18
    208e:	33 1f       	adc	r19, r19
    2090:	08 2e       	mov	r0, r24
    2092:	00 0c       	add	r0, r0
    2094:	99 0b       	sbc	r25, r25
    2096:	88 27       	eor	r24, r24
    2098:	99 0f       	add	r25, r25
    209a:	88 1f       	adc	r24, r24
    209c:	99 27       	eor	r25, r25
    209e:	82 0f       	add	r24, r18
    20a0:	93 1f       	adc	r25, r19
    20a2:	02 97       	sbiw	r24, 0x02	; 2
    20a4:	9c 01       	movw	r18, r24
    20a6:	22 0f       	add	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	82 0f       	add	r24, r18
    20b4:	93 1f       	adc	r25, r19
    20b6:	87 56       	subi	r24, 0x67	; 103
    20b8:	98 4d       	sbci	r25, 0xD8	; 216
    20ba:	08 95       	ret

000020bc <udd_ctrl_interrupt_tc_setup>:
    20bc:	0f 93       	push	r16
    20be:	cf 93       	push	r28
    20c0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20c4:	80 ff       	sbrs	r24, 0
    20c6:	6b c0       	rjmp	.+214    	; 0x219e <udd_ctrl_interrupt_tc_setup+0xe2>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20ce:	e0 e3       	ldi	r30, 0x30	; 48
    20d0:	f8 e2       	ldi	r31, 0x28	; 40
    20d2:	00 e8       	ldi	r16, 0x80	; 128
    20d4:	06 93       	lac	Z, r16
    20d6:	e8 e3       	ldi	r30, 0x38	; 56
    20d8:	f8 e2       	ldi	r31, 0x28	; 40
    20da:	00 e8       	ldi	r16, 0x80	; 128
    20dc:	06 93       	lac	Z, r16
    20de:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    20e2:	e0 e3       	ldi	r30, 0x30	; 48
    20e4:	f8 e2       	ldi	r31, 0x28	; 40
    20e6:	00 e1       	ldi	r16, 0x10	; 16
    20e8:	06 93       	lac	Z, r16
    20ea:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <udd_ep_control_state>
    20ee:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <udd_ep_control_state+0x1>
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	29 f0       	breq	.+10     	; 0x2100 <udd_ctrl_interrupt_tc_setup+0x44>
    20f6:	03 97       	sbiw	r24, 0x03	; 3
    20f8:	02 97       	sbiw	r24, 0x02	; 2
    20fa:	08 f4       	brcc	.+2      	; 0x20fe <udd_ctrl_interrupt_tc_setup+0x42>
    20fc:	22 df       	rcall	.-444    	; 0x1f42 <udd_ctrl_endofrequest>
    20fe:	d6 de       	rcall	.-596    	; 0x1eac <udd_ctrl_init>
    2100:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <udd_sram+0x1e>
    2104:	90 91 33 28 	lds	r25, 0x2833	; 0x802833 <udd_sram+0x1f>
    2108:	08 97       	sbiw	r24, 0x08	; 8
    210a:	09 f0       	breq	.+2      	; 0x210e <udd_ctrl_interrupt_tc_setup+0x52>
    210c:	4a c0       	rjmp	.+148    	; 0x21a2 <udd_ctrl_interrupt_tc_setup+0xe6>
    210e:	88 e0       	ldi	r24, 0x08	; 8
    2110:	e5 e0       	ldi	r30, 0x05	; 5
    2112:	f8 e2       	ldi	r31, 0x28	; 40
    2114:	a9 e3       	ldi	r26, 0x39	; 57
    2116:	ba e2       	ldi	r27, 0x2A	; 42
    2118:	01 90       	ld	r0, Z+
    211a:	0d 92       	st	X+, r0
    211c:	8a 95       	dec	r24
    211e:	e1 f7       	brne	.-8      	; 0x2118 <udd_ctrl_interrupt_tc_setup+0x5c>
    2120:	e8 ec       	ldi	r30, 0xC8	; 200
    2122:	f4 e0       	ldi	r31, 0x04	; 4
    2124:	80 81       	ld	r24, Z
    2126:	80 62       	ori	r24, 0x20	; 32
    2128:	80 83       	st	Z, r24
    212a:	80 81       	ld	r24, Z
    212c:	80 62       	ori	r24, 0x20	; 32
    212e:	80 83       	st	Z, r24
    2130:	0e 94 40 1c 	call	0x3880	; 0x3880 <udc_process_setup>
    2134:	c8 2f       	mov	r28, r24
    2136:	81 11       	cpse	r24, r1
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <udd_ctrl_interrupt_tc_setup+0x84>
    213a:	e1 de       	rcall	.-574    	; 0x1efe <udd_ctrl_stall_data>
    213c:	c1 e0       	ldi	r28, 0x01	; 1
    213e:	32 c0       	rjmp	.+100    	; 0x21a4 <udd_ctrl_interrupt_tc_setup+0xe8>
    2140:	80 91 39 2a 	lds	r24, 0x2A39	; 0x802a39 <udd_g_ctrlreq>
    2144:	88 23       	and	r24, r24
    2146:	84 f4       	brge	.+32     	; 0x2168 <udd_ctrl_interrupt_tc_setup+0xac>
    2148:	10 92 0f 28 	sts	0x280F, r1	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    214c:	10 92 10 28 	sts	0x2810, r1	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
    2150:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <udd_ctrl_payload_nb_trans>
    2154:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <udd_ep_control_state>
    2160:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <udd_ep_control_state+0x1>
    2164:	f6 de       	rcall	.-532    	; 0x1f52 <udd_ctrl_in_sent>
    2166:	1e c0       	rjmp	.+60     	; 0x21a4 <udd_ctrl_interrupt_tc_setup+0xe8>
    2168:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    216c:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    2170:	89 2b       	or	r24, r25
    2172:	11 f4       	brne	.+4      	; 0x2178 <udd_ctrl_interrupt_tc_setup+0xbc>
    2174:	d5 de       	rcall	.-598    	; 0x1f20 <udd_ctrl_send_zlp_in>
    2176:	16 c0       	rjmp	.+44     	; 0x21a4 <udd_ctrl_interrupt_tc_setup+0xe8>
    2178:	10 92 0f 28 	sts	0x280F, r1	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    217c:	10 92 10 28 	sts	0x2810, r1	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
    2180:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <udd_ctrl_payload_nb_trans>
    2184:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <udd_ep_control_state>
    2190:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <udd_ep_control_state+0x1>
    2194:	e0 e3       	ldi	r30, 0x30	; 48
    2196:	f8 e2       	ldi	r31, 0x28	; 40
    2198:	02 e0       	ldi	r16, 0x02	; 2
    219a:	06 93       	lac	Z, r16
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <udd_ctrl_interrupt_tc_setup+0xe8>
    219e:	c0 e0       	ldi	r28, 0x00	; 0
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <udd_ctrl_interrupt_tc_setup+0xe8>
    21a2:	c1 e0       	ldi	r28, 0x01	; 1
    21a4:	8c 2f       	mov	r24, r28
    21a6:	cf 91       	pop	r28
    21a8:	0f 91       	pop	r16
    21aa:	08 95       	ret

000021ac <udd_ep_trans_complet>:
    21ac:	8f 92       	push	r8
    21ae:	9f 92       	push	r9
    21b0:	af 92       	push	r10
    21b2:	bf 92       	push	r11
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	d8 2e       	mov	r13, r24
    21c4:	60 df       	rcall	.-320    	; 0x2086 <udd_ep_get_job>
    21c6:	8c 01       	movw	r16, r24
    21c8:	cd 2d       	mov	r28, r13
    21ca:	cf 70       	andi	r28, 0x0F	; 15
    21cc:	d0 e0       	ldi	r29, 0x00	; 0
    21ce:	ce 01       	movw	r24, r28
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	cd 2d       	mov	r28, r13
    21d6:	0d 2c       	mov	r0, r13
    21d8:	00 0c       	add	r0, r0
    21da:	dd 0b       	sbc	r29, r29
    21dc:	cc 27       	eor	r28, r28
    21de:	dd 0f       	add	r29, r29
    21e0:	cc 1f       	adc	r28, r28
    21e2:	dd 27       	eor	r29, r29
    21e4:	c8 0f       	add	r28, r24
    21e6:	d9 1f       	adc	r29, r25
    21e8:	ce 01       	movw	r24, r28
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	9c 01       	movw	r18, r24
    21f8:	20 5d       	subi	r18, 0xD0	; 208
    21fa:	37 4d       	sbci	r19, 0xD7	; 215
    21fc:	79 01       	movw	r14, r18
    21fe:	c9 01       	movw	r24, r18
    2200:	19 df       	rcall	.-462    	; 0x2034 <udd_ep_get_size>
    2202:	4c 01       	movw	r8, r24
    2204:	dd 20       	and	r13, r13
    2206:	0c f0       	brlt	.+2      	; 0x220a <udd_ep_trans_complet+0x5e>
    2208:	7b c0       	rjmp	.+246    	; 0x2300 <udd_ep_trans_complet+0x154>
    220a:	fe 01       	movw	r30, r28
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ec 5e       	subi	r30, 0xEC	; 236
    221a:	f7 4d       	sbci	r31, 0xD7	; 215
    221c:	22 a1       	ldd	r18, Z+34	; 0x22
    221e:	33 a1       	ldd	r19, Z+35	; 0x23
    2220:	d8 01       	movw	r26, r16
    2222:	15 96       	adiw	r26, 0x05	; 5
    2224:	8d 91       	ld	r24, X+
    2226:	9c 91       	ld	r25, X
    2228:	16 97       	sbiw	r26, 0x06	; 6
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	15 96       	adiw	r26, 0x05	; 5
    2230:	8d 93       	st	X+, r24
    2232:	9c 93       	st	X, r25
    2234:	16 97       	sbiw	r26, 0x06	; 6
    2236:	13 96       	adiw	r26, 0x03	; 3
    2238:	2d 91       	ld	r18, X+
    223a:	3c 91       	ld	r19, X
    223c:	14 97       	sbiw	r26, 0x04	; 4
    223e:	82 17       	cp	r24, r18
    2240:	93 07       	cpc	r25, r19
    2242:	09 f4       	brne	.+2      	; 0x2246 <udd_ep_trans_complet+0x9a>
    2244:	47 c0       	rjmp	.+142    	; 0x22d4 <udd_ep_trans_complet+0x128>
    2246:	28 1b       	sub	r18, r24
    2248:	39 0b       	sbc	r19, r25
    224a:	21 15       	cp	r18, r1
    224c:	b4 e0       	ldi	r27, 0x04	; 4
    224e:	3b 07       	cpc	r19, r27
    2250:	40 f0       	brcs	.+16     	; 0x2262 <udd_ep_trans_complet+0xb6>
    2252:	2f ef       	ldi	r18, 0xFF	; 255
    2254:	33 e0       	ldi	r19, 0x03	; 3
    2256:	c9 01       	movw	r24, r18
    2258:	b4 01       	movw	r22, r8
    225a:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__udivmodhi4>
    225e:	28 1b       	sub	r18, r24
    2260:	39 0b       	sbc	r19, r25
    2262:	f8 01       	movw	r30, r16
    2264:	80 81       	ld	r24, Z
    2266:	81 ff       	sbrs	r24, 1
    2268:	0a c0       	rjmp	.+20     	; 0x227e <udd_ep_trans_complet+0xd2>
    226a:	c9 01       	movw	r24, r18
    226c:	b4 01       	movw	r22, r8
    226e:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__udivmodhi4>
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	89 2b       	or	r24, r25
    2276:	09 f0       	breq	.+2      	; 0x227a <udd_ep_trans_complet+0xce>
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	84 2f       	mov	r24, r20
    227c:	01 c0       	rjmp	.+2      	; 0x2280 <udd_ep_trans_complet+0xd4>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	d8 01       	movw	r26, r16
    2282:	9c 91       	ld	r25, X
    2284:	80 fb       	bst	r24, 0
    2286:	91 f9       	bld	r25, 1
    2288:	9c 93       	st	X, r25
    228a:	fe 01       	movw	r30, r28
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	ec 5e       	subi	r30, 0xEC	; 236
    229a:	f7 4d       	sbci	r31, 0xD7	; 215
    229c:	12 a2       	std	Z+34, r1	; 0x22
    229e:	13 a2       	std	Z+35, r1	; 0x23
    22a0:	26 8f       	std	Z+30, r18	; 0x1e
    22a2:	37 8f       	std	Z+31, r19	; 0x1f
    22a4:	11 96       	adiw	r26, 0x01	; 1
    22a6:	2d 91       	ld	r18, X+
    22a8:	3c 91       	ld	r19, X
    22aa:	12 97       	sbiw	r26, 0x02	; 2
    22ac:	15 96       	adiw	r26, 0x05	; 5
    22ae:	8d 91       	ld	r24, X+
    22b0:	9c 91       	ld	r25, X
    22b2:	16 97       	sbiw	r26, 0x06	; 6
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	cc 0f       	add	r28, r28
    22ba:	dd 1f       	adc	r29, r29
    22bc:	cc 0f       	add	r28, r28
    22be:	dd 1f       	adc	r29, r29
    22c0:	cc 0f       	add	r28, r28
    22c2:	dd 1f       	adc	r29, r29
    22c4:	cc 5c       	subi	r28, 0xCC	; 204
    22c6:	d7 4d       	sbci	r29, 0xD7	; 215
    22c8:	88 83       	st	Y, r24
    22ca:	99 83       	std	Y+1, r25	; 0x01
    22cc:	f7 01       	movw	r30, r14
    22ce:	02 e0       	ldi	r16, 0x02	; 2
    22d0:	06 93       	lac	Z, r16
    22d2:	e5 c0       	rjmp	.+458    	; 0x249e <udd_ep_trans_complet+0x2f2>
    22d4:	d8 01       	movw	r26, r16
    22d6:	8c 91       	ld	r24, X
    22d8:	81 ff       	sbrs	r24, 1
    22da:	cd c0       	rjmp	.+410    	; 0x2476 <udd_ep_trans_complet+0x2ca>
    22dc:	8d 7f       	andi	r24, 0xFD	; 253
    22de:	8c 93       	st	X, r24
    22e0:	cc 0f       	add	r28, r28
    22e2:	dd 1f       	adc	r29, r29
    22e4:	cc 0f       	add	r28, r28
    22e6:	dd 1f       	adc	r29, r29
    22e8:	cc 0f       	add	r28, r28
    22ea:	dd 1f       	adc	r29, r29
    22ec:	cc 5e       	subi	r28, 0xEC	; 236
    22ee:	d7 4d       	sbci	r29, 0xD7	; 215
    22f0:	1a a2       	std	Y+34, r1	; 0x22
    22f2:	1b a2       	std	Y+35, r1	; 0x23
    22f4:	1e 8e       	std	Y+30, r1	; 0x1e
    22f6:	1f 8e       	std	Y+31, r1	; 0x1f
    22f8:	f7 01       	movw	r30, r14
    22fa:	02 e0       	ldi	r16, 0x02	; 2
    22fc:	06 93       	lac	Z, r16
    22fe:	cf c0       	rjmp	.+414    	; 0x249e <udd_ep_trans_complet+0x2f2>
    2300:	fe 01       	movw	r30, r28
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ec 5e       	subi	r30, 0xEC	; 236
    2310:	f7 4d       	sbci	r31, 0xD7	; 215
    2312:	a6 8c       	ldd	r10, Z+30	; 0x1e
    2314:	b7 8c       	ldd	r11, Z+31	; 0x1f
    2316:	d8 01       	movw	r26, r16
    2318:	8c 91       	ld	r24, X
    231a:	82 ff       	sbrs	r24, 2
    231c:	1b c0       	rjmp	.+54     	; 0x2354 <udd_ep_trans_complet+0x1a8>
    231e:	11 96       	adiw	r26, 0x01	; 1
    2320:	ed 91       	ld	r30, X+
    2322:	fc 91       	ld	r31, X
    2324:	12 97       	sbiw	r26, 0x02	; 2
    2326:	15 96       	adiw	r26, 0x05	; 5
    2328:	2d 91       	ld	r18, X+
    232a:	3c 91       	ld	r19, X
    232c:	16 97       	sbiw	r26, 0x06	; 6
    232e:	13 96       	adiw	r26, 0x03	; 3
    2330:	8d 91       	ld	r24, X+
    2332:	9c 91       	ld	r25, X
    2334:	14 97       	sbiw	r26, 0x04	; 4
    2336:	b4 01       	movw	r22, r8
    2338:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__udivmodhi4>
    233c:	b0 e4       	ldi	r27, 0x40	; 64
    233e:	db 9e       	mul	r13, r27
    2340:	b0 01       	movw	r22, r0
    2342:	11 24       	eor	r1, r1
    2344:	67 52       	subi	r22, 0x27	; 39
    2346:	7a 4d       	sbci	r23, 0xDA	; 218
    2348:	ac 01       	movw	r20, r24
    234a:	cf 01       	movw	r24, r30
    234c:	82 0f       	add	r24, r18
    234e:	93 1f       	adc	r25, r19
    2350:	0e 94 3a 44 	call	0x8874	; 0x8874 <memcpy>
    2354:	f8 01       	movw	r30, r16
    2356:	25 81       	ldd	r18, Z+5	; 0x05
    2358:	36 81       	ldd	r19, Z+6	; 0x06
    235a:	2a 0d       	add	r18, r10
    235c:	3b 1d       	adc	r19, r11
    235e:	25 83       	std	Z+5, r18	; 0x05
    2360:	36 83       	std	Z+6, r19	; 0x06
    2362:	83 81       	ldd	r24, Z+3	; 0x03
    2364:	94 81       	ldd	r25, Z+4	; 0x04
    2366:	82 17       	cp	r24, r18
    2368:	93 07       	cpc	r25, r19
    236a:	68 f4       	brcc	.+26     	; 0x2386 <udd_ep_trans_complet+0x1da>
    236c:	85 83       	std	Z+5, r24	; 0x05
    236e:	96 83       	std	Z+6, r25	; 0x06
    2370:	cc 0f       	add	r28, r28
    2372:	dd 1f       	adc	r29, r29
    2374:	cc 0f       	add	r28, r28
    2376:	dd 1f       	adc	r29, r29
    2378:	cc 0f       	add	r28, r28
    237a:	dd 1f       	adc	r29, r29
    237c:	cc 5e       	subi	r28, 0xEC	; 236
    237e:	d7 4d       	sbci	r29, 0xD7	; 215
    2380:	8a a1       	ldd	r24, Y+34	; 0x22
    2382:	9b a1       	ldd	r25, Y+35	; 0x23
    2384:	78 c0       	rjmp	.+240    	; 0x2476 <udd_ep_trans_complet+0x2ca>
    2386:	fe 01       	movw	r30, r28
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ec 5e       	subi	r30, 0xEC	; 236
    2396:	f7 4d       	sbci	r31, 0xD7	; 215
    2398:	42 a1       	ldd	r20, Z+34	; 0x22
    239a:	53 a1       	ldd	r21, Z+35	; 0x23
    239c:	a4 16       	cp	r10, r20
    239e:	b5 06       	cpc	r11, r21
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <udd_ep_trans_complet+0x1f8>
    23a2:	69 c0       	rjmp	.+210    	; 0x2476 <udd_ep_trans_complet+0x2ca>
    23a4:	28 17       	cp	r18, r24
    23a6:	39 07       	cpc	r19, r25
    23a8:	09 f4       	brne	.+2      	; 0x23ac <udd_ep_trans_complet+0x200>
    23aa:	65 c0       	rjmp	.+202    	; 0x2476 <udd_ep_trans_complet+0x2ca>
    23ac:	ac 01       	movw	r20, r24
    23ae:	42 1b       	sub	r20, r18
    23b0:	53 0b       	sbc	r21, r19
    23b2:	9a 01       	movw	r18, r20
    23b4:	21 15       	cp	r18, r1
    23b6:	54 e0       	ldi	r21, 0x04	; 4
    23b8:	35 07       	cpc	r19, r21
    23ba:	48 f0       	brcs	.+18     	; 0x23ce <udd_ep_trans_complet+0x222>
    23bc:	2f ef       	ldi	r18, 0xFF	; 255
    23be:	33 e0       	ldi	r19, 0x03	; 3
    23c0:	c9 01       	movw	r24, r18
    23c2:	b4 01       	movw	r22, r8
    23c4:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__udivmodhi4>
    23c8:	28 1b       	sub	r18, r24
    23ca:	39 0b       	sbc	r19, r25
    23cc:	06 c0       	rjmp	.+12     	; 0x23da <udd_ep_trans_complet+0x22e>
    23ce:	c9 01       	movw	r24, r18
    23d0:	b4 01       	movw	r22, r8
    23d2:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__udivmodhi4>
    23d6:	28 1b       	sub	r18, r24
    23d8:	39 0b       	sbc	r19, r25
    23da:	fe 01       	movw	r30, r28
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	ec 5e       	subi	r30, 0xEC	; 236
    23ea:	f7 4d       	sbci	r31, 0xD7	; 215
    23ec:	16 8e       	std	Z+30, r1	; 0x1e
    23ee:	17 8e       	std	Z+31, r1	; 0x1f
    23f0:	28 15       	cp	r18, r8
    23f2:	39 05       	cpc	r19, r9
    23f4:	00 f5       	brcc	.+64     	; 0x2436 <udd_ep_trans_complet+0x28a>
    23f6:	d8 01       	movw	r26, r16
    23f8:	8c 91       	ld	r24, X
    23fa:	84 60       	ori	r24, 0x04	; 4
    23fc:	8c 93       	st	X, r24
    23fe:	b0 e4       	ldi	r27, 0x40	; 64
    2400:	db 9e       	mul	r13, r27
    2402:	c0 01       	movw	r24, r0
    2404:	11 24       	eor	r1, r1
    2406:	87 52       	subi	r24, 0x27	; 39
    2408:	9a 4d       	sbci	r25, 0xDA	; 218
    240a:	fe 01       	movw	r30, r28
    240c:	ee 0f       	add	r30, r30
    240e:	ff 1f       	adc	r31, r31
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	ec 5c       	subi	r30, 0xCC	; 204
    241a:	f7 4d       	sbci	r31, 0xD7	; 215
    241c:	80 83       	st	Z, r24
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	cc 0f       	add	r28, r28
    2422:	dd 1f       	adc	r29, r29
    2424:	cc 0f       	add	r28, r28
    2426:	dd 1f       	adc	r29, r29
    2428:	cc 0f       	add	r28, r28
    242a:	dd 1f       	adc	r29, r29
    242c:	cc 5e       	subi	r28, 0xEC	; 236
    242e:	d7 4d       	sbci	r29, 0xD7	; 215
    2430:	8a a2       	std	Y+34, r8	; 0x22
    2432:	9b a2       	std	Y+35, r9	; 0x23
    2434:	1c c0       	rjmp	.+56     	; 0x246e <udd_ep_trans_complet+0x2c2>
    2436:	f8 01       	movw	r30, r16
    2438:	41 81       	ldd	r20, Z+1	; 0x01
    243a:	52 81       	ldd	r21, Z+2	; 0x02
    243c:	85 81       	ldd	r24, Z+5	; 0x05
    243e:	96 81       	ldd	r25, Z+6	; 0x06
    2440:	84 0f       	add	r24, r20
    2442:	95 1f       	adc	r25, r21
    2444:	fe 01       	movw	r30, r28
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ec 5c       	subi	r30, 0xCC	; 204
    2454:	f7 4d       	sbci	r31, 0xD7	; 215
    2456:	80 83       	st	Z, r24
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	cc 0f       	add	r28, r28
    245c:	dd 1f       	adc	r29, r29
    245e:	cc 0f       	add	r28, r28
    2460:	dd 1f       	adc	r29, r29
    2462:	cc 0f       	add	r28, r28
    2464:	dd 1f       	adc	r29, r29
    2466:	cc 5e       	subi	r28, 0xEC	; 236
    2468:	d7 4d       	sbci	r29, 0xD7	; 215
    246a:	2a a3       	std	Y+34, r18	; 0x22
    246c:	3b a3       	std	Y+35, r19	; 0x23
    246e:	f7 01       	movw	r30, r14
    2470:	02 e0       	ldi	r16, 0x02	; 2
    2472:	06 93       	lac	Z, r16
    2474:	14 c0       	rjmp	.+40     	; 0x249e <udd_ep_trans_complet+0x2f2>
    2476:	d8 01       	movw	r26, r16
    2478:	8c 91       	ld	r24, X
    247a:	80 ff       	sbrs	r24, 0
    247c:	10 c0       	rjmp	.+32     	; 0x249e <udd_ep_trans_complet+0x2f2>
    247e:	8e 7f       	andi	r24, 0xFE	; 254
    2480:	8c 93       	st	X, r24
    2482:	17 96       	adiw	r26, 0x07	; 7
    2484:	ed 91       	ld	r30, X+
    2486:	fc 91       	ld	r31, X
    2488:	18 97       	sbiw	r26, 0x08	; 8
    248a:	30 97       	sbiw	r30, 0x00	; 0
    248c:	41 f0       	breq	.+16     	; 0x249e <udd_ep_trans_complet+0x2f2>
    248e:	15 96       	adiw	r26, 0x05	; 5
    2490:	6d 91       	ld	r22, X+
    2492:	7c 91       	ld	r23, X
    2494:	16 97       	sbiw	r26, 0x06	; 6
    2496:	4d 2d       	mov	r20, r13
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	19 95       	eicall
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	bf 90       	pop	r11
    24ae:	af 90       	pop	r10
    24b0:	9f 90       	pop	r9
    24b2:	8f 90       	pop	r8
    24b4:	08 95       	ret

000024b6 <udd_enable>:
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	c0 e6       	ldi	r28, 0x60	; 96
    24bc:	d0 e0       	ldi	r29, 0x00	; 0
    24be:	18 82       	st	Y, r1
    24c0:	80 e3       	ldi	r24, 0x30	; 48
    24c2:	1d d5       	rcall	.+2618   	; 0x2efe <sysclk_enable_usb>
    24c4:	e0 ec       	ldi	r30, 0xC0	; 192
    24c6:	f4 e0       	ldi	r31, 0x04	; 4
    24c8:	80 81       	ld	r24, Z
    24ca:	80 64       	ori	r24, 0x40	; 64
    24cc:	80 83       	st	Z, r24
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	88 83       	st	Y, r24
    24d2:	cf b7       	in	r28, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	fc 01       	movw	r30, r24
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	ec 5e       	subi	r30, 0xEC	; 236
    24ea:	f7 4d       	sbci	r31, 0xD7	; 215
    24ec:	15 8e       	std	Z+29, r1	; 0x1d
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	8e 30       	cpi	r24, 0x0E	; 14
    24f2:	91 05       	cpc	r25, r1
    24f4:	91 f7       	brne	.-28     	; 0x24da <udd_enable+0x24>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	fc 01       	movw	r30, r24
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	e8 0f       	add	r30, r24
    250a:	f9 1f       	adc	r31, r25
    250c:	e7 56       	subi	r30, 0x67	; 103
    250e:	f8 4d       	sbci	r31, 0xD8	; 216
    2510:	20 81       	ld	r18, Z
    2512:	2e 7f       	andi	r18, 0xFE	; 254
    2514:	20 83       	st	Z, r18
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	8c 30       	cpi	r24, 0x0C	; 12
    251a:	91 05       	cpc	r25, r1
    251c:	71 f7       	brne	.-36     	; 0x24fa <udd_enable+0x44>
    251e:	6a e1       	ldi	r22, 0x1A	; 26
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	0e 94 3a 04 	call	0x874	; 0x874 <nvm_read_byte>
    2528:	8f 3f       	cpi	r24, 0xFF	; 255
    252a:	19 f0       	breq	.+6      	; 0x2532 <udd_enable+0x7c>
    252c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <udd_enable+0x82>
    2532:	8f e1       	ldi	r24, 0x1F	; 31
    2534:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2538:	6b e1       	ldi	r22, 0x1B	; 27
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	0e 94 3a 04 	call	0x874	; 0x874 <nvm_read_byte>
    2542:	8f 3f       	cpi	r24, 0xFF	; 255
    2544:	19 f0       	breq	.+6      	; 0x254c <udd_enable+0x96>
    2546:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <udd_enable+0x9c>
    254c:	8f e1       	ldi	r24, 0x1F	; 31
    254e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2552:	e0 ec       	ldi	r30, 0xC0	; 192
    2554:	f4 e0       	ldi	r31, 0x04	; 4
    2556:	80 81       	ld	r24, Z
    2558:	86 60       	ori	r24, 0x06	; 6
    255a:	80 83       	st	Z, r24
    255c:	80 81       	ld	r24, Z
    255e:	80 68       	ori	r24, 0x80	; 128
    2560:	80 83       	st	Z, r24
    2562:	80 81       	ld	r24, Z
    2564:	80 61       	ori	r24, 0x10	; 16
    2566:	80 83       	st	Z, r24
    2568:	80 e3       	ldi	r24, 0x30	; 48
    256a:	98 e2       	ldi	r25, 0x28	; 40
    256c:	86 83       	std	Z+6, r24	; 0x06
    256e:	97 83       	std	Z+7, r25	; 0x07
    2570:	80 81       	ld	r24, Z
    2572:	80 62       	ori	r24, 0x20	; 32
    2574:	80 83       	st	Z, r24
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    257c:	e8 ec       	ldi	r30, 0xC8	; 200
    257e:	f4 e0       	ldi	r31, 0x04	; 4
    2580:	80 81       	ld	r24, Z
    2582:	81 60       	ori	r24, 0x01	; 1
    2584:	80 83       	st	Z, r24
    2586:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <udd_b_idle>
    258a:	9f b7       	in	r25, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	e9 e4       	ldi	r30, 0x49	; 73
    2590:	fa e2       	ldi	r31, 0x2A	; 42
    2592:	85 81       	ldd	r24, Z+5	; 0x05
    2594:	8f 5f       	subi	r24, 0xFF	; 255
    2596:	85 83       	std	Z+5, r24	; 0x05
    2598:	9f bf       	out	0x3f, r25	; 63
    259a:	cf bf       	out	0x3f, r28	; 63
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	08 95       	ret

000025a2 <udd_disable>:
    25a2:	cf 93       	push	r28
    25a4:	cf b7       	in	r28, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	e1 ec       	ldi	r30, 0xC1	; 193
    25aa:	f4 e0       	ldi	r31, 0x04	; 4
    25ac:	80 81       	ld	r24, Z
    25ae:	8e 7f       	andi	r24, 0xFE	; 254
    25b0:	80 83       	st	Z, r24
    25b2:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    25b6:	10 82       	st	Z, r1
    25b8:	db d4       	rcall	.+2486   	; 0x2f70 <sysclk_disable_usb>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	58 dc       	rcall	.-1872   	; 0x1e6e <udd_sleep_mode>
    25be:	9f b7       	in	r25, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	e9 e4       	ldi	r30, 0x49	; 73
    25c4:	fa e2       	ldi	r31, 0x2A	; 42
    25c6:	85 81       	ldd	r24, Z+5	; 0x05
    25c8:	81 50       	subi	r24, 0x01	; 1
    25ca:	85 83       	std	Z+5, r24	; 0x05
    25cc:	9f bf       	out	0x3f, r25	; 63
    25ce:	cf bf       	out	0x3f, r28	; 63
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <udd_attach>:
    25d4:	cf 93       	push	r28
    25d6:	cf b7       	in	r28, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	48 dc       	rcall	.-1904   	; 0x1e6e <udd_sleep_mode>
    25de:	ea ec       	ldi	r30, 0xCA	; 202
    25e0:	f4 e0       	ldi	r31, 0x04	; 4
    25e2:	80 e4       	ldi	r24, 0x40	; 64
    25e4:	80 83       	st	Z, r24
    25e6:	80 e2       	ldi	r24, 0x20	; 32
    25e8:	80 83       	st	Z, r24
    25ea:	e1 ec       	ldi	r30, 0xC1	; 193
    25ec:	f4 e0       	ldi	r31, 0x04	; 4
    25ee:	80 81       	ld	r24, Z
    25f0:	81 60       	ori	r24, 0x01	; 1
    25f2:	80 83       	st	Z, r24
    25f4:	a9 ec       	ldi	r26, 0xC9	; 201
    25f6:	b4 e0       	ldi	r27, 0x04	; 4
    25f8:	8c 91       	ld	r24, X
    25fa:	82 60       	ori	r24, 0x02	; 2
    25fc:	8c 93       	st	X, r24
    25fe:	e8 ec       	ldi	r30, 0xC8	; 200
    2600:	f4 e0       	ldi	r31, 0x04	; 4
    2602:	80 81       	ld	r24, Z
    2604:	80 64       	ori	r24, 0x40	; 64
    2606:	80 83       	st	Z, r24
    2608:	8c 91       	ld	r24, X
    260a:	81 60       	ori	r24, 0x01	; 1
    260c:	8c 93       	st	X, r24
    260e:	80 81       	ld	r24, Z
    2610:	80 68       	ori	r24, 0x80	; 128
    2612:	80 83       	st	Z, r24
    2614:	cf bf       	out	0x3f, r28	; 63
    2616:	cf 91       	pop	r28
    2618:	08 95       	ret

0000261a <udd_set_address>:
    261a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    261e:	08 95       	ret

00002620 <udd_getaddress>:
    2620:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2624:	08 95       	ret

00002626 <udd_set_setup_payload>:
    2626:	e9 e3       	ldi	r30, 0x39	; 57
    2628:	fa e2       	ldi	r31, 0x2A	; 42
    262a:	80 87       	std	Z+8, r24	; 0x08
    262c:	91 87       	std	Z+9, r25	; 0x09
    262e:	62 87       	std	Z+10, r22	; 0x0a
    2630:	73 87       	std	Z+11, r23	; 0x0b
    2632:	08 95       	ret

00002634 <udd_ep_alloc>:
    2634:	28 2f       	mov	r18, r24
    2636:	2f 70       	andi	r18, 0x0F	; 15
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	22 0f       	add	r18, r18
    263c:	33 1f       	adc	r19, r19
    263e:	08 2e       	mov	r0, r24
    2640:	00 0c       	add	r0, r0
    2642:	99 0b       	sbc	r25, r25
    2644:	88 27       	eor	r24, r24
    2646:	99 0f       	add	r25, r25
    2648:	88 1f       	adc	r24, r24
    264a:	99 27       	eor	r25, r25
    264c:	82 0f       	add	r24, r18
    264e:	93 1f       	adc	r25, r19
    2650:	fc 01       	movw	r30, r24
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	ec 5e       	subi	r30, 0xEC	; 236
    2660:	f7 4d       	sbci	r31, 0xD7	; 215
    2662:	25 8d       	ldd	r18, Z+29	; 0x1d
    2664:	20 7c       	andi	r18, 0xC0	; 192
    2666:	09 f0       	breq	.+2      	; 0x266a <udd_ep_alloc+0x36>
    2668:	5f c0       	rjmp	.+190    	; 0x2728 <udd_ep_alloc+0xf4>
    266a:	63 70       	andi	r22, 0x03	; 3
    266c:	61 30       	cpi	r22, 0x01	; 1
    266e:	19 f0       	breq	.+6      	; 0x2676 <udd_ep_alloc+0x42>
    2670:	20 f4       	brcc	.+8      	; 0x267a <udd_ep_alloc+0x46>
    2672:	60 e4       	ldi	r22, 0x40	; 64
    2674:	03 c0       	rjmp	.+6      	; 0x267c <udd_ep_alloc+0x48>
    2676:	60 ec       	ldi	r22, 0xC0	; 192
    2678:	01 c0       	rjmp	.+2      	; 0x267c <udd_ep_alloc+0x48>
    267a:	60 e8       	ldi	r22, 0x80	; 128
    267c:	40 38       	cpi	r20, 0x80	; 128
    267e:	51 05       	cpc	r21, r1
    2680:	e9 f0       	breq	.+58     	; 0x26bc <udd_ep_alloc+0x88>
    2682:	50 f4       	brcc	.+20     	; 0x2698 <udd_ep_alloc+0x64>
    2684:	40 32       	cpi	r20, 0x20	; 32
    2686:	51 05       	cpc	r21, r1
    2688:	a9 f0       	breq	.+42     	; 0x26b4 <udd_ep_alloc+0x80>
    268a:	40 34       	cpi	r20, 0x40	; 64
    268c:	51 05       	cpc	r21, r1
    268e:	a1 f0       	breq	.+40     	; 0x26b8 <udd_ep_alloc+0x84>
    2690:	40 31       	cpi	r20, 0x10	; 16
    2692:	51 05       	cpc	r21, r1
    2694:	d9 f4       	brne	.+54     	; 0x26cc <udd_ep_alloc+0x98>
    2696:	0c c0       	rjmp	.+24     	; 0x26b0 <udd_ep_alloc+0x7c>
    2698:	41 15       	cp	r20, r1
    269a:	22 e0       	ldi	r18, 0x02	; 2
    269c:	52 07       	cpc	r21, r18
    269e:	91 f0       	breq	.+36     	; 0x26c4 <udd_ep_alloc+0x90>
    26a0:	4f 3f       	cpi	r20, 0xFF	; 255
    26a2:	23 e0       	ldi	r18, 0x03	; 3
    26a4:	52 07       	cpc	r21, r18
    26a6:	81 f0       	breq	.+32     	; 0x26c8 <udd_ep_alloc+0x94>
    26a8:	41 15       	cp	r20, r1
    26aa:	51 40       	sbci	r21, 0x01	; 1
    26ac:	79 f4       	brne	.+30     	; 0x26cc <udd_ep_alloc+0x98>
    26ae:	08 c0       	rjmp	.+16     	; 0x26c0 <udd_ep_alloc+0x8c>
    26b0:	21 e0       	ldi	r18, 0x01	; 1
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <udd_ep_alloc+0x9a>
    26b4:	22 e0       	ldi	r18, 0x02	; 2
    26b6:	0b c0       	rjmp	.+22     	; 0x26ce <udd_ep_alloc+0x9a>
    26b8:	23 e0       	ldi	r18, 0x03	; 3
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <udd_ep_alloc+0x9a>
    26bc:	24 e0       	ldi	r18, 0x04	; 4
    26be:	07 c0       	rjmp	.+14     	; 0x26ce <udd_ep_alloc+0x9a>
    26c0:	25 e0       	ldi	r18, 0x05	; 5
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <udd_ep_alloc+0x9a>
    26c4:	26 e0       	ldi	r18, 0x06	; 6
    26c6:	03 c0       	rjmp	.+6      	; 0x26ce <udd_ep_alloc+0x9a>
    26c8:	27 e0       	ldi	r18, 0x07	; 7
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <udd_ep_alloc+0x9a>
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	fc 01       	movw	r30, r24
    26d0:	ee 0f       	add	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	ec 5e       	subi	r30, 0xEC	; 236
    26de:	f7 4d       	sbci	r31, 0xD7	; 215
    26e0:	15 8e       	std	Z+29, r1	; 0x1d
    26e2:	36 e0       	ldi	r19, 0x06	; 6
    26e4:	34 8f       	std	Z+28, r19	; 0x1c
    26e6:	26 2b       	or	r18, r22
    26e8:	25 8f       	std	Z+29, r18	; 0x1d
    26ea:	25 8d       	ldd	r18, Z+29	; 0x1d
    26ec:	20 7c       	andi	r18, 0xC0	; 192
    26ee:	20 3c       	cpi	r18, 0xC0	; 192
    26f0:	69 f4       	brne	.+26     	; 0x270c <udd_ep_alloc+0xd8>
    26f2:	fc 01       	movw	r30, r24
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	ec 5e       	subi	r30, 0xEC	; 236
    2702:	f7 4d       	sbci	r31, 0xD7	; 215
    2704:	25 8d       	ldd	r18, Z+29	; 0x1d
    2706:	27 70       	andi	r18, 0x07	; 7
    2708:	27 30       	cpi	r18, 0x07	; 7
    270a:	81 f0       	breq	.+32     	; 0x272c <udd_ep_alloc+0xf8>
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	fc 01       	movw	r30, r24
    271a:	ec 5e       	subi	r30, 0xEC	; 236
    271c:	f7 4d       	sbci	r31, 0xD7	; 215
    271e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2720:	80 62       	ori	r24, 0x20	; 32
    2722:	85 8f       	std	Z+29, r24	; 0x1d
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	08 95       	ret
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	08 95       	ret
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	08 95       	ret

00002730 <udd_ep_is_halted>:
    2730:	e8 2f       	mov	r30, r24
    2732:	ef 70       	andi	r30, 0x0F	; 15
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	08 2e       	mov	r0, r24
    273c:	00 0c       	add	r0, r0
    273e:	99 0b       	sbc	r25, r25
    2740:	88 27       	eor	r24, r24
    2742:	99 0f       	add	r25, r25
    2744:	88 1f       	adc	r24, r24
    2746:	99 27       	eor	r25, r25
    2748:	e8 0f       	add	r30, r24
    274a:	f9 1f       	adc	r31, r25
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	ec 5e       	subi	r30, 0xEC	; 236
    275a:	f7 4d       	sbci	r31, 0xD7	; 215
    275c:	85 8d       	ldd	r24, Z+29	; 0x1d
    275e:	82 fb       	bst	r24, 2
    2760:	88 27       	eor	r24, r24
    2762:	80 f9       	bld	r24, 0
    2764:	08 95       	ret

00002766 <udd_ep_clear_halt>:
    2766:	28 2f       	mov	r18, r24
    2768:	2f 70       	andi	r18, 0x0F	; 15
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	a9 01       	movw	r20, r18
    276e:	44 0f       	add	r20, r20
    2770:	55 1f       	adc	r21, r21
    2772:	28 2f       	mov	r18, r24
    2774:	08 2e       	mov	r0, r24
    2776:	00 0c       	add	r0, r0
    2778:	33 0b       	sbc	r19, r19
    277a:	22 27       	eor	r18, r18
    277c:	33 0f       	add	r19, r19
    277e:	22 1f       	adc	r18, r18
    2780:	33 27       	eor	r19, r19
    2782:	24 0f       	add	r18, r20
    2784:	35 1f       	adc	r19, r21
    2786:	f9 01       	movw	r30, r18
    2788:	ee 0f       	add	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ec 5e       	subi	r30, 0xEC	; 236
    2796:	f7 4d       	sbci	r31, 0xD7	; 215
    2798:	95 8d       	ldd	r25, Z+29	; 0x1d
    279a:	92 ff       	sbrs	r25, 2
    279c:	17 c0       	rjmp	.+46     	; 0x27cc <udd_ep_clear_halt+0x66>
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	22 0f       	add	r18, r18
    27a8:	33 1f       	adc	r19, r19
    27aa:	f9 01       	movw	r30, r18
    27ac:	ec 5e       	subi	r30, 0xEC	; 236
    27ae:	f7 4d       	sbci	r31, 0xD7	; 215
    27b0:	95 8d       	ldd	r25, Z+29	; 0x1d
    27b2:	9b 7f       	andi	r25, 0xFB	; 251
    27b4:	95 8f       	std	Z+29, r25	; 0x1d
    27b6:	67 dc       	rcall	.-1842   	; 0x2086 <udd_ep_get_job>
    27b8:	fc 01       	movw	r30, r24
    27ba:	80 81       	ld	r24, Z
    27bc:	80 ff       	sbrs	r24, 0
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <udd_ep_clear_halt+0x66>
    27c0:	8e 7f       	andi	r24, 0xFE	; 254
    27c2:	80 83       	st	Z, r24
    27c4:	07 80       	ldd	r0, Z+7	; 0x07
    27c6:	f0 85       	ldd	r31, Z+8	; 0x08
    27c8:	e0 2d       	mov	r30, r0
    27ca:	19 95       	eicall
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	08 95       	ret

000027d0 <udd_ep_run>:
    27d0:	8f 92       	push	r8
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	98 2e       	mov	r9, r24
    27ea:	86 2e       	mov	r8, r22
    27ec:	6a 01       	movw	r12, r20
    27ee:	79 01       	movw	r14, r18
    27f0:	4a dc       	rcall	.-1900   	; 0x2086 <udd_ep_get_job>
    27f2:	5c 01       	movw	r10, r24
    27f4:	29 2d       	mov	r18, r9
    27f6:	c9 2d       	mov	r28, r9
    27f8:	cf 70       	andi	r28, 0x0F	; 15
    27fa:	d0 e0       	ldi	r29, 0x00	; 0
    27fc:	ce 01       	movw	r24, r28
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	c9 2d       	mov	r28, r9
    2804:	09 2c       	mov	r0, r9
    2806:	00 0c       	add	r0, r0
    2808:	dd 0b       	sbc	r29, r29
    280a:	cc 27       	eor	r28, r28
    280c:	dd 0f       	add	r29, r29
    280e:	cc 1f       	adc	r28, r28
    2810:	dd 27       	eor	r29, r29
    2812:	c8 0f       	add	r28, r24
    2814:	d9 1f       	adc	r29, r25
    2816:	fe 01       	movw	r30, r28
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	ec 5e       	subi	r30, 0xEC	; 236
    2826:	f7 4d       	sbci	r31, 0xD7	; 215
    2828:	85 8d       	ldd	r24, Z+29	; 0x1d
    282a:	80 7c       	andi	r24, 0xC0	; 192
    282c:	09 f4       	brne	.+2      	; 0x2830 <udd_ep_run+0x60>
    282e:	7e c0       	rjmp	.+252    	; 0x292c <udd_ep_run+0x15c>
    2830:	fe 01       	movw	r30, r28
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	ec 5e       	subi	r30, 0xEC	; 236
    2840:	f7 4d       	sbci	r31, 0xD7	; 215
    2842:	85 8d       	ldd	r24, Z+29	; 0x1d
    2844:	80 7c       	andi	r24, 0xC0	; 192
    2846:	80 3c       	cpi	r24, 0xC0	; 192
    2848:	61 f0       	breq	.+24     	; 0x2862 <udd_ep_run+0x92>
    284a:	fe 01       	movw	r30, r28
    284c:	ee 0f       	add	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	ee 0f       	add	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	ee 0f       	add	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	ec 5e       	subi	r30, 0xEC	; 236
    285a:	f7 4d       	sbci	r31, 0xD7	; 215
    285c:	85 8d       	ldd	r24, Z+29	; 0x1d
    285e:	82 fd       	sbrc	r24, 2
    2860:	67 c0       	rjmp	.+206    	; 0x2930 <udd_ep_run+0x160>
    2862:	8f b7       	in	r24, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	f5 01       	movw	r30, r10
    2868:	90 81       	ld	r25, Z
    286a:	90 ff       	sbrs	r25, 0
    286c:	03 c0       	rjmp	.+6      	; 0x2874 <udd_ep_run+0xa4>
    286e:	8f bf       	out	0x3f, r24	; 63
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	5f c0       	rjmp	.+190    	; 0x2932 <udd_ep_run+0x162>
    2874:	f5 01       	movw	r30, r10
    2876:	90 81       	ld	r25, Z
    2878:	91 60       	ori	r25, 0x01	; 1
    287a:	90 83       	st	Z, r25
    287c:	8f bf       	out	0x3f, r24	; 63
    287e:	c1 82       	std	Z+1, r12	; 0x01
    2880:	d2 82       	std	Z+2, r13	; 0x02
    2882:	e3 82       	std	Z+3, r14	; 0x03
    2884:	f4 82       	std	Z+4, r15	; 0x04
    2886:	15 82       	std	Z+5, r1	; 0x05
    2888:	16 82       	std	Z+6, r1	; 0x06
    288a:	07 83       	std	Z+7, r16	; 0x07
    288c:	10 87       	std	Z+8, r17	; 0x08
    288e:	81 10       	cpse	r8, r1
    2890:	06 c0       	rjmp	.+12     	; 0x289e <udd_ep_run+0xce>
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	e1 14       	cp	r14, r1
    2896:	f1 04       	cpc	r15, r1
    2898:	19 f0       	breq	.+6      	; 0x28a0 <udd_ep_run+0xd0>
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	01 c0       	rjmp	.+2      	; 0x28a0 <udd_ep_run+0xd0>
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	f5 01       	movw	r30, r10
    28a2:	80 81       	ld	r24, Z
    28a4:	90 fb       	bst	r25, 0
    28a6:	81 f9       	bld	r24, 1
    28a8:	8b 7f       	andi	r24, 0xFB	; 251
    28aa:	80 83       	st	Z, r24
    28ac:	22 23       	and	r18, r18
    28ae:	5c f4       	brge	.+22     	; 0x28c6 <udd_ep_run+0xf6>
    28b0:	cc 0f       	add	r28, r28
    28b2:	dd 1f       	adc	r29, r29
    28b4:	cc 0f       	add	r28, r28
    28b6:	dd 1f       	adc	r29, r29
    28b8:	cc 0f       	add	r28, r28
    28ba:	dd 1f       	adc	r29, r29
    28bc:	cc 5e       	subi	r28, 0xEC	; 236
    28be:	d7 4d       	sbci	r29, 0xD7	; 215
    28c0:	1a a2       	std	Y+34, r1	; 0x22
    28c2:	1b a2       	std	Y+35, r1	; 0x23
    28c4:	2f c0       	rjmp	.+94     	; 0x2924 <udd_ep_run+0x154>
    28c6:	fe 01       	movw	r30, r28
    28c8:	ee 0f       	add	r30, r30
    28ca:	ff 1f       	adc	r31, r31
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	ee 0f       	add	r30, r30
    28d2:	ff 1f       	adc	r31, r31
    28d4:	ec 5e       	subi	r30, 0xEC	; 236
    28d6:	f7 4d       	sbci	r31, 0xD7	; 215
    28d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    28da:	80 7c       	andi	r24, 0xC0	; 192
    28dc:	80 3c       	cpi	r24, 0xC0	; 192
    28de:	b1 f4       	brne	.+44     	; 0x290c <udd_ep_run+0x13c>
    28e0:	ce 01       	movw	r24, r28
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	80 5d       	subi	r24, 0xD0	; 208
    28f0:	97 4d       	sbci	r25, 0xD7	; 215
    28f2:	a0 db       	rcall	.-2240   	; 0x2034 <udd_ep_get_size>
    28f4:	bc 01       	movw	r22, r24
    28f6:	c7 01       	movw	r24, r14
    28f8:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <__udivmodhi4>
    28fc:	89 2b       	or	r24, r25
    28fe:	31 f0       	breq	.+12     	; 0x290c <udd_ep_run+0x13c>
    2900:	f5 01       	movw	r30, r10
    2902:	80 81       	ld	r24, Z
    2904:	8e 7f       	andi	r24, 0xFE	; 254
    2906:	80 83       	st	Z, r24
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	13 c0       	rjmp	.+38     	; 0x2932 <udd_ep_run+0x162>
    290c:	cc 0f       	add	r28, r28
    290e:	dd 1f       	adc	r29, r29
    2910:	cc 0f       	add	r28, r28
    2912:	dd 1f       	adc	r29, r29
    2914:	cc 0f       	add	r28, r28
    2916:	dd 1f       	adc	r29, r29
    2918:	cc 5e       	subi	r28, 0xEC	; 236
    291a:	d7 4d       	sbci	r29, 0xD7	; 215
    291c:	1e 8e       	std	Y+30, r1	; 0x1e
    291e:	1f 8e       	std	Y+31, r1	; 0x1f
    2920:	1a a2       	std	Y+34, r1	; 0x22
    2922:	1b a2       	std	Y+35, r1	; 0x23
    2924:	89 2d       	mov	r24, r9
    2926:	42 dc       	rcall	.-1916   	; 0x21ac <udd_ep_trans_complet>
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <udd_ep_run+0x162>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <udd_ep_run+0x162>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	08 95       	ret

0000294c <udd_ep_abort>:
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	18 2f       	mov	r17, r24
    2958:	c8 2f       	mov	r28, r24
    295a:	cf 70       	andi	r28, 0x0F	; 15
    295c:	d0 e0       	ldi	r29, 0x00	; 0
    295e:	ce 01       	movw	r24, r28
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	c1 2f       	mov	r28, r17
    2966:	01 2e       	mov	r0, r17
    2968:	00 0c       	add	r0, r0
    296a:	dd 0b       	sbc	r29, r29
    296c:	cc 27       	eor	r28, r28
    296e:	dd 0f       	add	r29, r29
    2970:	cc 1f       	adc	r28, r28
    2972:	dd 27       	eor	r29, r29
    2974:	c8 0f       	add	r28, r24
    2976:	d9 1f       	adc	r29, r25
    2978:	81 2f       	mov	r24, r17
    297a:	85 db       	rcall	.-2294   	; 0x2086 <udd_ep_get_job>
    297c:	dc 01       	movw	r26, r24
    297e:	fe 01       	movw	r30, r28
    2980:	ee 0f       	add	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	ee 0f       	add	r30, r30
    2986:	ff 1f       	adc	r31, r31
    2988:	ee 0f       	add	r30, r30
    298a:	ff 1f       	adc	r31, r31
    298c:	e0 5d       	subi	r30, 0xD0	; 208
    298e:	f7 4d       	sbci	r31, 0xD7	; 215
    2990:	02 e0       	ldi	r16, 0x02	; 2
    2992:	05 93       	las	Z, r16
    2994:	8c 91       	ld	r24, X
    2996:	80 ff       	sbrs	r24, 0
    2998:	23 c0       	rjmp	.+70     	; 0x29e0 <udd_ep_abort+0x94>
    299a:	8e 7f       	andi	r24, 0xFE	; 254
    299c:	8c 93       	st	X, r24
    299e:	17 96       	adiw	r26, 0x07	; 7
    29a0:	ed 91       	ld	r30, X+
    29a2:	fc 91       	ld	r31, X
    29a4:	18 97       	sbiw	r26, 0x08	; 8
    29a6:	30 97       	sbiw	r30, 0x00	; 0
    29a8:	d9 f0       	breq	.+54     	; 0x29e0 <udd_ep_abort+0x94>
    29aa:	11 23       	and	r17, r17
    29ac:	5c f4       	brge	.+22     	; 0x29c4 <udd_ep_abort+0x78>
    29ae:	cc 0f       	add	r28, r28
    29b0:	dd 1f       	adc	r29, r29
    29b2:	cc 0f       	add	r28, r28
    29b4:	dd 1f       	adc	r29, r29
    29b6:	cc 0f       	add	r28, r28
    29b8:	dd 1f       	adc	r29, r29
    29ba:	cc 5e       	subi	r28, 0xEC	; 236
    29bc:	d7 4d       	sbci	r29, 0xD7	; 215
    29be:	6a a1       	ldd	r22, Y+34	; 0x22
    29c0:	7b a1       	ldd	r23, Y+35	; 0x23
    29c2:	0a c0       	rjmp	.+20     	; 0x29d8 <udd_ep_abort+0x8c>
    29c4:	cc 0f       	add	r28, r28
    29c6:	dd 1f       	adc	r29, r29
    29c8:	cc 0f       	add	r28, r28
    29ca:	dd 1f       	adc	r29, r29
    29cc:	cc 0f       	add	r28, r28
    29ce:	dd 1f       	adc	r29, r29
    29d0:	cc 5e       	subi	r28, 0xEC	; 236
    29d2:	d7 4d       	sbci	r29, 0xD7	; 215
    29d4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    29d6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    29d8:	41 2f       	mov	r20, r17
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	19 95       	eicall
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	1f 91       	pop	r17
    29e6:	0f 91       	pop	r16
    29e8:	ff 90       	pop	r15
    29ea:	08 95       	ret

000029ec <udd_ep_free>:
    29ec:	cf 93       	push	r28
    29ee:	c8 2f       	mov	r28, r24
    29f0:	ad df       	rcall	.-166    	; 0x294c <udd_ep_abort>
    29f2:	ec 2f       	mov	r30, r28
    29f4:	ef 70       	andi	r30, 0x0F	; 15
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	8c 2f       	mov	r24, r28
    29fe:	cc 0f       	add	r28, r28
    2a00:	99 0b       	sbc	r25, r25
    2a02:	88 27       	eor	r24, r24
    2a04:	99 0f       	add	r25, r25
    2a06:	88 1f       	adc	r24, r24
    2a08:	99 27       	eor	r25, r25
    2a0a:	e8 0f       	add	r30, r24
    2a0c:	f9 1f       	adc	r31, r25
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	ee 0f       	add	r30, r30
    2a14:	ff 1f       	adc	r31, r31
    2a16:	ee 0f       	add	r30, r30
    2a18:	ff 1f       	adc	r31, r31
    2a1a:	ec 5e       	subi	r30, 0xEC	; 236
    2a1c:	f7 4d       	sbci	r31, 0xD7	; 215
    2a1e:	15 8e       	std	Z+29, r1	; 0x1d
    2a20:	cf 91       	pop	r28
    2a22:	08 95       	ret

00002a24 <udd_ep_set_halt>:
    2a24:	0f 93       	push	r16
    2a26:	e8 2f       	mov	r30, r24
    2a28:	ef 70       	andi	r30, 0x0F	; 15
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	ee 0f       	add	r30, r30
    2a2e:	ff 1f       	adc	r31, r31
    2a30:	28 2f       	mov	r18, r24
    2a32:	08 2e       	mov	r0, r24
    2a34:	00 0c       	add	r0, r0
    2a36:	33 0b       	sbc	r19, r19
    2a38:	22 27       	eor	r18, r18
    2a3a:	33 0f       	add	r19, r19
    2a3c:	22 1f       	adc	r18, r18
    2a3e:	33 27       	eor	r19, r19
    2a40:	e2 0f       	add	r30, r18
    2a42:	f3 1f       	adc	r31, r19
    2a44:	ee 0f       	add	r30, r30
    2a46:	ff 1f       	adc	r31, r31
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	ee 0f       	add	r30, r30
    2a4e:	ff 1f       	adc	r31, r31
    2a50:	df 01       	movw	r26, r30
    2a52:	ac 5e       	subi	r26, 0xEC	; 236
    2a54:	b7 4d       	sbci	r27, 0xD7	; 215
    2a56:	5d 96       	adiw	r26, 0x1d	; 29
    2a58:	9c 91       	ld	r25, X
    2a5a:	5d 97       	sbiw	r26, 0x1d	; 29
    2a5c:	94 60       	ori	r25, 0x04	; 4
    2a5e:	5d 96       	adiw	r26, 0x1d	; 29
    2a60:	9c 93       	st	X, r25
    2a62:	e0 5d       	subi	r30, 0xD0	; 208
    2a64:	f7 4d       	sbci	r31, 0xD7	; 215
    2a66:	01 e0       	ldi	r16, 0x01	; 1
    2a68:	06 93       	lac	Z, r16
    2a6a:	70 df       	rcall	.-288    	; 0x294c <udd_ep_abort>
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	0f 91       	pop	r16
    2a70:	08 95       	ret

00002a72 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2a72:	1f 92       	push	r1
    2a74:	0f 92       	push	r0
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	0f 92       	push	r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	0b b6       	in	r0, 0x3b	; 59
    2a7e:	0f 92       	push	r0
    2a80:	0f 93       	push	r16
    2a82:	2f 93       	push	r18
    2a84:	3f 93       	push	r19
    2a86:	4f 93       	push	r20
    2a88:	5f 93       	push	r21
    2a8a:	6f 93       	push	r22
    2a8c:	7f 93       	push	r23
    2a8e:	8f 93       	push	r24
    2a90:	9f 93       	push	r25
    2a92:	af 93       	push	r26
    2a94:	bf 93       	push	r27
    2a96:	cf 93       	push	r28
    2a98:	ef 93       	push	r30
    2a9a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2a9c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2aa0:	88 23       	and	r24, r24
    2aa2:	3c f4       	brge	.+14     	; 0x2ab2 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2aa4:	80 e8       	ldi	r24, 0x80	; 128
    2aa6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2aaa:	ba d6       	rcall	.+3444   	; 0x3820 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2aac:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <user_callback_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2ab0:	8f c0       	rjmp	.+286    	; 0x2bd0 <__vector_125+0x15e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2ab2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ab6:	82 ff       	sbrs	r24, 2
    2ab8:	23 c0       	rjmp	.+70     	; 0x2b00 <__vector_125+0x8e>
		udd_ack_underflow_event();
    2aba:	84 e0       	ldi	r24, 0x04	; 4
    2abc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2ac0:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <udd_sram+0x24>
    2ac4:	86 ff       	sbrs	r24, 6
    2ac6:	84 c0       	rjmp	.+264    	; 0x2bd0 <__vector_125+0x15e>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2ac8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2acc:	81 fd       	sbrc	r24, 1
    2ace:	80 c0       	rjmp	.+256    	; 0x2bd0 <__vector_125+0x15e>
    2ad0:	f5 da       	rcall	.-2582   	; 0x20bc <udd_ctrl_interrupt_tc_setup>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	7d c0       	rjmp	.+250    	; 0x2bd0 <__vector_125+0x15e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2ad6:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <udd_ep_control_state>
    2ada:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <udd_ep_control_state+0x1>
    2ade:	81 30       	cpi	r24, 0x01	; 1
    2ae0:	91 05       	cpc	r25, r1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2ae2:	11 f4       	brne	.+4      	; 0x2ae8 <__vector_125+0x76>
    2ae4:	1d da       	rcall	.-3014   	; 0x1f20 <udd_ctrl_send_zlp_in>
    2ae6:	74 c0       	rjmp	.+232    	; 0x2bd0 <__vector_125+0x15e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ae8:	04 97       	sbiw	r24, 0x04	; 4
    2aea:	09 f0       	breq	.+2      	; 0x2aee <__vector_125+0x7c>
    2aec:	71 c0       	rjmp	.+226    	; 0x2bd0 <__vector_125+0x15e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2aee:	e9 e3       	ldi	r30, 0x39	; 57
    2af0:	f8 e2       	ldi	r31, 0x28	; 40
    2af2:	04 e0       	ldi	r16, 0x04	; 4
    2af4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2af6:	e1 e3       	ldi	r30, 0x31	; 49
    2af8:	f8 e2       	ldi	r31, 0x28	; 40
    2afa:	04 e0       	ldi	r16, 0x04	; 4
    2afc:	05 93       	las	Z, r16
    2afe:	68 c0       	rjmp	.+208    	; 0x2bd0 <__vector_125+0x15e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2b00:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b04:	81 ff       	sbrs	r24, 1
    2b06:	5f c0       	rjmp	.+190    	; 0x2bc6 <__vector_125+0x154>
		udd_ack_overflow_event();
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2b0e:	80 91 30 28 	lds	r24, 0x2830	; 0x802830 <udd_sram+0x1c>
    2b12:	86 ff       	sbrs	r24, 6
    2b14:	5d c0       	rjmp	.+186    	; 0x2bd0 <__vector_125+0x15e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b16:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b1a:	81 fd       	sbrc	r24, 1
    2b1c:	59 c0       	rjmp	.+178    	; 0x2bd0 <__vector_125+0x15e>
    2b1e:	ce da       	rcall	.-2660   	; 0x20bc <udd_ctrl_interrupt_tc_setup>
    2b20:	81 11       	cpse	r24, r1
    2b22:	56 c0       	rjmp	.+172    	; 0x2bd0 <__vector_125+0x15e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2b24:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <udd_ep_control_state>
    2b28:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <udd_ep_control_state+0x1>
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	91 05       	cpc	r25, r1
    2b30:	59 f4       	brne	.+22     	; 0x2b48 <__vector_125+0xd6>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2b32:	84 e0       	ldi	r24, 0x04	; 4
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <udd_ep_control_state>
    2b3a:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <udd_ep_control_state+0x1>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2b3e:	e0 e3       	ldi	r30, 0x30	; 48
    2b40:	f8 e2       	ldi	r31, 0x28	; 40
    2b42:	02 e0       	ldi	r16, 0x02	; 2
    2b44:	06 93       	lac	Z, r16
    2b46:	44 c0       	rjmp	.+136    	; 0x2bd0 <__vector_125+0x15e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2b48:	03 97       	sbiw	r24, 0x03	; 3
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <__vector_125+0xdc>
    2b4c:	41 c0       	rjmp	.+130    	; 0x2bd0 <__vector_125+0x15e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2b4e:	e9 e3       	ldi	r30, 0x39	; 57
    2b50:	f8 e2       	ldi	r31, 0x28	; 40
    2b52:	04 e0       	ldi	r16, 0x04	; 4
    2b54:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2b56:	e1 e3       	ldi	r30, 0x31	; 49
    2b58:	f8 e2       	ldi	r31, 0x28	; 40
    2b5a:	04 e0       	ldi	r16, 0x04	; 4
    2b5c:	05 93       	las	Z, r16
    2b5e:	38 c0       	rjmp	.+112    	; 0x2bd0 <__vector_125+0x15e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2b60:	80 e1       	ldi	r24, 0x10	; 16
    2b62:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2b66:	c1 e0       	ldi	r28, 0x01	; 1
    2b68:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2b6a:	f0 de       	rcall	.-544    	; 0x294c <udd_ep_abort>
    2b6c:	8c 2f       	mov	r24, r28
    2b6e:	80 68       	ori	r24, 0x80	; 128
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2b70:	ed de       	rcall	.-550    	; 0x294c <udd_ep_abort>
    2b72:	cf 5f       	subi	r28, 0xFF	; 255
    2b74:	c6 30       	cpi	r28, 0x06	; 6
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2b76:	c1 f7       	brne	.-16     	; 0x2b68 <__vector_125+0xf6>
    2b78:	2a d6       	rcall	.+3156   	; 0x37ce <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2b7a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2b7e:	e4 e1       	ldi	r30, 0x14	; 20
    2b80:	f8 e2       	ldi	r31, 0x28	; 40
    2b82:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
    2b84:	96 e0       	ldi	r25, 0x06	; 6
    2b86:	94 8f       	std	Z+28, r25	; 0x1c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b88:	80 e4       	ldi	r24, 0x40	; 64
    2b8a:	85 8f       	std	Z+29, r24	; 0x1d
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
	udd_endpoint_clear_status(ep_ctrl);
    2b8c:	15 a2       	std	Z+37, r1	; 0x25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2b8e:	94 a3       	std	Z+36, r25	; 0x24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2b90:	85 a3       	std	Z+37, r24	; 0x25
    2b92:	85 e0       	ldi	r24, 0x05	; 5
    2b94:	98 e2       	ldi	r25, 0x28	; 40
    2b96:	80 a3       	std	Z+32, r24	; 0x20
		// Reset endpoint control management
		udd_ctrl_init();
    2b98:	91 a3       	std	Z+33, r25	; 0x21
    2b9a:	88 d9       	rcall	.-3312   	; 0x1eac <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2b9c:	19 c0       	rjmp	.+50     	; 0x2bd0 <__vector_125+0x15e>
	}

	if (udd_is_suspend_event()) {
    2b9e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ba2:	86 ff       	sbrs	r24, 6
		udd_ack_suspend_event();
    2ba4:	06 c0       	rjmp	.+12     	; 0x2bb2 <__vector_125+0x140>
    2ba6:	80 e4       	ldi	r24, 0x40	; 64
    2ba8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	5f d9       	rcall	.-3394   	; 0x1e6e <udd_sleep_mode>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <__vector_125+0x15e>
    2bb2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bb6:	85 ff       	sbrs	r24, 5
		udd_ack_resume_event();
    2bb8:	0b c0       	rjmp	.+22     	; 0x2bd0 <__vector_125+0x15e>
    2bba:	80 e2       	ldi	r24, 0x20	; 32
    2bbc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	55 d9       	rcall	.-3414   	; 0x1e6e <udd_sleep_mode>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2bc4:	05 c0       	rjmp	.+10     	; 0x2bd0 <__vector_125+0x15e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2bc6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bca:	84 fd       	sbrc	r24, 4
    2bcc:	c9 cf       	rjmp	.-110    	; 0x2b60 <__vector_125+0xee>
    2bce:	e7 cf       	rjmp	.-50     	; 0x2b9e <__vector_125+0x12c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2bd0:	ff 91       	pop	r31
    2bd2:	ef 91       	pop	r30
    2bd4:	cf 91       	pop	r28
    2bd6:	bf 91       	pop	r27
    2bd8:	af 91       	pop	r26
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	7f 91       	pop	r23
    2be0:	6f 91       	pop	r22
    2be2:	5f 91       	pop	r21
    2be4:	4f 91       	pop	r20
    2be6:	3f 91       	pop	r19
    2be8:	2f 91       	pop	r18
    2bea:	0f 91       	pop	r16
    2bec:	0f 90       	pop	r0
    2bee:	0b be       	out	0x3b, r0	; 59
    2bf0:	0f 90       	pop	r0
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	0f 90       	pop	r0
    2bf6:	1f 90       	pop	r1
    2bf8:	18 95       	reti

00002bfa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2bfa:	1f 92       	push	r1
    2bfc:	0f 92       	push	r0
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	0f 92       	push	r0
    2c02:	11 24       	eor	r1, r1
    2c04:	0b b6       	in	r0, 0x3b	; 59
    2c06:	0f 92       	push	r0
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	2f 93       	push	r18
    2c0e:	3f 93       	push	r19
    2c10:	4f 93       	push	r20
    2c12:	5f 93       	push	r21
    2c14:	6f 93       	push	r22
    2c16:	7f 93       	push	r23
    2c18:	8f 93       	push	r24
    2c1a:	9f 93       	push	r25
    2c1c:	af 93       	push	r26
    2c1e:	bf 93       	push	r27
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	ef 93       	push	r30
    2c26:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2c28:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c2c:	81 fd       	sbrc	r24, 1
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2c30:	45 da       	rcall	.-2934   	; 0x20bc <udd_ctrl_interrupt_tc_setup>
    2c32:	81 11       	cpse	r24, r1
    2c34:	c4 c0       	rjmp	.+392    	; 0x2dbe <__vector_126+0x1c4>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2c3c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2c40:	81 95       	neg	r24
    2c42:	88 0f       	add	r24, r24
    2c44:	e0 e3       	ldi	r30, 0x30	; 48
    2c46:	f8 e2       	ldi	r31, 0x28	; 40
    2c48:	e8 1b       	sub	r30, r24
    2c4a:	f1 09       	sbc	r31, r1
    2c4c:	20 81       	ld	r18, Z
    2c4e:	31 81       	ldd	r19, Z+1	; 0x01
    2c50:	20 53       	subi	r18, 0x30	; 48
    2c52:	38 42       	sbci	r19, 0x28	; 40
    2c54:	36 95       	lsr	r19
    2c56:	27 95       	ror	r18
    2c58:	36 95       	lsr	r19
    2c5a:	27 95       	ror	r18
    2c5c:	36 95       	lsr	r19
    2c5e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2c60:	82 2f       	mov	r24, r18
    2c62:	86 95       	lsr	r24
    2c64:	20 fd       	sbrc	r18, 0
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <__vector_126+0x72>
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <__vector_126+0x74>
    2c6c:	90 e8       	ldi	r25, 0x80	; 128
    2c6e:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c70:	e8 2f       	mov	r30, r24
    2c72:	ef 70       	andi	r30, 0x0F	; 15
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	08 2e       	mov	r0, r24
    2c7e:	00 0c       	add	r0, r0
    2c80:	33 0b       	sbc	r19, r19
    2c82:	22 27       	eor	r18, r18
    2c84:	33 0f       	add	r19, r19
    2c86:	22 1f       	adc	r18, r18
    2c88:	33 27       	eor	r19, r19
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2c8e:	df 01       	movw	r26, r30
    2c90:	aa 0f       	add	r26, r26
    2c92:	bb 1f       	adc	r27, r27
    2c94:	aa 0f       	add	r26, r26
    2c96:	bb 1f       	adc	r27, r27
    2c98:	aa 0f       	add	r26, r26
    2c9a:	bb 1f       	adc	r27, r27
    2c9c:	ac 5e       	subi	r26, 0xEC	; 236
    2c9e:	b7 4d       	sbci	r27, 0xD7	; 215
    2ca0:	5c 96       	adiw	r26, 0x1c	; 28
    2ca2:	9c 91       	ld	r25, X
    2ca4:	95 ff       	sbrs	r25, 5
    2ca6:	8b c0       	rjmp	.+278    	; 0x2dbe <__vector_126+0x1c4>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	ee 0f       	add	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	ee 0f       	add	r30, r30
    2cb2:	ff 1f       	adc	r31, r31
    2cb4:	e0 5d       	subi	r30, 0xD0	; 208
    2cb6:	f7 4d       	sbci	r31, 0xD7	; 215
    2cb8:	00 e2       	ldi	r16, 0x20	; 32
    2cba:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2cbc:	81 11       	cpse	r24, r1
    2cbe:	7a c0       	rjmp	.+244    	; 0x2db4 <__vector_126+0x1ba>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cc0:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <udd_ep_control_state>
    2cc4:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <udd_ep_control_state+0x1>
    2cc8:	04 97       	sbiw	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2cca:	19 f4       	brne	.+6      	; 0x2cd2 <__vector_126+0xd8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2ccc:	3a d9       	rcall	.-3468   	; 0x1f42 <udd_ctrl_endofrequest>
    2cce:	ee d8       	rcall	.-3620   	; 0x1eac <udd_ctrl_init>
    2cd0:	76 c0       	rjmp	.+236    	; 0x2dbe <__vector_126+0x1c4>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2cd2:	00 91 32 28 	lds	r16, 0x2832	; 0x802832 <udd_sram+0x1e>
    2cd6:	10 91 33 28 	lds	r17, 0x2833	; 0x802833 <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2cda:	80 91 43 2a 	lds	r24, 0x2A43	; 0x802a43 <udd_g_ctrlreq+0xa>
    2cde:	90 91 44 2a 	lds	r25, 0x2A44	; 0x802a44 <udd_g_ctrlreq+0xb>
    2ce2:	c0 91 0d 28 	lds	r28, 0x280D	; 0x80280d <udd_ctrl_payload_nb_trans>
    2ce6:	d0 91 0e 28 	lds	r29, 0x280E	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    2cea:	98 01       	movw	r18, r16
    2cec:	2c 0f       	add	r18, r28
    2cee:	3d 1f       	adc	r19, r29
    2cf0:	82 17       	cp	r24, r18
    2cf2:	93 07       	cpc	r25, r19
    2cf4:	18 f4       	brcc	.+6      	; 0x2cfc <__vector_126+0x102>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cf6:	8c 01       	movw	r16, r24
    2cf8:	0c 1b       	sub	r16, r28
    2cfa:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2cfc:	80 91 41 2a 	lds	r24, 0x2A41	; 0x802a41 <udd_g_ctrlreq+0x8>
    2d00:	90 91 42 2a 	lds	r25, 0x2A42	; 0x802a42 <udd_g_ctrlreq+0x9>
    2d04:	a8 01       	movw	r20, r16
    2d06:	65 e0       	ldi	r22, 0x05	; 5
    2d08:	78 e2       	ldi	r23, 0x28	; 40
    2d0a:	8c 0f       	add	r24, r28
    2d0c:	9d 1f       	adc	r25, r29
    2d0e:	0e 94 3a 44 	call	0x8874	; 0x8874 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2d12:	c0 0f       	add	r28, r16
    2d14:	d1 1f       	adc	r29, r17
    2d16:	c0 93 0d 28 	sts	0x280D, r28	; 0x80280d <udd_ctrl_payload_nb_trans>
    2d1a:	d0 93 0e 28 	sts	0x280E, r29	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2d1e:	08 30       	cpi	r16, 0x08	; 8
    2d20:	11 05       	cpc	r17, r1
    2d22:	69 f4       	brne	.+26     	; 0x2d3e <__vector_126+0x144>
    2d24:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    2d28:	90 91 10 28 	lds	r25, 0x2810	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d2c:	8c 0f       	add	r24, r28
    2d2e:	9d 1f       	adc	r25, r29
    2d30:	20 91 3f 2a 	lds	r18, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    2d34:	30 91 40 2a 	lds	r19, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    2d38:	82 17       	cp	r24, r18
    2d3a:	93 07       	cpc	r25, r19
    2d3c:	80 f0       	brcs	.+32     	; 0x2d5e <__vector_126+0x164>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2d3e:	e9 e3       	ldi	r30, 0x39	; 57
    2d40:	fa e2       	ldi	r31, 0x2A	; 42
    2d42:	c2 87       	std	Z+10, r28	; 0x0a
    2d44:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d46:	06 84       	ldd	r0, Z+14	; 0x0e
    2d48:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d4a:	e0 2d       	mov	r30, r0
    2d4c:	30 97       	sbiw	r30, 0x00	; 0
    2d4e:	29 f0       	breq	.+10     	; 0x2d5a <__vector_126+0x160>
			if (!udd_g_ctrlreq.over_under_run()) {
    2d50:	19 95       	eicall
    2d52:	81 11       	cpse	r24, r1
				// Stall ZLP
				udd_ctrl_stall_data();
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <__vector_126+0x160>
    2d56:	d3 d8       	rcall	.-3674   	; 0x1efe <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2d58:	32 c0       	rjmp	.+100    	; 0x2dbe <__vector_126+0x1c4>
    2d5a:	e2 d8       	rcall	.-3644   	; 0x1f20 <udd_ctrl_send_zlp_in>
    2d5c:	30 c0       	rjmp	.+96     	; 0x2dbe <__vector_126+0x1c4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d5e:	80 91 43 2a 	lds	r24, 0x2A43	; 0x802a43 <udd_g_ctrlreq+0xa>
    2d62:	90 91 44 2a 	lds	r25, 0x2A44	; 0x802a44 <udd_g_ctrlreq+0xb>
    2d66:	c8 17       	cp	r28, r24
    2d68:	d9 07       	cpc	r29, r25
    2d6a:	f9 f4       	brne	.+62     	; 0x2daa <__vector_126+0x1b0>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2d6c:	e0 91 47 2a 	lds	r30, 0x2A47	; 0x802a47 <udd_g_ctrlreq+0xe>
    2d70:	f0 91 48 2a 	lds	r31, 0x2A48	; 0x802a48 <udd_g_ctrlreq+0xf>
    2d74:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2d76:	11 f4       	brne	.+4      	; 0x2d7c <__vector_126+0x182>
    2d78:	c2 d8       	rcall	.-3708   	; 0x1efe <udd_ctrl_stall_data>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2d7a:	21 c0       	rjmp	.+66     	; 0x2dbe <__vector_126+0x1c4>
    2d7c:	19 95       	eicall
    2d7e:	81 11       	cpse	r24, r1
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <__vector_126+0x18c>
    2d82:	bd d8       	rcall	.-3718   	; 0x1efe <udd_ctrl_stall_data>
    2d84:	1c c0       	rjmp	.+56     	; 0x2dbe <__vector_126+0x1c4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d86:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    2d8a:	30 91 10 28 	lds	r19, 0x2810	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
    2d8e:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <udd_ctrl_payload_nb_trans>
    2d92:	90 91 0e 28 	lds	r25, 0x280E	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
    2d96:	82 0f       	add	r24, r18
    2d98:	93 1f       	adc	r25, r19
    2d9a:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <udd_ctrl_prev_payload_nb_trans>
    2d9e:	90 93 10 28 	sts	0x2810, r25	; 0x802810 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2da2:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <udd_ctrl_payload_nb_trans>
    2da6:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2daa:	e0 e3       	ldi	r30, 0x30	; 48
    2dac:	f8 e2       	ldi	r31, 0x28	; 40
    2dae:	02 e0       	ldi	r16, 0x02	; 2
    2db0:	06 93       	lac	Z, r16
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2db2:	05 c0       	rjmp	.+10     	; 0x2dbe <__vector_126+0x1c4>
		udd_ctrl_in_sent();
    2db4:	80 38       	cpi	r24, 0x80	; 128
    2db6:	11 f4       	brne	.+4      	; 0x2dbc <__vector_126+0x1c2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2db8:	cc d8       	rcall	.-3688   	; 0x1f52 <udd_ctrl_in_sent>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <__vector_126+0x1c4>
    2dbc:	f7 d9       	rcall	.-3090   	; 0x21ac <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	bf 91       	pop	r27
    2dc8:	af 91       	pop	r26
    2dca:	9f 91       	pop	r25
    2dcc:	8f 91       	pop	r24
    2dce:	7f 91       	pop	r23
    2dd0:	6f 91       	pop	r22
    2dd2:	5f 91       	pop	r21
    2dd4:	4f 91       	pop	r20
    2dd6:	3f 91       	pop	r19
    2dd8:	2f 91       	pop	r18
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	0f 90       	pop	r0
    2de0:	0b be       	out	0x3b, r0	; 59
    2de2:	0f 90       	pop	r0
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	0f 90       	pop	r0
    2de8:	1f 90       	pop	r1
    2dea:	18 95       	reti

00002dec <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <sysclk_init+0xa>
    2df6:	1f 92       	push	r1
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2dfc:	8f ef       	ldi	r24, 0xFF	; 255
    2dfe:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2e02:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2e06:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2e0a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2e0e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2e12:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2e16:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    2e1a:	64 e0       	ldi	r22, 0x04	; 4
    2e1c:	81 e4       	ldi	r24, 0x41	; 65
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 34 04 	call	0x868	; 0x868 <ccp_write_io>
    2e24:	6c e1       	ldi	r22, 0x1C	; 28
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	0e 94 3a 04 	call	0x874	; 0x874 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    2e2e:	8a 83       	std	Y+2, r24	; 0x02
    2e30:	6d e1       	ldi	r22, 0x1D	; 29
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	82 e0       	ldi	r24, 0x02	; 2
    2e36:	0e 94 3a 04 	call	0x874	; 0x874 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    2e3a:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	21 f4       	brne	.+8      	; 0x2e4c <sysclk_init+0x60>
		cal = 0x2340;
    2e44:	80 e4       	ldi	r24, 0x40	; 64
    2e46:	93 e2       	ldi	r25, 0x23	; 35
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	8b 83       	std	Y+3, r24	; 0x03
    2e52:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    2e54:	e0 e6       	ldi	r30, 0x60	; 96
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    2e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5c:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e5e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2e60:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2e62:	e0 e5       	ldi	r30, 0x50	; 80
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	82 60       	ori	r24, 0x02	; 2
    2e6a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e6c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2e6e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2e70:	81 ff       	sbrs	r24, 1
    2e72:	fd cf       	rjmp	.-6      	; 0x2e6e <sysclk_init+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e74:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2e76:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2e78:	00 e5       	ldi	r16, 0x50	; 80
    2e7a:	10 e0       	ldi	r17, 0x00	; 0
    2e7c:	d8 01       	movw	r26, r16
    2e7e:	16 96       	adiw	r26, 0x06	; 6
    2e80:	8c 91       	ld	r24, X
    2e82:	16 97       	sbiw	r26, 0x06	; 6
    2e84:	89 7f       	andi	r24, 0xF9	; 249
    2e86:	16 96       	adiw	r26, 0x06	; 6
    2e88:	8c 93       	st	X, r24
    2e8a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2e8c:	e0 e6       	ldi	r30, 0x60	; 96
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 e8       	ldi	r24, 0x80	; 128
    2e92:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2e94:	8b eb       	ldi	r24, 0xBB	; 187
    2e96:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2e98:	16 96       	adiw	r26, 0x06	; 6
    2e9a:	8c 91       	ld	r24, X
    2e9c:	16 97       	sbiw	r26, 0x06	; 6
    2e9e:	84 60       	ori	r24, 0x04	; 4
    2ea0:	16 96       	adiw	r26, 0x06	; 6
    2ea2:	8c 93       	st	X, r24
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2ea4:	80 81       	ld	r24, Z
    2ea6:	81 60       	ori	r24, 0x01	; 1
    2ea8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2eaa:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	80 e4       	ldi	r24, 0x40	; 64
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 34 04 	call	0x868	; 0x868 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2eb6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2eb8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2eba:	f8 01       	movw	r30, r16
    2ebc:	80 81       	ld	r24, Z
    2ebe:	8e 7f       	andi	r24, 0xFE	; 254
    2ec0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ec2:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2ec4:	24 96       	adiw	r28, 0x04	; 4
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	08 95       	ret

00002ed4 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ed4:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2ed6:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e0 59       	subi	r30, 0x90	; 144
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	60 95       	com	r22
    2ee0:	80 81       	ld	r24, Z
    2ee2:	68 23       	and	r22, r24
    2ee4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ee6:	2f bf       	out	0x3f, r18	; 63
    2ee8:	08 95       	ret

00002eea <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2eea:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2eec:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e0 59       	subi	r30, 0x90	; 144
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	80 81       	ld	r24, Z
    2ef6:	68 2b       	or	r22, r24
    2ef8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2efa:	2f bf       	out	0x3f, r18	; 63
    2efc:	08 95       	ret

00002efe <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2efe:	86 30       	cpi	r24, 0x06	; 6
    2f00:	11 f0       	breq	.+4      	; 0x2f06 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2f06:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2f08:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2f0c:	81 fd       	sbrc	r24, 1
    2f0e:	26 c0       	rjmp	.+76     	; 0x2f5c <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2f10:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2f12:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2f14:	e0 e5       	ldi	r30, 0x50	; 80
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	82 60       	ori	r24, 0x02	; 2
    2f1c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f1e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2f20:	81 81       	ldd	r24, Z+1	; 0x01
    2f22:	81 ff       	sbrs	r24, 1
    2f24:	fd cf       	rjmp	.-6      	; 0x2f20 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2f26:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2f28:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2f2a:	a0 e5       	ldi	r26, 0x50	; 80
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	16 96       	adiw	r26, 0x06	; 6
    2f30:	8c 91       	ld	r24, X
    2f32:	16 97       	sbiw	r26, 0x06	; 6
    2f34:	89 7f       	andi	r24, 0xF9	; 249
    2f36:	16 96       	adiw	r26, 0x06	; 6
    2f38:	8c 93       	st	X, r24
    2f3a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2f3c:	e0 e6       	ldi	r30, 0x60	; 96
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 e8       	ldi	r24, 0x80	; 128
    2f42:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2f44:	8b eb       	ldi	r24, 0xBB	; 187
    2f46:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2f48:	16 96       	adiw	r26, 0x06	; 6
    2f4a:	8c 91       	ld	r24, X
    2f4c:	16 97       	sbiw	r26, 0x06	; 6
    2f4e:	84 60       	ori	r24, 0x04	; 4
    2f50:	16 96       	adiw	r26, 0x06	; 6
    2f52:	8c 93       	st	X, r24
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2f54:	80 81       	ld	r24, Z
    2f56:	81 60       	ori	r24, 0x01	; 1
    2f58:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f5a:	9f bf       	out	0x3f, r25	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2f5c:	63 60       	ori	r22, 0x03	; 3
    2f5e:	84 e4       	ldi	r24, 0x44	; 68
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 34 04 	call	0x868	; 0x868 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2f66:	60 e4       	ldi	r22, 0x40	; 64
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	b3 cf       	rjmp	.-154    	; 0x2ed4 <sysclk_enable_module>
    2f6e:	08 95       	ret

00002f70 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2f70:	60 e4       	ldi	r22, 0x40	; 64
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	b9 df       	rcall	.-142    	; 0x2eea <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	84 e4       	ldi	r24, 0x44	; 68
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0c 94 34 04 	jmp	0x868	; 0x868 <ccp_write_io>
    2f82:	08 95       	ret

00002f84 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2f8e:	c6 2f       	mov	r28, r22
    2f90:	d0 e0       	ldi	r29, 0x00	; 0
    2f92:	de 01       	movw	r26, r28
    2f94:	02 2e       	mov	r0, r18
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <ioport_configure_port_pin+0x18>
    2f98:	b5 95       	asr	r27
    2f9a:	a7 95       	ror	r26
    2f9c:	0a 94       	dec	r0
    2f9e:	e2 f7       	brpl	.-8      	; 0x2f98 <ioport_configure_port_pin+0x14>
    2fa0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2fa2:	50 8b       	std	Z+16, r21	; 0x10
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2faa:	28 30       	cpi	r18, 0x08	; 8
    2fac:	31 05       	cpc	r19, r1
    2fae:	89 f7       	brne	.-30     	; 0x2f92 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2fb0:	40 ff       	sbrs	r20, 0
    2fb2:	0a c0       	rjmp	.+20     	; 0x2fc8 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2fb4:	41 ff       	sbrs	r20, 1
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2fb8:	fc 01       	movw	r30, r24
    2fba:	65 83       	std	Z+5, r22	; 0x05
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	61 83       	std	Z+1, r22	; 0x01
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2fc8:	fc 01       	movw	r30, r24
    2fca:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	08 95       	ret

00002fd2 <udi_hid_generic_disable>:
	return UDI_HID_GENERIC_ENABLE_EXT();
}


void udi_hid_generic_disable(void)
{
    2fd2:	08 95       	ret

00002fd4 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	08 95       	ret

00002fd8 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    2fd8:	30 91 3b 2a 	lds	r19, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    2fdc:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    2fe0:	82 2f       	mov	r24, r18
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	03 97       	sbiw	r24, 0x03	; 3
    2fe6:	c1 f4       	brne	.+48     	; 0x3018 <udi_hid_generic_setreport+0x40>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    2fe8:	31 11       	cpse	r19, r1
    2fea:	18 c0       	rjmp	.+48     	; 0x301c <udi_hid_generic_setreport+0x44>
			&& (sizeof(udi_hid_generic_report_feature) ==
    2fec:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    2ff0:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    2ff4:	04 97       	sbiw	r24, 0x04	; 4
    2ff6:	a1 f4       	brne	.+40     	; 0x3020 <udi_hid_generic_setreport+0x48>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    2ff8:	e9 e3       	ldi	r30, 0x39	; 57
    2ffa:	fa e2       	ldi	r31, 0x2A	; 42
    2ffc:	86 ea       	ldi	r24, 0xA6	; 166
    2ffe:	98 e2       	ldi	r25, 0x28	; 40
    3000:	80 87       	std	Z+8, r24	; 0x08
    3002:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    3004:	82 e4       	ldi	r24, 0x42	; 66
    3006:	98 e1       	ldi	r25, 0x18	; 24
    3008:	84 87       	std	Z+12, r24	; 0x0c
    300a:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    300c:	84 e0       	ldi	r24, 0x04	; 4
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	82 87       	std	Z+10, r24	; 0x0a
    3012:	93 87       	std	Z+11, r25	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	08 95       	ret
	}
	return false;
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	08 95       	ret
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	08 95       	ret
    3020:	80 e0       	ldi	r24, 0x00	; 0
}
    3022:	08 95       	ret

00003024 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <udi_hid_generic_b_report_in_free>
    302a:	08 95       	ret

0000302c <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
    3030:	0d e2       	ldi	r16, 0x2D	; 45
    3032:	18 e1       	ldi	r17, 0x18	; 24
    3034:	28 e1       	ldi	r18, 0x18	; 24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	4a ea       	ldi	r20, 0xAA	; 170
    303a:	58 e2       	ldi	r21, 0x28	; 40
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	c7 db       	rcall	.-2162   	; 0x27d0 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	08 95       	ret

00003048 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    3048:	10 92 dc 28 	sts	0x28DC, r1	; 0x8028dc <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    304c:	10 92 db 28 	sts	0x28DB, r1	; 0x8028db <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <udi_hid_generic_b_report_in_free>
	if (!udi_hid_generic_report_out_enable())
    3056:	ea cf       	rjmp	.-44     	; 0x302c <udi_hid_generic_report_out_enable>
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
}
    3058:	08 95       	ret

0000305a <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
    305a:	89 2b       	or	r24, r25
    305c:	41 f4       	brne	.+16     	; 0x306e <udi_hid_generic_report_out_received+0x14>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
    305e:	68 31       	cpi	r22, 0x18	; 24
    3060:	71 05       	cpc	r23, r1
    3062:	21 f4       	brne	.+8      	; 0x306c <udi_hid_generic_report_out_received+0x12>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
    3064:	8a ea       	ldi	r24, 0xAA	; 170
    3066:	98 e2       	ldi	r25, 0x28	; 40
    3068:	0e 94 4d 43 	call	0x869a	; 0x869a <usb_generic_hid_out>
	}
	udi_hid_generic_report_out_enable();
    306c:	df cf       	rjmp	.-66     	; 0x302c <udi_hid_generic_report_out_enable>
    306e:	08 95       	ret

00003070 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    3070:	2c ee       	ldi	r18, 0xEC	; 236
    3072:	37 e1       	ldi	r19, 0x17	; 23
    3074:	42 eb       	ldi	r20, 0xB2	; 178
    3076:	50 e2       	ldi	r21, 0x20	; 32
    3078:	6b ed       	ldi	r22, 0xDB	; 219
    307a:	78 e2       	ldi	r23, 0x28	; 40
    307c:	8c ed       	ldi	r24, 0xDC	; 220
    307e:	98 e2       	ldi	r25, 0x28	; 40
    3080:	1a c2       	rjmp	.+1076   	; 0x34b6 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    3082:	08 95       	ret

00003084 <udi_hid_generic_setfeature_valid>:
//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
    3084:	80 91 43 2a 	lds	r24, 0x2A43	; 0x802a43 <udd_g_ctrlreq+0xa>
    3088:	90 91 44 2a 	lds	r25, 0x2A44	; 0x802a44 <udd_g_ctrlreq+0xb>
    308c:	04 97       	sbiw	r24, 0x04	; 4
    308e:	21 f4       	brne	.+8      	; 0x3098 <udi_hid_generic_setfeature_valid+0x14>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
    3090:	86 ea       	ldi	r24, 0xA6	; 166
    3092:	98 e2       	ldi	r25, 0x28	; 40
    3094:	0c 94 3d 43 	jmp	0x867a	; 0x867a <main_hid_set_feature>
    3098:	08 95       	ret

0000309a <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	fc 01       	movw	r30, r24
	if (!udi_hid_generic_b_report_in_free)
    30a2:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <udi_hid_generic_b_report_in_free>
    30a6:	88 23       	and	r24, r24
    30a8:	01 f1       	breq	.+64     	; 0x30ea <udi_hid_generic_send_report_in+0x50>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    30aa:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    30ac:	f8 94       	cli
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    30ae:	88 e1       	ldi	r24, 0x18	; 24
    30b0:	22 ec       	ldi	r18, 0xC2	; 194
    30b2:	38 e2       	ldi	r19, 0x28	; 40
    30b4:	d9 01       	movw	r26, r18
    30b6:	1d 92       	st	X+, r1
    30b8:	8a 95       	dec	r24
    30ba:	e9 f7       	brne	.-6      	; 0x30b6 <udi_hid_generic_send_report_in+0x1c>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    30bc:	88 e1       	ldi	r24, 0x18	; 24
    30be:	d9 01       	movw	r26, r18
    30c0:	01 90       	ld	r0, Z+
    30c2:	0d 92       	st	X+, r0
    30c4:	8a 95       	dec	r24
    30c6:	e1 f7       	brne	.-8      	; 0x30c0 <udi_hid_generic_send_report_in+0x26>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    30c8:	02 e1       	ldi	r16, 0x12	; 18
    30ca:	18 e1       	ldi	r17, 0x18	; 24
    30cc:	28 e1       	ldi	r18, 0x18	; 24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	42 ec       	ldi	r20, 0xC2	; 194
    30d2:	58 e2       	ldi	r21, 0x28	; 40
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	81 e8       	ldi	r24, 0x81	; 129
    30d8:	7b db       	rcall	.-2314   	; 0x27d0 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	89 27       	eor	r24, r25
    30de:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    30e2:	cf bf       	out	0x3f, r28	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    30e4:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <udi_hid_generic_b_report_in_free>
    30e8:	89 27       	eor	r24, r25

}
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	08 95       	ret

000030f2 <udi_hid_joystick2_disable>:
	return UDI_HID_JOYSTICK2_ENABLE_EXT();
}


void udi_hid_joystick2_disable(void)
{
    30f2:	08 95       	ret

000030f4 <udi_hid_joystick2_getsetting>:

uint8_t udi_hid_joystick2_getsetting(void)
{
	//JW NEED TO SET FOR JOYSTICK2
	return 0;
}
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	08 95       	ret

000030f8 <udi_hid_joystick2_setreport>:

static bool udi_hid_joystick2_setreport(void)
{
	//JW NEED TO SET FOR JOYSTICK2
	return false;
}
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	08 95       	ret

000030fc <udi_hid_joystick2_enable>:

bool udi_hid_joystick2_enable(void)
{
	//JW NEED TO SET FOR JOYSTICK
	// Initialize internal value
	udi_hid_joystick2_rate = 0;
    30fc:	10 92 f9 28 	sts	0x28F9, r1	; 0x8028f9 <udi_hid_joystick2_rate>
	udi_hid_joystick2_protocol = 0;
    3100:	10 92 f8 28 	sts	0x28F8, r1	; 0x8028f8 <udi_hid_joystick2_protocol>
	udi_hid_joystick2_report_trans_ongoing = false;
    3104:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <udi_hid_joystick2_report_trans_ongoing>
	memset(udi_hid_joystick2_report, 0, UDI_HID_JOYSTICK2_REPORT_SIZE);
    3108:	8c e0       	ldi	r24, 0x0C	; 12
    310a:	eb ee       	ldi	r30, 0xEB	; 235
    310c:	f8 e2       	ldi	r31, 0x28	; 40
    310e:	df 01       	movw	r26, r30
    3110:	1d 92       	st	X+, r1
    3112:	8a 95       	dec	r24
    3114:	e9 f7       	brne	.-6      	; 0x3110 <udi_hid_joystick2_enable+0x14>
	udi_hid_joystick2_b_report_valid = false;
    3116:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <udi_hid_joystick2_b_report_valid>
	return UDI_HID_JOYSTICK2_ENABLE_EXT();
}
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	08 95       	ret

0000311e <udi_hid_joystick2_setup>:


bool udi_hid_joystick2_setup(void)
{
	//JW NEED TO SET FOR JOYSTICK
	return udi_hid_setup(&udi_hid_joystick2_rate,
    311e:	2c e7       	ldi	r18, 0x7C	; 124
    3120:	38 e1       	ldi	r19, 0x18	; 24
    3122:	41 ef       	ldi	r20, 0xF1	; 241
    3124:	50 e2       	ldi	r21, 0x20	; 32
    3126:	68 ef       	ldi	r22, 0xF8	; 248
    3128:	78 e2       	ldi	r23, 0x28	; 40
    312a:	89 ef       	ldi	r24, 0xF9	; 249
    312c:	98 e2       	ldi	r25, 0x28	; 40
    312e:	c3 c1       	rjmp	.+902    	; 0x34b6 <udi_hid_setup>
								&udi_hid_joystick2_protocol,
								(uint8_t *) &udi_hid_joystick2_report_desc,
								udi_hid_joystick2_setreport);
}
    3130:	08 95       	ret

00003132 <udi_hid_joystick2_send_report>:
	return true;
}*/


static bool udi_hid_joystick2_send_report(void)
{
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
	if (udi_hid_joystick2_report_trans_ongoing)
    3136:	80 91 ea 28 	lds	r24, 0x28EA	; 0x8028ea <udi_hid_joystick2_report_trans_ongoing>
    313a:	81 11       	cpse	r24, r1
    313c:	17 c0       	rjmp	.+46     	; 0x316c <udi_hid_joystick2_send_report+0x3a>
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_joystick2_report_trans, udi_hid_joystick2_report,
    313e:	8c e0       	ldi	r24, 0x0C	; 12
    3140:	eb ee       	ldi	r30, 0xEB	; 235
    3142:	f8 e2       	ldi	r31, 0x28	; 40
    3144:	ae ed       	ldi	r26, 0xDE	; 222
    3146:	b8 e2       	ldi	r27, 0x28	; 40
    3148:	01 90       	ld	r0, Z+
    314a:	0d 92       	st	X+, r0
    314c:	8a 95       	dec	r24
    314e:	e1 f7       	brne	.-8      	; 0x3148 <udi_hid_joystick2_send_report+0x16>
			UDI_HID_JOYSTICK2_REPORT_SIZE);
	//memset(&udi_hid_joystick_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_joystick2_b_report_valid = false;
    3150:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <udi_hid_joystick2_b_report_valid>

	// Send report
	udi_hid_joystick2_report_trans_ongoing =
			udd_ep_run(	UDI_HID_JOYSTICK2_EP_IN,
    3154:	0a eb       	ldi	r16, 0xBA	; 186
    3156:	18 e1       	ldi	r17, 0x18	; 24
    3158:	2c e0       	ldi	r18, 0x0C	; 12
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4e ed       	ldi	r20, 0xDE	; 222
    315e:	58 e2       	ldi	r21, 0x28	; 40
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	86 e8       	ldi	r24, 0x86	; 134
    3164:	35 db       	rcall	.-2454   	; 0x27d0 <udd_ep_run>
			UDI_HID_JOYSTICK2_REPORT_SIZE);
	//memset(&udi_hid_joystick_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_joystick2_b_report_valid = false;

	// Send report
	udi_hid_joystick2_report_trans_ongoing =
    3166:	80 93 ea 28 	sts	0x28EA, r24	; 0x8028ea <udi_hid_joystick2_report_trans_ongoing>
			udd_ep_run(	UDI_HID_JOYSTICK2_EP_IN,
							false,
							udi_hid_joystick2_report_trans,
							UDI_HID_JOYSTICK2_REPORT_SIZE,
							udi_hid_joystick2_report_sent);
	return udi_hid_joystick2_report_trans_ongoing;
    316a:	01 c0       	rjmp	.+2      	; 0x316e <udi_hid_joystick2_send_report+0x3c>


static bool udi_hid_joystick2_send_report(void)
{
	if (udi_hid_joystick2_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete
    316c:	80 e0       	ldi	r24, 0x00	; 0
							false,
							udi_hid_joystick2_report_trans,
							UDI_HID_JOYSTICK2_REPORT_SIZE,
							udi_hid_joystick2_report_sent);
	return udi_hid_joystick2_report_trans_ongoing;
}
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	08 95       	ret

00003174 <udi_hid_joystick2_report_sent>:
{
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_joystick2_report_trans_ongoing = false;
    3174:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <udi_hid_joystick2_report_trans_ongoing>
	if (udi_hid_joystick2_b_report_valid) {
    3178:	80 91 f7 28 	lds	r24, 0x28F7	; 0x8028f7 <udi_hid_joystick2_b_report_valid>
    317c:	81 11       	cpse	r24, r1
		// Send new valid report
		udi_hid_joystick2_send_report();
    317e:	d9 cf       	rjmp	.-78     	; 0x3132 <udi_hid_joystick2_send_report>
    3180:	08 95       	ret

00003182 <send_joystick2_report>:
	
	cpu_irq_restore(flags);
	return true;
}*/

bool send_joystick2_report(uint8_t *joybuf){
    3182:	cf 93       	push	r28
    3184:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3186:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3188:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	
	memcpy(udi_hid_joystick2_report, joybuf,	UDI_HID_JOYSTICK2_REPORT_SIZE);
    318a:	9c e0       	ldi	r25, 0x0C	; 12
    318c:	ab ee       	ldi	r26, 0xEB	; 235
    318e:	b8 e2       	ldi	r27, 0x28	; 40
    3190:	01 90       	ld	r0, Z+
    3192:	0d 92       	st	X+, r0
    3194:	9a 95       	dec	r25
    3196:	e1 f7       	brne	.-8      	; 0x3190 <send_joystick2_report+0xe>
	
	udi_hid_joystick2_b_report_valid = true;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	80 93 f7 28 	sts	0x28F7, r24	; 0x8028f7 <udi_hid_joystick2_b_report_valid>
	udi_hid_joystick2_send_report();	
    319e:	c9 df       	rcall	.-110    	; 0x3132 <udi_hid_joystick2_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31a0:	cf bf       	out	0x3f, r28	; 63
	
	cpu_irq_restore(flags);
	return true;
	
}
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	cf 91       	pop	r28
    31a6:	08 95       	ret

000031a8 <udi_hid_kbd_disable>:
	return UDI_HID_KBD_ENABLE_EXT();
}


void udi_hid_kbd_disable(void)
{
    31a8:	08 95       	ret

000031aa <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	08 95       	ret

000031ae <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    31ae:	30 91 3b 2a 	lds	r19, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    31b2:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    31b6:	82 2f       	mov	r24, r18
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	02 97       	sbiw	r24, 0x02	; 2
    31bc:	b9 f4       	brne	.+46     	; 0x31ec <udi_hid_kbd_setreport+0x3e>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    31be:	31 11       	cpse	r19, r1
    31c0:	17 c0       	rjmp	.+46     	; 0x31f0 <udi_hid_kbd_setreport+0x42>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    31c2:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    31c6:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	99 f4       	brne	.+38     	; 0x31f4 <udi_hid_kbd_setreport+0x46>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    31ce:	e9 e3       	ldi	r30, 0x39	; 57
    31d0:	fa e2       	ldi	r31, 0x2A	; 42
    31d2:	8c e0       	ldi	r24, 0x0C	; 12
    31d4:	99 e2       	ldi	r25, 0x29	; 41
    31d6:	80 87       	std	Z+8, r24	; 0x08
    31d8:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    31da:	8c ef       	ldi	r24, 0xFC	; 252
    31dc:	98 e1       	ldi	r25, 0x18	; 24
    31de:	84 87       	std	Z+12, r24	; 0x0c
    31e0:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	82 87       	std	Z+10, r24	; 0x0a
    31e8:	93 87       	std	Z+11, r25	; 0x0b
		return true;
    31ea:	08 95       	ret
	}
	return false;
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	08 95       	ret
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	08 95       	ret
    31f4:	80 e0       	ldi	r24, 0x00	; 0
}
    31f6:	08 95       	ret

000031f8 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
    31f8:	08 95       	ret

000031fa <udi_hid_kbd_enable>:
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
	// Initialize internal values
	udi_hid_kbd_rate = 0;
    31fa:	10 92 0e 29 	sts	0x290E, r1	; 0x80290e <udi_hid_kbd_rate>
	udi_hid_kbd_protocol = 0;
    31fe:	10 92 0d 29 	sts	0x290D, r1	; 0x80290d <udi_hid_kbd_protocol>
	udi_hid_kbd_b_report_trans_ongoing = false;
    3202:	10 92 02 29 	sts	0x2902, r1	; 0x802902 <udi_hid_kbd_b_report_trans_ongoing>
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    3206:	88 e0       	ldi	r24, 0x08	; 8
    3208:	e3 e0       	ldi	r30, 0x03	; 3
    320a:	f9 e2       	ldi	r31, 0x29	; 41
    320c:	df 01       	movw	r26, r30
    320e:	1d 92       	st	X+, r1
    3210:	8a 95       	dec	r24
    3212:	e9 f7       	brne	.-6      	; 0x320e <udi_hid_kbd_enable+0x14>
	udi_hid_kbd_b_report_valid = false;
    3214:	10 92 0b 29 	sts	0x290B, r1	; 0x80290b <udi_hid_kbd_b_report_valid>
	return UDI_HID_KBD_ENABLE_EXT();
}
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	08 95       	ret

0000321c <udi_hid_kbd_setup>:
}


bool udi_hid_kbd_setup(void)
{
	return udi_hid_setup(&udi_hid_kbd_rate,
    321c:	27 ed       	ldi	r18, 0xD7	; 215
    321e:	38 e1       	ldi	r19, 0x18	; 24
    3220:	45 e4       	ldi	r20, 0x45	; 69
    3222:	51 e2       	ldi	r21, 0x21	; 33
    3224:	6d e0       	ldi	r22, 0x0D	; 13
    3226:	79 e2       	ldi	r23, 0x29	; 41
    3228:	8e e0       	ldi	r24, 0x0E	; 14
    322a:	99 e2       	ldi	r25, 0x29	; 41
    322c:	44 c1       	rjmp	.+648    	; 0x34b6 <udi_hid_setup>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
    322e:	08 95       	ret

00003230 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
	if (udi_hid_kbd_b_report_trans_ongoing)
    3234:	80 91 02 29 	lds	r24, 0x2902	; 0x802902 <udi_hid_kbd_b_report_trans_ongoing>
    3238:	81 11       	cpse	r24, r1
    323a:	17 c0       	rjmp	.+46     	; 0x326a <udi_hid_kbd_send_report+0x3a>
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    323c:	88 e0       	ldi	r24, 0x08	; 8
    323e:	e3 e0       	ldi	r30, 0x03	; 3
    3240:	f9 e2       	ldi	r31, 0x29	; 41
    3242:	aa ef       	ldi	r26, 0xFA	; 250
    3244:	b8 e2       	ldi	r27, 0x28	; 40
    3246:	01 90       	ld	r0, Z+
    3248:	0d 92       	st	X+, r0
    324a:	8a 95       	dec	r24
    324c:	e1 f7       	brne	.-8      	; 0x3246 <udi_hid_kbd_send_report+0x16>
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
    324e:	10 92 0b 29 	sts	0x290B, r1	; 0x80290b <udi_hid_kbd_b_report_valid>
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    3252:	09 e3       	ldi	r16, 0x39	; 57
    3254:	19 e1       	ldi	r17, 0x19	; 25
    3256:	28 e0       	ldi	r18, 0x08	; 8
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a ef       	ldi	r20, 0xFA	; 250
    325c:	58 e2       	ldi	r21, 0x28	; 40
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	85 e8       	ldi	r24, 0x85	; 133
    3262:	b6 da       	rcall	.-2708   	; 0x27d0 <udd_ep_run>
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
    3264:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <udi_hid_kbd_b_report_trans_ongoing>
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
    3268:	01 c0       	rjmp	.+2      	; 0x326c <udi_hid_kbd_send_report+0x3c>
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
    326a:	80 e0       	ldi	r24, 0x00	; 0
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
}
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	08 95       	ret

00003272 <udi_hid_kbd_report_sent>:
		udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
    3272:	10 92 02 29 	sts	0x2902, r1	; 0x802902 <udi_hid_kbd_b_report_trans_ongoing>
	if (udi_hid_kbd_b_report_valid) {
    3276:	80 91 0b 29 	lds	r24, 0x290B	; 0x80290b <udi_hid_kbd_b_report_valid>
    327a:	81 11       	cpse	r24, r1
		udi_hid_kbd_send_report();
    327c:	d9 cf       	rjmp	.-78     	; 0x3230 <udi_hid_kbd_send_report>
    327e:	08 95       	ret

00003280 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
    3280:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3282:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3284:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
    3286:	e3 e0       	ldi	r30, 0x03	; 3
    3288:	f9 e2       	ldi	r31, 0x29	; 41
    328a:	80 95       	com	r24
    328c:	90 81       	ld	r25, Z
    328e:	89 23       	and	r24, r25
    3290:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    3298:	cb df       	rcall	.-106    	; 0x3230 <udi_hid_kbd_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    329a:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return true;
}
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	cf 91       	pop	r28
    32a0:	08 95       	ret

000032a2 <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
    32a2:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    32a4:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    32a6:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
    32a8:	e3 e0       	ldi	r30, 0x03	; 3
    32aa:	f9 e2       	ldi	r31, 0x29	; 41
    32ac:	90 81       	ld	r25, Z
    32ae:	89 2b       	or	r24, r25
    32b0:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    32b8:	bb df       	rcall	.-138    	; 0x3230 <udi_hid_kbd_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32ba:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return true;
}
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	cf 91       	pop	r28
    32c0:	08 95       	ret

000032c2 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    32c2:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    32c4:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    32c6:	f8 94       	cli

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    32c8:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <udi_hid_kbd_report+0x2>
    32cc:	99 23       	and	r25, r25
    32ce:	41 f0       	breq	.+16     	; 0x32e0 <udi_hid_kbd_up+0x1e>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    32d0:	89 17       	cp	r24, r25
    32d2:	a9 f0       	breq	.+42     	; 0x32fe <udi_hid_kbd_up+0x3c>
    32d4:	e6 e0       	ldi	r30, 0x06	; 6
    32d6:	f9 e2       	ldi	r31, 0x29	; 41
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    32d8:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    32da:	21 91       	ld	r18, Z+
    32dc:	21 11       	cpse	r18, r1
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <udi_hid_kbd_up+0x22>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32e0:	cf bf       	out	0x3f, r28	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    32e2:	1e c0       	rjmp	.+60     	; 0x3320 <udi_hid_kbd_up+0x5e>
		}
		if (key_id == udi_hid_kbd_report[i])
    32e4:	28 17       	cp	r18, r24
    32e6:	21 f0       	breq	.+8      	; 0x32f0 <udi_hid_kbd_up+0x2e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    32e8:	9f 5f       	subi	r25, 0xFF	; 255
    32ea:	98 30       	cpi	r25, 0x08	; 8
    32ec:	b1 f7       	brne	.-20     	; 0x32da <udi_hid_kbd_up+0x18>
    32ee:	05 c0       	rjmp	.+10     	; 0x32fa <udi_hid_kbd_up+0x38>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    32f0:	98 30       	cpi	r25, 0x08	; 8
    32f2:	19 f0       	breq	.+6      	; 0x32fa <udi_hid_kbd_up+0x38>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    32f4:	97 30       	cpi	r25, 0x07	; 7
    32f6:	20 f0       	brcs	.+8      	; 0x3300 <udi_hid_kbd_up+0x3e>
    32f8:	0c c0       	rjmp	.+24     	; 0x3312 <udi_hid_kbd_up+0x50>
    32fa:	cf bf       	out	0x3f, r28	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    32fc:	11 c0       	rjmp	.+34     	; 0x3320 <udi_hid_kbd_up+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    32fe:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    3300:	e9 2f       	mov	r30, r25
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	ed 5f       	subi	r30, 0xFD	; 253
    3306:	f6 4d       	sbci	r31, 0xD6	; 214
    3308:	81 81       	ldd	r24, Z+1	; 0x01
    330a:	80 83       	st	Z, r24
		i++;
    330c:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    330e:	97 30       	cpi	r25, 0x07	; 7
    3310:	b9 f7       	brne	.-18     	; 0x3300 <udi_hid_kbd_up+0x3e>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    3312:	10 92 0a 29 	sts	0x290A, r1	; 0x80290a <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    331c:	89 df       	rcall	.-238    	; 0x3230 <udi_hid_kbd_send_report>
    331e:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return true;
}
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	cf 91       	pop	r28
    3324:	08 95       	ret

00003326 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    3326:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3328:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    332a:	f8 94       	cli

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    332c:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <udi_hid_kbd_report+0x2>
    3330:	99 23       	and	r25, r25
    3332:	b1 f0       	breq	.+44     	; 0x3360 <udi_hid_kbd_down+0x3a>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    3334:	89 17       	cp	r24, r25
    3336:	41 f0       	breq	.+16     	; 0x3348 <udi_hid_kbd_down+0x22>
    3338:	a6 e0       	ldi	r26, 0x06	; 6
    333a:	b9 e2       	ldi	r27, 0x29	; 41
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    333c:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    333e:	9d 91       	ld	r25, X+
    3340:	99 23       	and	r25, r25
    3342:	49 f0       	breq	.+18     	; 0x3356 <udi_hid_kbd_down+0x30>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    3344:	98 13       	cpse	r25, r24
    3346:	03 c0       	rjmp	.+6      	; 0x334e <udi_hid_kbd_down+0x28>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3348:	cf bf       	out	0x3f, r28	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	14 c0       	rjmp	.+40     	; 0x3376 <udi_hid_kbd_down+0x50>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    334e:	ef 5f       	subi	r30, 0xFF	; 255
    3350:	e8 30       	cpi	r30, 0x08	; 8
    3352:	a9 f7       	brne	.-22     	; 0x333e <udi_hid_kbd_down+0x18>
    3354:	02 c0       	rjmp	.+4      	; 0x335a <udi_hid_kbd_down+0x34>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    3356:	e8 30       	cpi	r30, 0x08	; 8
    3358:	21 f4       	brne	.+8      	; 0x3362 <udi_hid_kbd_down+0x3c>
    335a:	cf bf       	out	0x3f, r28	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	0b c0       	rjmp	.+22     	; 0x3376 <udi_hid_kbd_down+0x50>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    3360:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	ed 5f       	subi	r30, 0xFD	; 253
    3366:	f6 4d       	sbci	r31, 0xD6	; 214
    3368:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    3370:	5f df       	rcall	.-322    	; 0x3230 <udi_hid_kbd_send_report>
    3372:	cf bf       	out	0x3f, r28	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    3374:	81 e0       	ldi	r24, 0x01	; 1
}
    3376:	cf 91       	pop	r28
    3378:	08 95       	ret

0000337a <udi_hid_mouse_disable>:
	return UDI_HID_MOUSE_ENABLE_EXT();
}


void udi_hid_mouse_disable(void)
{
    337a:	08 95       	ret

0000337c <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
	return 0;
}
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	08 95       	ret

00003380 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
	return false;
}
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	08 95       	ret

00003384 <udi_hid_mouse_enable>:
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    3384:	10 92 1b 29 	sts	0x291B, r1	; 0x80291b <udi_hid_mouse_rate>
	udi_hid_mouse_protocol = 0;
    3388:	10 92 1a 29 	sts	0x291A, r1	; 0x80291a <udi_hid_mouse_protocol>
	udi_hid_mouse_report_trans_ongoing = false;
    338c:	10 92 14 29 	sts	0x2914, r1	; 0x802914 <udi_hid_mouse_report_trans_ongoing>
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    3390:	84 e0       	ldi	r24, 0x04	; 4
    3392:	e5 e1       	ldi	r30, 0x15	; 21
    3394:	f9 e2       	ldi	r31, 0x29	; 41
    3396:	df 01       	movw	r26, r30
    3398:	1d 92       	st	X+, r1
    339a:	8a 95       	dec	r24
    339c:	e9 f7       	brne	.-6      	; 0x3398 <udi_hid_mouse_enable+0x14>
	udi_hid_mouse_b_report_valid = false;
    339e:	10 92 19 29 	sts	0x2919, r1	; 0x802919 <udi_hid_mouse_b_report_valid>
	return UDI_HID_MOUSE_ENABLE_EXT();
}
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	08 95       	ret

000033a6 <udi_hid_mouse_setup>:
}


bool udi_hid_mouse_setup(void)
{
	return udi_hid_setup(&udi_hid_mouse_rate,
    33a6:	20 ec       	ldi	r18, 0xC0	; 192
    33a8:	39 e1       	ldi	r19, 0x19	; 25
    33aa:	4a e8       	ldi	r20, 0x8A	; 138
    33ac:	51 e2       	ldi	r21, 0x21	; 33
    33ae:	6a e1       	ldi	r22, 0x1A	; 26
    33b0:	79 e2       	ldi	r23, 0x29	; 41
    33b2:	8b e1       	ldi	r24, 0x1B	; 27
    33b4:	99 e2       	ldi	r25, 0x29	; 41
    33b6:	7f c0       	rjmp	.+254    	; 0x34b6 <udi_hid_setup>
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    33b8:	08 95       	ret

000033ba <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 1);
}


static bool udi_hid_mouse_send_report(void)
{
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
	if (udi_hid_mouse_report_trans_ongoing)
    33be:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <udi_hid_mouse_report_trans_ongoing>
    33c2:	81 11       	cpse	r24, r1
    33c4:	25 c0       	rjmp	.+74     	; 0x3410 <udi_hid_mouse_send_report+0x56>
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
    33c6:	80 91 15 29 	lds	r24, 0x2915	; 0x802915 <udi_hid_mouse_report>
    33ca:	90 91 16 29 	lds	r25, 0x2916	; 0x802916 <udi_hid_mouse_report+0x1>
    33ce:	a0 91 17 29 	lds	r26, 0x2917	; 0x802917 <udi_hid_mouse_report+0x2>
    33d2:	b0 91 18 29 	lds	r27, 0x2918	; 0x802918 <udi_hid_mouse_report+0x3>
    33d6:	80 93 10 29 	sts	0x2910, r24	; 0x802910 <udi_hid_mouse_report_trans>
    33da:	90 93 11 29 	sts	0x2911, r25	; 0x802911 <udi_hid_mouse_report_trans+0x1>
    33de:	a0 93 12 29 	sts	0x2912, r26	; 0x802912 <udi_hid_mouse_report_trans+0x2>
    33e2:	b0 93 13 29 	sts	0x2913, r27	; 0x802913 <udi_hid_mouse_report_trans+0x3>
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
    33e6:	83 e0       	ldi	r24, 0x03	; 3
    33e8:	e6 e1       	ldi	r30, 0x16	; 22
    33ea:	f9 e2       	ldi	r31, 0x29	; 41
    33ec:	df 01       	movw	r26, r30
    33ee:	1d 92       	st	X+, r1
    33f0:	8a 95       	dec	r24
    33f2:	e9 f7       	brne	.-6      	; 0x33ee <udi_hid_mouse_send_report+0x34>
	udi_hid_mouse_b_report_valid = false;
    33f4:	10 92 19 29 	sts	0x2919, r1	; 0x802919 <udi_hid_mouse_b_report_valid>

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
    33f8:	02 e4       	ldi	r16, 0x42	; 66
    33fa:	1a e1       	ldi	r17, 0x1A	; 26
    33fc:	24 e0       	ldi	r18, 0x04	; 4
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e1       	ldi	r20, 0x10	; 16
    3402:	59 e2       	ldi	r21, 0x29	; 41
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	84 e8       	ldi	r24, 0x84	; 132
    3408:	e3 d9       	rcall	.-3130   	; 0x27d0 <udd_ep_run>
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
    340a:	80 93 14 29 	sts	0x2914, r24	; 0x802914 <udi_hid_mouse_report_trans_ongoing>
			udd_ep_run(	UDI_HID_MOUSE_EP_IN,
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
    340e:	01 c0       	rjmp	.+2      	; 0x3412 <udi_hid_mouse_send_report+0x58>


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete
    3410:	80 e0       	ldi	r24, 0x00	; 0
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
}
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	08 95       	ret

00003418 <udi_hid_mouse_move>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_mouse_move(int8_t pos, uint8_t index_report)
{
    3418:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    341a:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    341c:	f8 94       	cli
	int16_t s16_newpos;

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	fb 01       	movw	r30, r22
    3422:	eb 5e       	subi	r30, 0xEB	; 235
    3424:	f6 4d       	sbci	r31, 0xD6	; 214
    3426:	20 81       	ld	r18, Z
	s16_newpos += pos;
    3428:	08 2e       	mov	r0, r24
    342a:	00 0c       	add	r0, r0
    342c:	99 0b       	sbc	r25, r25
    342e:	82 0f       	add	r24, r18
    3430:	91 1d       	adc	r25, r1
    3432:	27 fd       	sbrc	r18, 7
    3434:	9a 95       	dec	r25
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
    3436:	9c 01       	movw	r18, r24
    3438:	21 58       	subi	r18, 0x81	; 129
    343a:	3f 4f       	sbci	r19, 0xFF	; 255
    343c:	2f 3f       	cpi	r18, 0xFF	; 255
    343e:	31 05       	cpc	r19, r1
    3440:	18 f0       	brcs	.+6      	; 0x3448 <udi_hid_mouse_move+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3442:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(flags);
		return false;	// Overflow of report
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	0a c0       	rjmp	.+20     	; 0x345c <udi_hid_mouse_move+0x44>
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
    3448:	fb 01       	movw	r30, r22
    344a:	eb 5e       	subi	r30, 0xEB	; 235
    344c:	f6 4d       	sbci	r31, 0xD6	; 214
    344e:	80 83       	st	Z, r24

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	80 93 19 29 	sts	0x2919, r24	; 0x802919 <udi_hid_mouse_b_report_valid>
	udi_hid_mouse_send_report();
    3456:	b1 df       	rcall	.-158    	; 0x33ba <udi_hid_mouse_send_report>
    3458:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return true;
    345a:	81 e0       	ldi	r24, 0x01	; 1
}
    345c:	cf 91       	pop	r28
    345e:	08 95       	ret

00003460 <udi_hid_mouse_btn>:


static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
    3460:	88 23       	and	r24, r24
    3462:	31 f0       	breq	.+12     	; 0x3470 <udi_hid_mouse_btn+0x10>
		udi_hid_mouse_report[0] |= btn;
    3464:	e5 e1       	ldi	r30, 0x15	; 21
    3466:	f9 e2       	ldi	r31, 0x29	; 41
    3468:	80 81       	ld	r24, Z
    346a:	68 2b       	or	r22, r24
    346c:	60 83       	st	Z, r22
    346e:	06 c0       	rjmp	.+12     	; 0x347c <udi_hid_mouse_btn+0x1c>
	else
		udi_hid_mouse_report[0] &= ~(unsigned)btn;
    3470:	e5 e1       	ldi	r30, 0x15	; 21
    3472:	f9 e2       	ldi	r31, 0x29	; 41
    3474:	60 95       	com	r22
    3476:	80 81       	ld	r24, Z
    3478:	68 23       	and	r22, r24
    347a:	60 83       	st	Z, r22
	// Use mouse move routine
	return udi_hid_mouse_move(0, 1);
    347c:	61 e0       	ldi	r22, 0x01	; 1
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	cb cf       	rjmp	.-106    	; 0x3418 <udi_hid_mouse_move>
}
    3482:	08 95       	ret

00003484 <udi_hid_mouse_report_sent>:
{
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
    3484:	10 92 14 29 	sts	0x2914, r1	; 0x802914 <udi_hid_mouse_report_trans_ongoing>
	if (udi_hid_mouse_b_report_valid) {
    3488:	80 91 19 29 	lds	r24, 0x2919	; 0x802919 <udi_hid_mouse_b_report_valid>
    348c:	81 11       	cpse	r24, r1
		// Send new valid report
		udi_hid_mouse_send_report();
    348e:	95 cf       	rjmp	.-214    	; 0x33ba <udi_hid_mouse_send_report>
    3490:	08 95       	ret

00003492 <udi_hid_mouse_moveScroll>:
//--------------------------------------------
//------ Interface for application

bool udi_hid_mouse_moveScroll(int8_t pos)
{
	return udi_hid_mouse_move(pos, 3);
    3492:	63 e0       	ldi	r22, 0x03	; 3
    3494:	c1 cf       	rjmp	.-126    	; 0x3418 <udi_hid_mouse_move>
}
    3496:	08 95       	ret

00003498 <udi_hid_mouse_moveY>:

bool udi_hid_mouse_moveY(int8_t pos_y)
{
	return udi_hid_mouse_move(pos_y, 2);
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	be cf       	rjmp	.-132    	; 0x3418 <udi_hid_mouse_move>
}
    349c:	08 95       	ret

0000349e <udi_hid_mouse_moveX>:

bool udi_hid_mouse_moveX(int8_t pos_x)
{
	return udi_hid_mouse_move(pos_x, 1);
    349e:	61 e0       	ldi	r22, 0x01	; 1
    34a0:	bb cf       	rjmp	.-138    	; 0x3418 <udi_hid_mouse_move>
}
    34a2:	08 95       	ret

000034a4 <udi_hid_mouse_btnmiddle>:

bool udi_hid_mouse_btnmiddle(bool b_state)
{
	return udi_hid_mouse_btn(b_state, 0x04);
    34a4:	64 e0       	ldi	r22, 0x04	; 4
    34a6:	dc cf       	rjmp	.-72     	; 0x3460 <udi_hid_mouse_btn>
}
    34a8:	08 95       	ret

000034aa <udi_hid_mouse_btnright>:

bool udi_hid_mouse_btnright(bool b_state)
{
	return udi_hid_mouse_btn(b_state, 0x02);
    34aa:	62 e0       	ldi	r22, 0x02	; 2
    34ac:	d9 cf       	rjmp	.-78     	; 0x3460 <udi_hid_mouse_btn>
}
    34ae:	08 95       	ret

000034b0 <udi_hid_mouse_btnleft>:

bool udi_hid_mouse_btnleft(bool b_state)
{
	return udi_hid_mouse_btn(b_state, 0x01);
    34b0:	61 e0       	ldi	r22, 0x01	; 1
    34b2:	d6 cf       	rjmp	.-84     	; 0x3460 <udi_hid_mouse_btn>
}
    34b4:	08 95       	ret

000034b6 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	dc 01       	movw	r26, r24
    34bc:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    34be:	90 91 39 2a 	lds	r25, 0x2A39	; 0x802a39 <udd_g_ctrlreq>
    34c2:	99 23       	and	r25, r25
    34c4:	0c f0       	brlt	.+2      	; 0x34c8 <udi_hid_setup+0x12>
    34c6:	63 c0       	rjmp	.+198    	; 0x358e <udi_hid_setup+0xd8>
    34c8:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    34ca:	09 f0       	breq	.+2      	; 0x34ce <udi_hid_setup+0x18>
    34cc:	45 c0       	rjmp	.+138    	; 0x3558 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    34ce:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    34d2:	86 30       	cpi	r24, 0x06	; 6
    34d4:	09 f0       	breq	.+2      	; 0x34d8 <udi_hid_setup+0x22>
    34d6:	40 c0       	rjmp	.+128    	; 0x3558 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    34d8:	72 d1       	rcall	.+740    	; 0x37be <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    34da:	dc 01       	movw	r26, r24
    34dc:	1a 96       	adiw	r26, 0x0a	; 10
    34de:	2c 91       	ld	r18, X
    34e0:	1a 97       	sbiw	r26, 0x0a	; 10
    34e2:	21 32       	cpi	r18, 0x21	; 33
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <udi_hid_setup+0x32>
    34e6:	72 c0       	rjmp	.+228    	; 0x35cc <udi_hid_setup+0x116>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    34e8:	20 91 3c 2a 	lds	r18, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	21 32       	cpi	r18, 0x21	; 33
    34f0:	31 05       	cpc	r19, r1
    34f2:	b1 f4       	brne	.+44     	; 0x3520 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    34f4:	9c 01       	movw	r18, r24
    34f6:	27 5f       	subi	r18, 0xF7	; 247
    34f8:	3f 4f       	sbci	r19, 0xFF	; 255
    34fa:	20 93 41 2a 	sts	0x2A41, r18	; 0x802a41 <udd_g_ctrlreq+0x8>
    34fe:	30 93 42 2a 	sts	0x2A42, r19	; 0x802a42 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    3502:	e9 e3       	ldi	r30, 0x39	; 57
    3504:	fa e2       	ldi	r31, 0x2A	; 42
    3506:	19 96       	adiw	r26, 0x09	; 9
    3508:	8c 91       	ld	r24, X
    350a:	26 81       	ldd	r18, Z+6	; 0x06
    350c:	37 81       	ldd	r19, Z+7	; 0x07
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	28 17       	cp	r18, r24
    3512:	39 07       	cpc	r19, r25
    3514:	08 f4       	brcc	.+2      	; 0x3518 <udi_hid_setup+0x62>
    3516:	c9 01       	movw	r24, r18
    3518:	82 87       	std	Z+10, r24	; 0x0a
    351a:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	63 c0       	rjmp	.+198    	; 0x35e6 <udi_hid_setup+0x130>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    3520:	fc 01       	movw	r30, r24
    3522:	47 85       	ldd	r20, Z+15	; 0x0f
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	42 17       	cp	r20, r18
    3528:	53 07       	cpc	r21, r19
    352a:	09 f0       	breq	.+2      	; 0x352e <udi_hid_setup+0x78>
    352c:	51 c0       	rjmp	.+162    	; 0x35d0 <udi_hid_setup+0x11a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    352e:	c0 93 41 2a 	sts	0x2A41, r28	; 0x802a41 <udd_g_ctrlreq+0x8>
    3532:	d0 93 42 2a 	sts	0x2A42, r29	; 0x802a42 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    3536:	e9 e3       	ldi	r30, 0x39	; 57
    3538:	fa e2       	ldi	r31, 0x2A	; 42
    353a:	26 81       	ldd	r18, Z+6	; 0x06
    353c:	37 81       	ldd	r19, Z+7	; 0x07
    353e:	dc 01       	movw	r26, r24
    3540:	50 96       	adiw	r26, 0x10	; 16
    3542:	8d 91       	ld	r24, X+
    3544:	9c 91       	ld	r25, X
    3546:	51 97       	sbiw	r26, 0x11	; 17
    3548:	28 17       	cp	r18, r24
    354a:	39 07       	cpc	r19, r25
    354c:	08 f4       	brcc	.+2      	; 0x3550 <udi_hid_setup+0x9a>
    354e:	c9 01       	movw	r24, r18
    3550:	82 87       	std	Z+10, r24	; 0x0a
    3552:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	47 c0       	rjmp	.+142    	; 0x35e6 <udi_hid_setup+0x130>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3558:	90 32       	cpi	r25, 0x20	; 32
    355a:	e1 f5       	brne	.+120    	; 0x35d4 <udi_hid_setup+0x11e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    355c:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    3560:	82 30       	cpi	r24, 0x02	; 2
    3562:	19 f0       	breq	.+6      	; 0x356a <udi_hid_setup+0xb4>
    3564:	83 30       	cpi	r24, 0x03	; 3
    3566:	51 f0       	breq	.+20     	; 0x357c <udi_hid_setup+0xc6>
    3568:	37 c0       	rjmp	.+110    	; 0x35d8 <udi_hid_setup+0x122>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    356a:	e9 e3       	ldi	r30, 0x39	; 57
    356c:	fa e2       	ldi	r31, 0x2A	; 42
    356e:	a0 87       	std	Z+8, r26	; 0x08
    3570:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	82 87       	std	Z+10, r24	; 0x0a
    3578:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    357a:	35 c0       	rjmp	.+106    	; 0x35e6 <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    357c:	e9 e3       	ldi	r30, 0x39	; 57
    357e:	fa e2       	ldi	r31, 0x2A	; 42
    3580:	60 87       	std	Z+8, r22	; 0x08
    3582:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	82 87       	std	Z+10, r24	; 0x0a
    358a:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    358c:	2c c0       	rjmp	.+88     	; 0x35e6 <udi_hid_setup+0x130>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    358e:	90 76       	andi	r25, 0x60	; 96
    3590:	90 32       	cpi	r25, 0x20	; 32
    3592:	21 f5       	brne	.+72     	; 0x35dc <udi_hid_setup+0x126>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    3594:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    3598:	8a 30       	cpi	r24, 0x0A	; 10
    359a:	39 f0       	breq	.+14     	; 0x35aa <udi_hid_setup+0xf4>
    359c:	8b 30       	cpi	r24, 0x0B	; 11
    359e:	51 f0       	breq	.+20     	; 0x35b4 <udi_hid_setup+0xfe>
    35a0:	89 30       	cpi	r24, 0x09	; 9
    35a2:	f1 f4       	brne	.+60     	; 0x35e0 <udi_hid_setup+0x12a>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
    35a4:	f9 01       	movw	r30, r18
    35a6:	19 95       	eicall
    35a8:	1e c0       	rjmp	.+60     	; 0x35e6 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    35aa:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    35ae:	8c 93       	st	X, r24
				return true;
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	19 c0       	rjmp	.+50     	; 0x35e6 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    35b4:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    35b8:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    35bc:	89 2b       	or	r24, r25
    35be:	91 f4       	brne	.+36     	; 0x35e4 <udi_hid_setup+0x12e>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    35c0:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    35c4:	db 01       	movw	r26, r22
    35c6:	8c 93       	st	X, r24
				return true;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	0d c0       	rjmp	.+26     	; 0x35e6 <udi_hid_setup+0x130>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	0b c0       	rjmp	.+22     	; 0x35e6 <udi_hid_setup+0x130>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <udi_hid_setup+0x130>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	07 c0       	rjmp	.+14     	; 0x35e6 <udi_hid_setup+0x130>
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	05 c0       	rjmp	.+10     	; 0x35e6 <udi_hid_setup+0x130>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	03 c0       	rjmp	.+6      	; 0x35e6 <udi_hid_setup+0x130>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	01 c0       	rjmp	.+2      	; 0x35e6 <udi_hid_setup+0x130>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    35e4:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	08 95       	ret

000035ec <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    35ec:	e0 91 21 29 	lds	r30, 0x2921	; 0x802921 <udc_ptr_conf>
    35f0:	f0 91 22 29 	lds	r31, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    35f4:	01 90       	ld	r0, Z+
    35f6:	f0 81       	ld	r31, Z
    35f8:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    35fa:	22 81       	ldd	r18, Z+2	; 0x02
    35fc:	33 81       	ldd	r19, Z+3	; 0x03
    35fe:	2e 0f       	add	r18, r30
    3600:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3602:	fc 01       	movw	r30, r24
    3604:	40 81       	ld	r20, Z
    3606:	e4 0f       	add	r30, r20
    3608:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    360a:	e2 17       	cp	r30, r18
    360c:	f3 07       	cpc	r31, r19
    360e:	a0 f4       	brcc	.+40     	; 0x3638 <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3610:	81 81       	ldd	r24, Z+1	; 0x01
    3612:	84 30       	cpi	r24, 0x04	; 4
    3614:	a1 f0       	breq	.+40     	; 0x363e <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3616:	86 13       	cpse	r24, r22
    3618:	06 c0       	rjmp	.+12     	; 0x3626 <udc_next_desc_in_iface+0x3a>
    361a:	14 c0       	rjmp	.+40     	; 0x3644 <udc_next_desc_in_iface+0x58>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    361c:	81 81       	ldd	r24, Z+1	; 0x01
    361e:	84 30       	cpi	r24, 0x04	; 4
    3620:	a1 f0       	breq	.+40     	; 0x364a <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3622:	86 17       	cp	r24, r22
    3624:	a9 f0       	breq	.+42     	; 0x3650 <udc_next_desc_in_iface+0x64>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3626:	80 81       	ld	r24, Z
    3628:	e8 0f       	add	r30, r24
    362a:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    362c:	e2 17       	cp	r30, r18
    362e:	f3 07       	cpc	r31, r19
    3630:	a8 f3       	brcs	.-22     	; 0x361c <udc_next_desc_in_iface+0x30>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	08 95       	ret
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	08 95       	ret
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	08 95       	ret
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3644:	8e 2f       	mov	r24, r30
    3646:	9f 2f       	mov	r25, r31
    3648:	08 95       	ret
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	08 95       	ret
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3650:	8e 2f       	mov	r24, r30
    3652:	9f 2f       	mov	r25, r31
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
    3654:	08 95       	ret

00003656 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3656:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    365a:	8f 77       	andi	r24, 0x7F	; 127
    365c:	0c 94 0d 13 	jmp	0x261a	; 0x261a <udd_set_address>
    3660:	08 95       	ret

00003662 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3662:	90 91 23 29 	lds	r25, 0x2923	; 0x802923 <udc_num_configuration>
    3666:	99 23       	and	r25, r25
    3668:	81 f1       	breq	.+96     	; 0x36ca <udc_update_iface_desc+0x68>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    366a:	e0 91 21 29 	lds	r30, 0x2921	; 0x802921 <udc_ptr_conf>
    366e:	f0 91 22 29 	lds	r31, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3672:	01 90       	ld	r0, Z+
    3674:	f0 81       	ld	r31, Z
    3676:	e0 2d       	mov	r30, r0
    3678:	94 81       	ldd	r25, Z+4	; 0x04
    367a:	89 17       	cp	r24, r25
    367c:	40 f5       	brcc	.+80     	; 0x36ce <udc_update_iface_desc+0x6c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    367e:	e0 93 1f 29 	sts	0x291F, r30	; 0x80291f <udc_ptr_iface>
    3682:	f0 93 20 29 	sts	0x2920, r31	; 0x802920 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3686:	22 81       	ldd	r18, Z+2	; 0x02
    3688:	33 81       	ldd	r19, Z+3	; 0x03
    368a:	2e 0f       	add	r18, r30
    368c:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    368e:	e2 17       	cp	r30, r18
    3690:	f3 07       	cpc	r31, r19
    3692:	f8 f4       	brcc	.+62     	; 0x36d2 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3694:	91 81       	ldd	r25, Z+1	; 0x01
    3696:	94 30       	cpi	r25, 0x04	; 4
    3698:	61 f4       	brne	.+24     	; 0x36b2 <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    369a:	92 81       	ldd	r25, Z+2	; 0x02
    369c:	89 13       	cpse	r24, r25
    369e:	09 c0       	rjmp	.+18     	; 0x36b2 <udc_update_iface_desc+0x50>
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	96 13       	cpse	r25, r22
    36a4:	06 c0       	rjmp	.+12     	; 0x36b2 <udc_update_iface_desc+0x50>
    36a6:	e0 93 1f 29 	sts	0x291F, r30	; 0x80291f <udc_ptr_iface>
    36aa:	f0 93 20 29 	sts	0x2920, r31	; 0x802920 <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    36b2:	90 81       	ld	r25, Z
    36b4:	e9 0f       	add	r30, r25
    36b6:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    36b8:	e2 17       	cp	r30, r18
    36ba:	f3 07       	cpc	r31, r19
    36bc:	58 f3       	brcs	.-42     	; 0x3694 <udc_update_iface_desc+0x32>
    36be:	e0 93 1f 29 	sts	0x291F, r30	; 0x80291f <udc_ptr_iface>
    36c2:	f0 93 20 29 	sts	0x2920, r31	; 0x802920 <udc_ptr_iface+0x1>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	08 95       	ret
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	08 95       	ret
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    36d2:	80 e0       	ldi	r24, 0x00	; 0
}
    36d4:	08 95       	ret

000036d6 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	be df       	rcall	.-132    	; 0x3662 <udc_update_iface_desc>
    36e6:	18 2f       	mov	r17, r24
    36e8:	88 23       	and	r24, r24
    36ea:	79 f1       	breq	.+94     	; 0x374a <udc_iface_disable+0x74>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    36ec:	a0 91 21 29 	lds	r26, 0x2921	; 0x802921 <udc_ptr_conf>
    36f0:	b0 91 22 29 	lds	r27, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    36f4:	ec 2f       	mov	r30, r28
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	12 96       	adiw	r26, 0x02	; 2
    36fe:	8d 91       	ld	r24, X+
    3700:	9c 91       	ld	r25, X
    3702:	13 97       	sbiw	r26, 0x03	; 3
    3704:	e8 0f       	add	r30, r24
    3706:	f9 1f       	adc	r31, r25
    3708:	e0 80       	ld	r14, Z
    370a:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    370c:	d7 01       	movw	r26, r14
    370e:	16 96       	adiw	r26, 0x06	; 6
    3710:	ed 91       	ld	r30, X+
    3712:	fc 91       	ld	r31, X
    3714:	17 97       	sbiw	r26, 0x07	; 7
    3716:	19 95       	eicall
    3718:	68 2f       	mov	r22, r24
    371a:	8c 2f       	mov	r24, r28
    371c:	a2 df       	rcall	.-188    	; 0x3662 <udc_update_iface_desc>
    371e:	18 2f       	mov	r17, r24
    3720:	88 23       	and	r24, r24
    3722:	99 f0       	breq	.+38     	; 0x374a <udc_iface_disable+0x74>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3724:	c0 91 1f 29 	lds	r28, 0x291F	; 0x80291f <udc_ptr_iface>
    3728:	d0 91 20 29 	lds	r29, 0x2920	; 0x802920 <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    372c:	65 e0       	ldi	r22, 0x05	; 5
    372e:	ce 01       	movw	r24, r28
    3730:	5d df       	rcall	.-326    	; 0x35ec <udc_next_desc_in_iface>
    3732:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3734:	89 2b       	or	r24, r25
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3736:	19 f0       	breq	.+6      	; 0x373e <udc_iface_disable+0x68>
    3738:	8a 81       	ldd	r24, Y+2	; 0x02
    373a:	58 d9       	rcall	.-3408   	; 0x29ec <udd_ep_free>
		}
    373c:	f7 cf       	rjmp	.-18     	; 0x372c <udc_iface_disable+0x56>
	}
#endif

	// Disable interface
	udi_api->disable();
    373e:	d7 01       	movw	r26, r14
    3740:	12 96       	adiw	r26, 0x02	; 2
    3742:	ed 91       	ld	r30, X+
    3744:	fc 91       	ld	r31, X
    3746:	13 97       	sbiw	r26, 0x03	; 3
    3748:	19 95       	eicall
	return true;
}
    374a:	81 2f       	mov	r24, r17
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	1f 91       	pop	r17
    3752:	ff 90       	pop	r15
    3754:	ef 90       	pop	r14
    3756:	08 95       	ret

00003758 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3758:	1f 93       	push	r17
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3760:	80 df       	rcall	.-256    	; 0x3662 <udc_update_iface_desc>
    3762:	88 23       	and	r24, r24
    3764:	41 f1       	breq	.+80     	; 0x37b6 <udc_iface_enable+0x5e>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3766:	c0 91 1f 29 	lds	r28, 0x291F	; 0x80291f <udc_ptr_iface>
    376a:	d0 91 20 29 	lds	r29, 0x2920	; 0x802920 <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    376e:	65 e0       	ldi	r22, 0x05	; 5
    3770:	ce 01       	movw	r24, r28
    3772:	3c df       	rcall	.-392    	; 0x35ec <udc_next_desc_in_iface>
    3774:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3776:	89 2b       	or	r24, r25
    3778:	49 f0       	breq	.+18     	; 0x378c <udc_iface_enable+0x34>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    377a:	4c 81       	ldd	r20, Y+4	; 0x04
    377c:	5d 81       	ldd	r21, Y+5	; 0x05
    377e:	6b 81       	ldd	r22, Y+3	; 0x03
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	0e 94 1a 13 	call	0x2634	; 0x2634 <udd_ep_alloc>
    3786:	81 11       	cpse	r24, r1
    3788:	f2 cf       	rjmp	.-28     	; 0x376e <udc_iface_enable+0x16>
    378a:	15 c0       	rjmp	.+42     	; 0x37b6 <udc_iface_enable+0x5e>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    378c:	a0 91 21 29 	lds	r26, 0x2921	; 0x802921 <udc_ptr_conf>
    3790:	b0 91 22 29 	lds	r27, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3794:	e1 2f       	mov	r30, r17
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	ee 0f       	add	r30, r30
    379a:	ff 1f       	adc	r31, r31
    379c:	12 96       	adiw	r26, 0x02	; 2
    379e:	8d 91       	ld	r24, X+
    37a0:	9c 91       	ld	r25, X
    37a2:	13 97       	sbiw	r26, 0x03	; 3
    37a4:	e8 0f       	add	r30, r24
    37a6:	f9 1f       	adc	r31, r25
    37a8:	01 90       	ld	r0, Z+
    37aa:	f0 81       	ld	r31, Z
    37ac:	e0 2d       	mov	r30, r0
    37ae:	01 90       	ld	r0, Z+
    37b0:	f0 81       	ld	r31, Z
    37b2:	e0 2d       	mov	r30, r0
    37b4:	19 95       	eicall
}
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	1f 91       	pop	r17
    37bc:	08 95       	ret

000037be <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    37be:	80 91 1f 29 	lds	r24, 0x291F	; 0x80291f <udc_ptr_iface>
    37c2:	90 91 20 29 	lds	r25, 0x2920	; 0x802920 <udc_ptr_iface+0x1>
    37c6:	08 95       	ret

000037c8 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    37c8:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <udd_enable>
    37cc:	08 95       	ret

000037ce <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    37ce:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    37d0:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <udc_num_configuration>
    37d4:	88 23       	and	r24, r24
    37d6:	c1 f0       	breq	.+48     	; 0x3808 <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    37d8:	e0 91 21 29 	lds	r30, 0x2921	; 0x802921 <udc_ptr_conf>
    37dc:	f0 91 22 29 	lds	r31, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    37e0:	01 90       	ld	r0, Z+
    37e2:	f0 81       	ld	r31, Z
    37e4:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    37e6:	84 81       	ldd	r24, Z+4	; 0x04
    37e8:	88 23       	and	r24, r24
    37ea:	71 f0       	breq	.+28     	; 0x3808 <udc_reset+0x3a>
    37ec:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    37ee:	8c 2f       	mov	r24, r28
    37f0:	72 df       	rcall	.-284    	; 0x36d6 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    37f2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    37f4:	e0 91 21 29 	lds	r30, 0x2921	; 0x802921 <udc_ptr_conf>
    37f8:	f0 91 22 29 	lds	r31, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    37fc:	01 90       	ld	r0, Z+
    37fe:	f0 81       	ld	r31, Z
    3800:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3802:	84 81       	ldd	r24, Z+4	; 0x04
    3804:	c8 17       	cp	r28, r24
    3806:	98 f3       	brcs	.-26     	; 0x37ee <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3808:	10 92 23 29 	sts	0x2923, r1	; 0x802923 <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    380c:	10 92 24 29 	sts	0x2924, r1	; 0x802924 <udc_device_status>
    3810:	10 92 25 29 	sts	0x2925, r1	; 0x802925 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3814:	cf 91       	pop	r28
    3816:	08 95       	ret

00003818 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    3818:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <udd_disable>
	udc_reset();
    381c:	d8 cf       	rjmp	.-80     	; 0x37ce <udc_reset>
    381e:	08 95       	ret

00003820 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3820:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3822:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <udc_num_configuration>
    3826:	88 23       	and	r24, r24
    3828:	49 f1       	breq	.+82     	; 0x387c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    382a:	a0 91 21 29 	lds	r26, 0x2921	; 0x802921 <udc_ptr_conf>
    382e:	b0 91 22 29 	lds	r27, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3832:	ed 91       	ld	r30, X+
    3834:	fc 91       	ld	r31, X
    3836:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3838:	84 81       	ldd	r24, Z+4	; 0x04
    383a:	88 23       	and	r24, r24
    383c:	f9 f0       	breq	.+62     	; 0x387c <udc_sof_notify+0x5c>
    383e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3840:	ec 2f       	mov	r30, r28
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	ee 0f       	add	r30, r30
    3846:	ff 1f       	adc	r31, r31
    3848:	12 96       	adiw	r26, 0x02	; 2
    384a:	8d 91       	ld	r24, X+
    384c:	9c 91       	ld	r25, X
    384e:	13 97       	sbiw	r26, 0x03	; 3
    3850:	e8 0f       	add	r30, r24
    3852:	f9 1f       	adc	r31, r25
    3854:	01 90       	ld	r0, Z+
    3856:	f0 81       	ld	r31, Z
    3858:	e0 2d       	mov	r30, r0
    385a:	00 84       	ldd	r0, Z+8	; 0x08
    385c:	f1 85       	ldd	r31, Z+9	; 0x09
    385e:	e0 2d       	mov	r30, r0
    3860:	30 97       	sbiw	r30, 0x00	; 0
    3862:	09 f0       	breq	.+2      	; 0x3866 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3864:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3866:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3868:	a0 91 21 29 	lds	r26, 0x2921	; 0x802921 <udc_ptr_conf>
    386c:	b0 91 22 29 	lds	r27, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3870:	ed 91       	ld	r30, X+
    3872:	fc 91       	ld	r31, X
    3874:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3876:	84 81       	ldd	r24, Z+4	; 0x04
    3878:	c8 17       	cp	r28, r24
    387a:	10 f3       	brcs	.-60     	; 0x3840 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    387c:	cf 91       	pop	r28
    387e:	08 95       	ret

00003880 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3888:	e9 e3       	ldi	r30, 0x39	; 57
    388a:	fa e2       	ldi	r31, 0x2A	; 42
    388c:	12 86       	std	Z+10, r1	; 0x0a
    388e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3890:	14 86       	std	Z+12, r1	; 0x0c
    3892:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3894:	16 86       	std	Z+14, r1	; 0x0e
    3896:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3898:	80 81       	ld	r24, Z
    389a:	88 23       	and	r24, r24
    389c:	0c f0       	brlt	.+2      	; 0x38a0 <udc_process_setup+0x20>
    389e:	3d c2       	rjmp	.+1146   	; 0x3d1a <udc_process_setup+0x49a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    38a0:	20 91 3f 2a 	lds	r18, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    38a4:	30 91 40 2a 	lds	r19, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    38a8:	21 15       	cp	r18, r1
    38aa:	31 05       	cpc	r19, r1
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <udc_process_setup+0x30>
    38ae:	3a c2       	rjmp	.+1140   	; 0x3d24 <udc_process_setup+0x4a4>
    38b0:	18 c2       	rjmp	.+1072   	; 0x3ce2 <udc_process_setup+0x462>
    38b2:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <udc_process_setup+0x38>
    38b6:	97 c0       	rjmp	.+302    	; 0x39e6 <udc_process_setup+0x166>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    38b8:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    38bc:	96 30       	cpi	r25, 0x06	; 6
    38be:	81 f0       	breq	.+32     	; 0x38e0 <udc_process_setup+0x60>
    38c0:	98 30       	cpi	r25, 0x08	; 8
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <udc_process_setup+0x46>
    38c4:	85 c0       	rjmp	.+266    	; 0x39d0 <udc_process_setup+0x150>
    38c6:	91 11       	cpse	r25, r1
    38c8:	8e c0       	rjmp	.+284    	; 0x39e6 <udc_process_setup+0x166>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    38ca:	22 30       	cpi	r18, 0x02	; 2
    38cc:	31 05       	cpc	r19, r1
    38ce:	09 f0       	breq	.+2      	; 0x38d2 <udc_process_setup+0x52>
    38d0:	0a c2       	rjmp	.+1044   	; 0x3ce6 <udc_process_setup+0x466>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    38d2:	62 e0       	ldi	r22, 0x02	; 2
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	84 e2       	ldi	r24, 0x24	; 36
    38d8:	99 e2       	ldi	r25, 0x29	; 41
    38da:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
    38de:	2b c2       	rjmp	.+1110   	; 0x3d36 <udc_process_setup+0x4b6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    38e0:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    38e4:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    38e8:	29 2f       	mov	r18, r25
    38ea:	33 27       	eor	r19, r19
    38ec:	22 30       	cpi	r18, 0x02	; 2
    38ee:	31 05       	cpc	r19, r1
    38f0:	89 f0       	breq	.+34     	; 0x3914 <udc_process_setup+0x94>
    38f2:	23 30       	cpi	r18, 0x03	; 3
    38f4:	31 05       	cpc	r19, r1
    38f6:	79 f1       	breq	.+94     	; 0x3956 <udc_process_setup+0xd6>
    38f8:	21 30       	cpi	r18, 0x01	; 1
    38fa:	31 05       	cpc	r19, r1
    38fc:	09 f0       	breq	.+2      	; 0x3900 <udc_process_setup+0x80>
    38fe:	a6 c1       	rjmp	.+844    	; 0x3c4c <udc_process_setup+0x3cc>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3900:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    3904:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3908:	dc 01       	movw	r26, r24
    390a:	6c 91       	ld	r22, X
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
    3912:	4f c0       	rjmp	.+158    	; 0x39b2 <udc_process_setup+0x132>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3914:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    3918:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_start+0x1>
    391c:	21 89       	ldd	r18, Z+17	; 0x11
    391e:	82 17       	cp	r24, r18
    3920:	08 f0       	brcs	.+2      	; 0x3924 <udc_process_setup+0xa4>
    3922:	e3 c1       	rjmp	.+966    	; 0x3cea <udc_process_setup+0x46a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3924:	99 27       	eor	r25, r25
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <__data_start+0x2>
    3932:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <__data_start+0x3>
    3936:	e8 0f       	add	r30, r24
    3938:	f9 1f       	adc	r31, r25
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    393e:	fc 01       	movw	r30, r24
    3940:	62 81       	ldd	r22, Z+2	; 0x02
    3942:	73 81       	ldd	r23, Z+3	; 0x03
    3944:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3948:	e0 91 41 2a 	lds	r30, 0x2A41	; 0x802a41 <udd_g_ctrlreq+0x8>
    394c:	f0 91 42 2a 	lds	r31, 0x2A42	; 0x802a42 <udd_g_ctrlreq+0x9>
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	81 83       	std	Z+1, r24	; 0x01
    3954:	2e c0       	rjmp	.+92     	; 0x39b2 <udc_process_setup+0x132>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3956:	99 27       	eor	r25, r25
    3958:	81 30       	cpi	r24, 0x01	; 1
    395a:	91 05       	cpc	r25, r1
    395c:	99 f0       	breq	.+38     	; 0x3984 <udc_process_setup+0x104>
    395e:	58 f0       	brcs	.+22     	; 0x3976 <udc_process_setup+0xf6>
    3960:	82 30       	cpi	r24, 0x02	; 2
    3962:	91 05       	cpc	r25, r1
    3964:	09 f4       	brne	.+2      	; 0x3968 <udc_process_setup+0xe8>
    3966:	e3 c1       	rjmp	.+966    	; 0x3d2e <udc_process_setup+0x4ae>
    3968:	03 97       	sbiw	r24, 0x03	; 3
    396a:	09 f0       	breq	.+2      	; 0x396e <udc_process_setup+0xee>
    396c:	78 c1       	rjmp	.+752    	; 0x3c5e <udc_process_setup+0x3de>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    396e:	36 e0       	ldi	r19, 0x06	; 6
		str = udc_get_string_serial_name();
    3970:	eb eb       	ldi	r30, 0xBB	; 187
    3972:	f5 e2       	ldi	r31, 0x25	; 37
    3974:	0a c0       	rjmp	.+20     	; 0x398a <udc_process_setup+0x10a>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3976:	64 e0       	ldi	r22, 0x04	; 4
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	8c e0       	ldi	r24, 0x0C	; 12
    397c:	92 e2       	ldi	r25, 0x22	; 34
    397e:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
    3982:	17 c0       	rjmp	.+46     	; 0x39b2 <udc_process_setup+0x132>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    3984:	ee ef       	ldi	r30, 0xFE	; 254
    3986:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3988:	3d e0       	ldi	r19, 0x0D	; 13
    398a:	aa ec       	ldi	r26, 0xCA	; 202
    398c:	b1 e2       	ldi	r27, 0x21	; 33
    398e:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3990:	81 91       	ld	r24, Z+
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	8d 93       	st	X+, r24
    3996:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3998:	2f 5f       	subi	r18, 0xFF	; 255
    399a:	23 17       	cp	r18, r19
    399c:	c8 f3       	brcs	.-14     	; 0x3990 <udc_process_setup+0x110>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    399e:	63 2f       	mov	r22, r19
    39a0:	66 0f       	add	r22, r22
    39a2:	6e 5f       	subi	r22, 0xFE	; 254
    39a4:	60 93 c8 21 	sts	0x21C8, r22	; 0x8021c8 <udc_string_desc>
		udd_set_setup_payload(
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	88 ec       	ldi	r24, 0xC8	; 200
    39ac:	91 e2       	ldi	r25, 0x21	; 33
    39ae:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    39b2:	e9 e3       	ldi	r30, 0x39	; 57
    39b4:	fa e2       	ldi	r31, 0x2A	; 42
    39b6:	86 81       	ldd	r24, Z+6	; 0x06
    39b8:	97 81       	ldd	r25, Z+7	; 0x07
    39ba:	22 85       	ldd	r18, Z+10	; 0x0a
    39bc:	33 85       	ldd	r19, Z+11	; 0x0b
    39be:	82 17       	cp	r24, r18
    39c0:	93 07       	cpc	r25, r19
    39c2:	08 f0       	brcs	.+2      	; 0x39c6 <udc_process_setup+0x146>
    39c4:	b8 c1       	rjmp	.+880    	; 0x3d36 <udc_process_setup+0x4b6>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    39c6:	80 93 43 2a 	sts	0x2A43, r24	; 0x802a43 <udd_g_ctrlreq+0xa>
    39ca:	90 93 44 2a 	sts	0x2A44, r25	; 0x802a44 <udd_g_ctrlreq+0xb>
    39ce:	b3 c1       	rjmp	.+870    	; 0x3d36 <udc_process_setup+0x4b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    39d0:	21 30       	cpi	r18, 0x01	; 1
    39d2:	31 05       	cpc	r19, r1
    39d4:	09 f0       	breq	.+2      	; 0x39d8 <udc_process_setup+0x158>
    39d6:	8b c1       	rjmp	.+790    	; 0x3cee <udc_process_setup+0x46e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    39d8:	61 e0       	ldi	r22, 0x01	; 1
    39da:	70 e0       	ldi	r23, 0x00	; 0
    39dc:	83 e2       	ldi	r24, 0x23	; 35
    39de:	99 e2       	ldi	r25, 0x29	; 41
    39e0:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
    39e4:	a8 c1       	rjmp	.+848    	; 0x3d36 <udc_process_setup+0x4b6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    39e6:	81 30       	cpi	r24, 0x01	; 1
    39e8:	e9 f5       	brne	.+122    	; 0x3a64 <udc_process_setup+0x1e4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    39ea:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    39ee:	9a 30       	cpi	r25, 0x0A	; 10
    39f0:	c9 f5       	brne	.+114    	; 0x3a64 <udc_process_setup+0x1e4>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    39f2:	21 30       	cpi	r18, 0x01	; 1
    39f4:	31 05       	cpc	r19, r1
    39f6:	09 f0       	breq	.+2      	; 0x39fa <udc_process_setup+0x17a>
    39f8:	38 c1       	rjmp	.+624    	; 0x3c6a <udc_process_setup+0x3ea>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    39fa:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <udc_num_configuration>
    39fe:	88 23       	and	r24, r24
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <udc_process_setup+0x184>
    3a02:	33 c1       	rjmp	.+614    	; 0x3c6a <udc_process_setup+0x3ea>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3a04:	c0 91 3d 2a 	lds	r28, 0x2A3D	; 0x802a3d <udd_g_ctrlreq+0x4>
    3a08:	d0 91 3e 2a 	lds	r29, 0x2A3E	; 0x802a3e <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3a0c:	00 91 21 29 	lds	r16, 0x2921	; 0x802921 <udc_ptr_conf>
    3a10:	10 91 22 29 	lds	r17, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3a14:	d8 01       	movw	r26, r16
    3a16:	ed 91       	ld	r30, X+
    3a18:	fc 91       	ld	r31, X
    3a1a:	84 81       	ldd	r24, Z+4	; 0x04
    3a1c:	c8 17       	cp	r28, r24
    3a1e:	08 f0       	brcs	.+2      	; 0x3a22 <udc_process_setup+0x1a2>
    3a20:	24 c1       	rjmp	.+584    	; 0x3c6a <udc_process_setup+0x3ea>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	8c 2f       	mov	r24, r28
    3a26:	1d de       	rcall	.-966    	; 0x3662 <udc_update_iface_desc>
    3a28:	88 23       	and	r24, r24
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <udc_process_setup+0x1ae>
    3a2c:	18 c1       	rjmp	.+560    	; 0x3c5e <udc_process_setup+0x3de>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3a2e:	ce 01       	movw	r24, r28
    3a30:	99 27       	eor	r25, r25
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	d8 01       	movw	r26, r16
    3a38:	12 96       	adiw	r26, 0x02	; 2
    3a3a:	ed 91       	ld	r30, X+
    3a3c:	fc 91       	ld	r31, X
    3a3e:	13 97       	sbiw	r26, 0x03	; 3
    3a40:	e8 0f       	add	r30, r24
    3a42:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    3a44:	01 90       	ld	r0, Z+
    3a46:	f0 81       	ld	r31, Z
    3a48:	e0 2d       	mov	r30, r0
    3a4a:	86 81       	ldd	r24, Z+6	; 0x06
    3a4c:	97 81       	ldd	r25, Z+7	; 0x07
    3a4e:	fc 01       	movw	r30, r24
    3a50:	19 95       	eicall
    3a52:	80 93 1e 29 	sts	0x291E, r24	; 0x80291e <udc_iface_setting.4880>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3a56:	61 e0       	ldi	r22, 0x01	; 1
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	8e e1       	ldi	r24, 0x1E	; 30
    3a5c:	99 e2       	ldi	r25, 0x29	; 41
    3a5e:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
    3a62:	69 c1       	rjmp	.+722    	; 0x3d36 <udc_process_setup+0x4b6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3a64:	82 30       	cpi	r24, 0x02	; 2
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <udc_process_setup+0x1ea>
    3a68:	fa c0       	rjmp	.+500    	; 0x3c5e <udc_process_setup+0x3de>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3a6a:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    3a6e:	81 11       	cpse	r24, r1
    3a70:	ef c0       	rjmp	.+478    	; 0x3c50 <udc_process_setup+0x3d0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3a72:	22 30       	cpi	r18, 0x02	; 2
    3a74:	31 05       	cpc	r19, r1
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <udc_process_setup+0x1fa>
    3a78:	3c c1       	rjmp	.+632    	; 0x3cf2 <udc_process_setup+0x472>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3a7a:	80 91 3d 2a 	lds	r24, 0x2A3D	; 0x802a3d <udd_g_ctrlreq+0x4>
    3a7e:	0e 94 98 13 	call	0x2730	; 0x2730 <udd_ep_is_halted>
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	80 93 1c 29 	sts	0x291C, r24	; 0x80291c <udc_ep_status.4821>
    3a88:	90 93 1d 29 	sts	0x291D, r25	; 0x80291d <udc_ep_status.4821+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3a8c:	62 e0       	ldi	r22, 0x02	; 2
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	8c e1       	ldi	r24, 0x1C	; 28
    3a92:	99 e2       	ldi	r25, 0x29	; 41
    3a94:	0e 94 13 13 	call	0x2626	; 0x2626 <udd_set_setup_payload>
    3a98:	4e c1       	rjmp	.+668    	; 0x3d36 <udc_process_setup+0x4b6>
    3a9a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3a9c:	09 f0       	breq	.+2      	; 0x3aa0 <udc_process_setup+0x220>
    3a9e:	84 c0       	rjmp	.+264    	; 0x3ba8 <udc_process_setup+0x328>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3aa0:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    3aa4:	93 30       	cpi	r25, 0x03	; 3
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <udc_process_setup+0x22a>
    3aa8:	d5 c0       	rjmp	.+426    	; 0x3c54 <udc_process_setup+0x3d4>
    3aaa:	18 f4       	brcc	.+6      	; 0x3ab2 <udc_process_setup+0x232>
    3aac:	91 30       	cpi	r25, 0x01	; 1
    3aae:	a1 f0       	breq	.+40     	; 0x3ad8 <udc_process_setup+0x258>
    3ab0:	7b c0       	rjmp	.+246    	; 0x3ba8 <udc_process_setup+0x328>
    3ab2:	95 30       	cpi	r25, 0x05	; 5
    3ab4:	19 f0       	breq	.+6      	; 0x3abc <udc_process_setup+0x23c>
    3ab6:	99 30       	cpi	r25, 0x09	; 9
    3ab8:	39 f1       	breq	.+78     	; 0x3b08 <udc_process_setup+0x288>
    3aba:	76 c0       	rjmp	.+236    	; 0x3ba8 <udc_process_setup+0x328>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3abc:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    3ac0:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    3ac4:	89 2b       	or	r24, r25
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <udc_process_setup+0x24a>
    3ac8:	16 c1       	rjmp	.+556    	; 0x3cf6 <udc_process_setup+0x476>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3aca:	8b e2       	ldi	r24, 0x2B	; 43
    3acc:	9b e1       	ldi	r25, 0x1B	; 27
    3ace:	80 93 45 2a 	sts	0x2A45, r24	; 0x802a45 <udd_g_ctrlreq+0xc>
    3ad2:	90 93 46 2a 	sts	0x2A46, r25	; 0x802a46 <udd_g_ctrlreq+0xd>
    3ad6:	2f c1       	rjmp	.+606    	; 0x3d36 <udc_process_setup+0x4b6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3ad8:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    3adc:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    3ae0:	89 2b       	or	r24, r25
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <udc_process_setup+0x266>
    3ae4:	0a c1       	rjmp	.+532    	; 0x3cfa <udc_process_setup+0x47a>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3ae6:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    3aea:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <udc_process_setup+0x274>
    3af2:	05 c1       	rjmp	.+522    	; 0x3cfe <udc_process_setup+0x47e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3af4:	80 91 24 29 	lds	r24, 0x2924	; 0x802924 <udc_device_status>
    3af8:	90 91 25 29 	lds	r25, 0x2925	; 0x802925 <udc_device_status+0x1>
    3afc:	8d 7f       	andi	r24, 0xFD	; 253
    3afe:	80 93 24 29 	sts	0x2924, r24	; 0x802924 <udc_device_status>
    3b02:	90 93 25 29 	sts	0x2925, r25	; 0x802925 <udc_device_status+0x1>
    3b06:	17 c1       	rjmp	.+558    	; 0x3d36 <udc_process_setup+0x4b6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3b08:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    3b0c:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    3b10:	89 2b       	or	r24, r25
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <udc_process_setup+0x296>
    3b14:	f6 c0       	rjmp	.+492    	; 0x3d02 <udc_process_setup+0x482>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3b16:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_getaddress>
    3b1a:	88 23       	and	r24, r24
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <udc_process_setup+0x2a0>
    3b1e:	9f c0       	rjmp	.+318    	; 0x3c5e <udc_process_setup+0x3de>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3b20:	20 91 3b 2a 	lds	r18, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    3b24:	30 91 3c 2a 	lds	r19, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    3b28:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    3b2a:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    3b2e:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_start+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3b32:	81 89       	ldd	r24, Z+17	; 0x11
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	82 17       	cp	r24, r18
    3b38:	93 07       	cpc	r25, r19
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <udc_process_setup+0x2be>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    3b3c:	90 c0       	rjmp	.+288    	; 0x3c5e <udc_process_setup+0x3de>
    3b3e:	47 de       	rcall	.-882    	; 0x37ce <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3b40:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    3b44:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    3b48:	80 93 23 29 	sts	0x2923, r24	; 0x802923 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    3b4c:	88 23       	and	r24, r24
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <udc_process_setup+0x2d2>
    3b50:	f2 c0       	rjmp	.+484    	; 0x3d36 <udc_process_setup+0x4b6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3b52:	99 27       	eor	r25, r25
    3b54:	81 50       	subi	r24, 0x01	; 1
    3b56:	90 4c       	sbci	r25, 0xC0	; 192
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	88 0f       	add	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <__data_start+0x2>
    3b64:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <__data_start+0x3>
    3b68:	e8 0f       	add	r30, r24
    3b6a:	f9 1f       	adc	r31, r25
    3b6c:	e0 93 21 29 	sts	0x2921, r30	; 0x802921 <udc_ptr_conf>
    3b70:	f0 93 22 29 	sts	0x2922, r31	; 0x802922 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b74:	01 90       	ld	r0, Z+
    3b76:	f0 81       	ld	r31, Z
    3b78:	e0 2d       	mov	r30, r0
    3b7a:	84 81       	ldd	r24, Z+4	; 0x04
    3b7c:	88 23       	and	r24, r24
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <udc_process_setup+0x302>
    3b80:	da c0       	rjmp	.+436    	; 0x3d36 <udc_process_setup+0x4b6>
    3b82:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	8c 2f       	mov	r24, r28
    3b88:	e7 dd       	rcall	.-1074   	; 0x3758 <udc_iface_enable>
    3b8a:	88 23       	and	r24, r24
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <udc_process_setup+0x310>
    3b8e:	67 c0       	rjmp	.+206    	; 0x3c5e <udc_process_setup+0x3de>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3b90:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b92:	e0 91 21 29 	lds	r30, 0x2921	; 0x802921 <udc_ptr_conf>
    3b96:	f0 91 22 29 	lds	r31, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3b9a:	01 90       	ld	r0, Z+
    3b9c:	f0 81       	ld	r31, Z
    3b9e:	e0 2d       	mov	r30, r0
    3ba0:	84 81       	ldd	r24, Z+4	; 0x04
    3ba2:	c8 17       	cp	r28, r24
    3ba4:	78 f3       	brcs	.-34     	; 0x3b84 <udc_process_setup+0x304>
    3ba6:	c7 c0       	rjmp	.+398    	; 0x3d36 <udc_process_setup+0x4b6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3ba8:	81 30       	cpi	r24, 0x01	; 1
    3baa:	e9 f4       	brne	.+58     	; 0x3be6 <udc_process_setup+0x366>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3bac:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    3bb0:	9b 30       	cpi	r25, 0x0B	; 11
    3bb2:	c9 f4       	brne	.+50     	; 0x3be6 <udc_process_setup+0x366>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3bb4:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    3bb8:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    3bbc:	89 2b       	or	r24, r25
    3bbe:	09 f0       	breq	.+2      	; 0x3bc2 <udc_process_setup+0x342>
    3bc0:	54 c0       	rjmp	.+168    	; 0x3c6a <udc_process_setup+0x3ea>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3bc2:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <udc_num_configuration>
    3bc6:	88 23       	and	r24, r24
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <udc_process_setup+0x34c>
    3bca:	4f c0       	rjmp	.+158    	; 0x3c6a <udc_process_setup+0x3ea>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3bcc:	e9 e3       	ldi	r30, 0x39	; 57
    3bce:	fa e2       	ldi	r31, 0x2A	; 42
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3bd0:	c4 81       	ldd	r28, Z+4	; 0x04

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3bd2:	d2 81       	ldd	r29, Z+2	; 0x02
    3bd4:	8c 2f       	mov	r24, r28
    3bd6:	7f dd       	rcall	.-1282   	; 0x36d6 <udc_iface_disable>
    3bd8:	88 23       	and	r24, r24
    3bda:	09 f4       	brne	.+2      	; 0x3bde <udc_process_setup+0x35e>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3bdc:	40 c0       	rjmp	.+128    	; 0x3c5e <udc_process_setup+0x3de>
    3bde:	6d 2f       	mov	r22, r29
    3be0:	8c 2f       	mov	r24, r28
    3be2:	ba dd       	rcall	.-1164   	; 0x3758 <udc_iface_enable>
    3be4:	3a c0       	rjmp	.+116    	; 0x3c5a <udc_process_setup+0x3da>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3be6:	82 30       	cpi	r24, 0x02	; 2
    3be8:	d1 f5       	brne	.+116    	; 0x3c5e <udc_process_setup+0x3de>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3bea:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <udd_g_ctrlreq+0x1>
    3bee:	81 30       	cpi	r24, 0x01	; 1
    3bf0:	19 f0       	breq	.+6      	; 0x3bf8 <udc_process_setup+0x378>
    3bf2:	83 30       	cpi	r24, 0x03	; 3
    3bf4:	a1 f0       	breq	.+40     	; 0x3c1e <udc_process_setup+0x39e>
    3bf6:	30 c0       	rjmp	.+96     	; 0x3c58 <udc_process_setup+0x3d8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3bf8:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    3bfc:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    3c00:	89 2b       	or	r24, r25
    3c02:	09 f0       	breq	.+2      	; 0x3c06 <udc_process_setup+0x386>
    3c04:	80 c0       	rjmp	.+256    	; 0x3d06 <udc_process_setup+0x486>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3c06:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    3c0a:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    3c0e:	89 2b       	or	r24, r25
    3c10:	09 f0       	breq	.+2      	; 0x3c14 <udc_process_setup+0x394>
    3c12:	7b c0       	rjmp	.+246    	; 0x3d0a <udc_process_setup+0x48a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3c14:	80 91 3d 2a 	lds	r24, 0x2A3D	; 0x802a3d <udd_g_ctrlreq+0x4>
    3c18:	0e 94 b3 13 	call	0x2766	; 0x2766 <udd_ep_clear_halt>
    3c1c:	1e c0       	rjmp	.+60     	; 0x3c5a <udc_process_setup+0x3da>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    3c1e:	80 91 3f 2a 	lds	r24, 0x2A3F	; 0x802a3f <udd_g_ctrlreq+0x6>
    3c22:	90 91 40 2a 	lds	r25, 0x2A40	; 0x802a40 <udd_g_ctrlreq+0x7>
    3c26:	89 2b       	or	r24, r25
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <udc_process_setup+0x3ac>
    3c2a:	71 c0       	rjmp	.+226    	; 0x3d0e <udc_process_setup+0x48e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3c2c:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <udd_g_ctrlreq+0x2>
    3c30:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <udd_g_ctrlreq+0x3>
    3c34:	89 2b       	or	r24, r25
    3c36:	09 f0       	breq	.+2      	; 0x3c3a <udc_process_setup+0x3ba>
    3c38:	6c c0       	rjmp	.+216    	; 0x3d12 <udc_process_setup+0x492>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3c3a:	c9 e3       	ldi	r28, 0x39	; 57
    3c3c:	da e2       	ldi	r29, 0x2A	; 42
    3c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c40:	0e 94 a6 14 	call	0x294c	; 0x294c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3c44:	8c 81       	ldd	r24, Y+4	; 0x04
    3c46:	0e 94 12 15 	call	0x2a24	; 0x2a24 <udd_ep_set_halt>
    3c4a:	07 c0       	rjmp	.+14     	; 0x3c5a <udc_process_setup+0x3da>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	05 c0       	rjmp	.+10     	; 0x3c5a <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	03 c0       	rjmp	.+6      	; 0x3c5a <udc_process_setup+0x3da>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	01 c0       	rjmp	.+2      	; 0x3c5a <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    3c58:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	6d c0       	rjmp	.+218    	; 0x3d38 <udc_process_setup+0x4b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3c5e:	80 91 39 2a 	lds	r24, 0x2A39	; 0x802a39 <udd_g_ctrlreq>
    3c62:	8f 71       	andi	r24, 0x1F	; 31
    3c64:	81 30       	cpi	r24, 0x01	; 1
    3c66:	09 f0       	breq	.+2      	; 0x3c6a <udc_process_setup+0x3ea>
    3c68:	56 c0       	rjmp	.+172    	; 0x3d16 <udc_process_setup+0x496>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3c6a:	80 91 23 29 	lds	r24, 0x2923	; 0x802923 <udc_num_configuration>
    3c6e:	88 23       	and	r24, r24
    3c70:	a1 f1       	breq	.+104    	; 0x3cda <udc_process_setup+0x45a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3c72:	c0 91 3d 2a 	lds	r28, 0x2A3D	; 0x802a3d <udd_g_ctrlreq+0x4>
    3c76:	d0 91 3e 2a 	lds	r29, 0x2A3E	; 0x802a3e <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3c7a:	00 91 21 29 	lds	r16, 0x2921	; 0x802921 <udc_ptr_conf>
    3c7e:	10 91 22 29 	lds	r17, 0x2922	; 0x802922 <udc_ptr_conf+0x1>
    3c82:	d8 01       	movw	r26, r16
    3c84:	ed 91       	ld	r30, X+
    3c86:	fc 91       	ld	r31, X
    3c88:	84 81       	ldd	r24, Z+4	; 0x04
    3c8a:	c8 17       	cp	r28, r24
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3c8c:	40 f5       	brcc	.+80     	; 0x3cde <udc_process_setup+0x45e>
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	8c 2f       	mov	r24, r28
    3c92:	e7 dc       	rcall	.-1586   	; 0x3662 <udc_update_iface_desc>
    3c94:	88 23       	and	r24, r24
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <udc_process_setup+0x41a>
    3c98:	4f c0       	rjmp	.+158    	; 0x3d38 <udc_process_setup+0x4b8>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	ff 27       	eor	r31, r31
    3c9e:	cf 01       	movw	r24, r30
    3ca0:	88 0f       	add	r24, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	d8 01       	movw	r26, r16
    3ca6:	12 96       	adiw	r26, 0x02	; 2
    3ca8:	ed 91       	ld	r30, X+
    3caa:	fc 91       	ld	r31, X
    3cac:	13 97       	sbiw	r26, 0x03	; 3
    3cae:	e8 0f       	add	r30, r24
    3cb0:	f9 1f       	adc	r31, r25
    3cb2:	00 81       	ld	r16, Z
    3cb4:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3cb6:	d8 01       	movw	r26, r16
    3cb8:	16 96       	adiw	r26, 0x06	; 6
    3cba:	ed 91       	ld	r30, X+
    3cbc:	fc 91       	ld	r31, X
    3cbe:	17 97       	sbiw	r26, 0x07	; 7
    3cc0:	19 95       	eicall
    3cc2:	68 2f       	mov	r22, r24
    3cc4:	8c 2f       	mov	r24, r28
    3cc6:	cd dc       	rcall	.-1638   	; 0x3662 <udc_update_iface_desc>
    3cc8:	88 23       	and	r24, r24
    3cca:	b1 f1       	breq	.+108    	; 0x3d38 <udc_process_setup+0x4b8>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3ccc:	d8 01       	movw	r26, r16
    3cce:	14 96       	adiw	r26, 0x04	; 4
    3cd0:	ed 91       	ld	r30, X+
    3cd2:	fc 91       	ld	r31, X
    3cd4:	15 97       	sbiw	r26, 0x05	; 5
    3cd6:	19 95       	eicall
    3cd8:	2f c0       	rjmp	.+94     	; 0x3d38 <udc_process_setup+0x4b8>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	2d c0       	rjmp	.+90     	; 0x3d38 <udc_process_setup+0x4b8>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	2b c0       	rjmp	.+86     	; 0x3d38 <udc_process_setup+0x4b8>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	29 c0       	rjmp	.+82     	; 0x3d38 <udc_process_setup+0x4b8>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	27 c0       	rjmp	.+78     	; 0x3d38 <udc_process_setup+0x4b8>
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	25 c0       	rjmp	.+74     	; 0x3d38 <udc_process_setup+0x4b8>
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	23 c0       	rjmp	.+70     	; 0x3d38 <udc_process_setup+0x4b8>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	21 c0       	rjmp	.+66     	; 0x3d38 <udc_process_setup+0x4b8>
    3cf6:	80 e0       	ldi	r24, 0x00	; 0
    3cf8:	1f c0       	rjmp	.+62     	; 0x3d38 <udc_process_setup+0x4b8>
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	1d c0       	rjmp	.+58     	; 0x3d38 <udc_process_setup+0x4b8>
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	1b c0       	rjmp	.+54     	; 0x3d38 <udc_process_setup+0x4b8>
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	19 c0       	rjmp	.+50     	; 0x3d38 <udc_process_setup+0x4b8>
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	17 c0       	rjmp	.+46     	; 0x3d38 <udc_process_setup+0x4b8>
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	15 c0       	rjmp	.+42     	; 0x3d38 <udc_process_setup+0x4b8>
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	13 c0       	rjmp	.+38     	; 0x3d38 <udc_process_setup+0x4b8>
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	11 c0       	rjmp	.+34     	; 0x3d38 <udc_process_setup+0x4b8>
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	0f c0       	rjmp	.+30     	; 0x3d38 <udc_process_setup+0x4b8>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3d1a:	98 2f       	mov	r25, r24
    3d1c:	90 76       	andi	r25, 0x60	; 96
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <udc_process_setup+0x4a2>
    3d20:	9e cf       	rjmp	.-196    	; 0x3c5e <udc_process_setup+0x3de>
    3d22:	bb ce       	rjmp	.-650    	; 0x3a9a <udc_process_setup+0x21a>
    3d24:	98 2f       	mov	r25, r24
    3d26:	90 76       	andi	r25, 0x60	; 96
    3d28:	09 f0       	breq	.+2      	; 0x3d2c <udc_process_setup+0x4ac>
    3d2a:	99 cf       	rjmp	.-206    	; 0x3c5e <udc_process_setup+0x3de>
    3d2c:	c2 cd       	rjmp	.-1148   	; 0x38b2 <udc_process_setup+0x32>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3d2e:	31 e1       	ldi	r19, 0x11	; 17
		str = udc_string_product_name;
    3d30:	ec ee       	ldi	r30, 0xEC	; 236
    3d32:	f1 e2       	ldi	r31, 0x21	; 33
    3d34:	2a ce       	rjmp	.-940    	; 0x398a <udc_process_setup+0x10a>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	08 95       	ret

00003d42 <MMA8453_Init>:
	uint8_t regRead = 0;

	//put device in active mode
	
	//active mode with fast 8 bit, +/-2 G, 400Hz sample rate
	writeI2C(MMA8453_ADDR, MMA8453_REG_CTRL_REG1, 0x00);
    3d42:	40 e0       	ldi	r20, 0x00	; 0
    3d44:	6a e2       	ldi	r22, 0x2A	; 42
    3d46:	8d e1       	ldi	r24, 0x1D	; 29
    3d48:	da d0       	rcall	.+436    	; 0x3efe <writeI2C>
	writeI2C(MMA8453_ADDR, MMA8453_REG_XYZ_DATA_CFG, 0x00);
    3d4a:	40 e0       	ldi	r20, 0x00	; 0
    3d4c:	6e e0       	ldi	r22, 0x0E	; 14
    3d4e:	8d e1       	ldi	r24, 0x1D	; 29
    3d50:	d6 d0       	rcall	.+428    	; 0x3efe <writeI2C>
	writeI2C(MMA8453_ADDR, MMA8453_REG_CTRL_REG1, 0x0B);
    3d52:	4b e0       	ldi	r20, 0x0B	; 11
    3d54:	6a e2       	ldi	r22, 0x2A	; 42
    3d56:	8d e1       	ldi	r24, 0x1D	; 29
    3d58:	d2 c0       	rjmp	.+420    	; 0x3efe <writeI2C>
    3d5a:	08 95       	ret

00003d5c <MMA8453_Read_Output>:
	//writeI2C(MMA8453_ADDR, MMA8453_REG_CTRL_REG1, 0x09);

}

uint8_t MMA8453_Read_Output(uint8_t axis){
    3d5c:	cf 93       	push	r28
    3d5e:	df 93       	push	r29
    3d60:	1f 92       	push	r1
    3d62:	cd b7       	in	r28, 0x3d	; 61
    3d64:	de b7       	in	r29, 0x3e	; 62
	uint8_t reading = 0xFF;	 
    3d66:	9f ef       	ldi	r25, 0xFF	; 255
    3d68:	99 83       	std	Y+1, r25	; 0x01
		 
	if(axis == 1){
    3d6a:	81 30       	cpi	r24, 0x01	; 1
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <MMA8453_Read_Output+0x20>
		//X Axis
		readI2C(MMA8453_ADDR, MMA8453_REG_OUT_X_MSB, &reading); 
    3d6e:	ae 01       	movw	r20, r28
    3d70:	4f 5f       	subi	r20, 0xFF	; 255
    3d72:	5f 4f       	sbci	r21, 0xFF	; 255
    3d74:	61 e0       	ldi	r22, 0x01	; 1
    3d76:	8d e1       	ldi	r24, 0x1D	; 29
    3d78:	5e d0       	rcall	.+188    	; 0x3e36 <readI2C>
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <MMA8453_Read_Output+0x42>
	}
	else if(axis == 2){
    3d7c:	82 30       	cpi	r24, 0x02	; 2
    3d7e:	39 f4       	brne	.+14     	; 0x3d8e <MMA8453_Read_Output+0x32>
		//Y axis
		readI2C(MMA8453_ADDR, MMA8453_REG_OUT_Y_MSB, &reading);
    3d80:	ae 01       	movw	r20, r28
    3d82:	4f 5f       	subi	r20, 0xFF	; 255
    3d84:	5f 4f       	sbci	r21, 0xFF	; 255
    3d86:	63 e0       	ldi	r22, 0x03	; 3
    3d88:	8d e1       	ldi	r24, 0x1D	; 29
    3d8a:	55 d0       	rcall	.+170    	; 0x3e36 <readI2C>
    3d8c:	08 c0       	rjmp	.+16     	; 0x3d9e <MMA8453_Read_Output+0x42>
	}
	else if(axis == 3){
    3d8e:	83 30       	cpi	r24, 0x03	; 3
    3d90:	31 f4       	brne	.+12     	; 0x3d9e <MMA8453_Read_Output+0x42>
		//Z Axis
		readI2C(MMA8453_ADDR, MMA8453_REG_OUT_Z_MSB, &reading);
    3d92:	ae 01       	movw	r20, r28
    3d94:	4f 5f       	subi	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	65 e0       	ldi	r22, 0x05	; 5
    3d9a:	8d e1       	ldi	r24, 0x1D	; 29
    3d9c:	4c d0       	rcall	.+152    	; 0x3e36 <readI2C>
	else{
		//invalid axis
		//reading = 0xFF;
	}
	return reading;
}
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	0f 90       	pop	r0
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	08 95       	ret

00003da8 <MMA8453_Read_XYZ>:

uint8_t MMA8453_Read_XYZ(uint8_t readings[]){
    3da8:	0f 93       	push	r16
    3daa:	1f 93       	push	r17
    3dac:	cf 93       	push	r28
    3dae:	df 93       	push	r29
    3db0:	1f 92       	push	r1
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	8c 01       	movw	r16, r24
	uint8_t packet[6] = {0,0,0,0,0,0};
	uint8_t statusReg = 0;
    3db8:	19 82       	std	Y+1, r1	; 0x01
	
	readI2C(MMA8453_ADDR, MMA8453_REG_STATUS, &statusReg);
    3dba:	ae 01       	movw	r20, r28
    3dbc:	4f 5f       	subi	r20, 0xFF	; 255
    3dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	8d e1       	ldi	r24, 0x1D	; 29
    3dc4:	38 d0       	rcall	.+112    	; 0x3e36 <readI2C>
	
	//Check if data is ready for reading
	if((statusReg & 0x04) == 0x04){
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	82 ff       	sbrs	r24, 2
    3dca:	06 c0       	rjmp	.+12     	; 0x3dd8 <MMA8453_Read_XYZ+0x30>
		//Read Data into buffer, need 3 byte buffer
		readI2CPacket(MMA8453_ADDR, MMA8453_REG_OUT_X_MSB, readings, 3);
    3dcc:	23 e0       	ldi	r18, 0x03	; 3
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	a8 01       	movw	r20, r16
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	8d e1       	ldi	r24, 0x1D	; 29
    3dd6:	65 d0       	rcall	.+202    	; 0x3ea2 <readI2CPacket>
			readings[2] = packet[5] & 0x7F;
		}*/
		

	}
    3dd8:	0f 90       	pop	r0
    3dda:	df 91       	pop	r29
    3ddc:	cf 91       	pop	r28
    3dde:	1f 91       	pop	r17
    3de0:	0f 91       	pop	r16
    3de2:	08 95       	ret

00003de4 <I2C_Init>:

#include <twi_master.h>
#include "HowlerConfig.h"
#include "I2C.h"

void I2C_Init(void){
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    3dec:	29 97       	sbiw	r28, 0x09	; 9
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	de bf       	out	0x3e, r29	; 62
	
	//enable the TWI_MASTER clock
	
	twi_options_t t_options = {
    3df2:	89 e0       	ldi	r24, 0x09	; 9
    3df4:	e2 eb       	ldi	r30, 0xB2	; 178
    3df6:	f5 e2       	ldi	r31, 0x25	; 37
    3df8:	de 01       	movw	r26, r28
    3dfa:	11 96       	adiw	r26, 0x01	; 1
    3dfc:	01 90       	ld	r0, Z+
    3dfe:	0d 92       	st	X+, r0
    3e00:	8a 95       	dec	r24
    3e02:	e1 f7       	brne	.-8      	; 0x3dfc <I2C_Init+0x18>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3e04:	84 e0       	ldi	r24, 0x04	; 4
    3e06:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3e0a:	60 e4       	ldi	r22, 0x40	; 64
    3e0c:	83 e0       	ldi	r24, 0x03	; 3
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	61 d8       	rcall	.-3902   	; 0x2ed4 <sysclk_enable_module>
	gpio_set_pin_low(TWI_NOE);
	
	sysclk_enable_peripheral_clock(TWI_MASTER);

	//initialize the twi interface
	twi_master_init(TWI_MASTER, &t_options);
    3e12:	be 01       	movw	r22, r28
    3e14:	6f 5f       	subi	r22, 0xFF	; 255
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	80 e8       	ldi	r24, 0x80	; 128
    3e1a:	94 e0       	ldi	r25, 0x04	; 4
    3e1c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    3e20:	e0 e8       	ldi	r30, 0x80	; 128
    3e22:	f4 e0       	ldi	r31, 0x04	; 4
    3e24:	81 81       	ldd	r24, Z+1	; 0x01
    3e26:	88 60       	ori	r24, 0x08	; 8
    3e28:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(TWI_MASTER);
}
    3e2a:	29 96       	adiw	r28, 0x09	; 9
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	08 95       	ret

00003e36 <readI2C>:

status_code_t readI2C(uint8_t addr, uint8_t registerNumber, uint8_t *value){
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	2c 97       	sbiw	r28, 0x0c	; 12
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	8a 01       	movw	r16, r20
	int status = 0;
	
	uint8_t twi_packet[] = {0};
    3e4a:	19 82       	std	Y+1, r1	; 0x01
	
	twi_package_t twi_slave_packet = {
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	32 96       	adiw	r30, 0x02	; 2
    3e50:	9b e0       	ldi	r25, 0x0B	; 11
    3e52:	df 01       	movw	r26, r30
    3e54:	1d 92       	st	X+, r1
    3e56:	9a 95       	dec	r25
    3e58:	e9 f7       	brne	.-6      	; 0x3e54 <readI2C+0x1e>
    3e5a:	8a 83       	std	Y+2, r24	; 0x02
    3e5c:	6b 83       	std	Y+3, r22	; 0x03
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	8e 83       	std	Y+6, r24	; 0x06
    3e64:	9f 83       	std	Y+7, r25	; 0x07
    3e66:	9e 01       	movw	r18, r28
    3e68:	2f 5f       	subi	r18, 0xFF	; 255
    3e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6c:	28 87       	std	Y+8, r18	; 0x08
    3e6e:	39 87       	std	Y+9, r19	; 0x09
    3e70:	8a 87       	std	Y+10, r24	; 0x0a
    3e72:	9b 87       	std	Y+11, r25	; 0x0b
    3e74:	8c 87       	std	Y+12, r24	; 0x0c
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3e76:	41 e0       	ldi	r20, 0x01	; 1
    3e78:	bf 01       	movw	r22, r30
    3e7a:	80 e8       	ldi	r24, 0x80	; 128
    3e7c:	94 e0       	ldi	r25, 0x04	; 4
    3e7e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <twi_master_transfer>
		.length       = 1,   // transfer data size (bytes)
		.no_wait	= true//false//true
	};
	status = twi_master_read(TWI_MASTER, &twi_slave_packet);

	if(status == TWI_SUCCESS){
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	21 f4       	brne	.+8      	; 0x3e8e <readI2C+0x58>
		*value = twi_packet[0];
    3e86:	29 81       	ldd	r18, Y+1	; 0x01
    3e88:	f8 01       	movw	r30, r16
    3e8a:	20 83       	st	Z, r18
		return(STATUS_OK);
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <readI2C+0x5c>
	}
	
	else{
		return(ERR_IO_ERROR);
    3e8e:	8f ef       	ldi	r24, 0xFF	; 255
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    3e92:	2c 96       	adiw	r28, 0x0c	; 12
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	08 95       	ret

00003ea2 <readI2CPacket>:

status_code_t readI2CPacket(uint8_t addr, uint8_t registerNumber, uint8_t packet[], unsigned int packetLength){
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	2b 97       	sbiw	r28, 0x0b	; 11
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	de bf       	out	0x3e, r29	; 62
	int status = 0;
	
	//uint8_t twi_packet[] = {0};
	
	twi_package_t twi_slave_packet = {
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	31 96       	adiw	r30, 0x01	; 1
    3eb4:	9b e0       	ldi	r25, 0x0B	; 11
    3eb6:	df 01       	movw	r26, r30
    3eb8:	1d 92       	st	X+, r1
    3eba:	9a 95       	dec	r25
    3ebc:	e9 f7       	brne	.-6      	; 0x3eb8 <readI2CPacket+0x16>
    3ebe:	89 83       	std	Y+1, r24	; 0x01
    3ec0:	6a 83       	std	Y+2, r22	; 0x02
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	8d 83       	std	Y+5, r24	; 0x05
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	4f 83       	std	Y+7, r20	; 0x07
    3ecc:	58 87       	std	Y+8, r21	; 0x08
    3ece:	29 87       	std	Y+9, r18	; 0x09
    3ed0:	3a 87       	std	Y+10, r19	; 0x0a
    3ed2:	41 e0       	ldi	r20, 0x01	; 1
    3ed4:	bf 01       	movw	r22, r30
    3ed6:	80 e8       	ldi	r24, 0x80	; 128
    3ed8:	94 e0       	ldi	r25, 0x04	; 4
    3eda:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <twi_master_transfer>
    3ede:	21 e0       	ldi	r18, 0x01	; 1
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	89 2b       	or	r24, r25
    3ee4:	11 f4       	brne	.+4      	; 0x3eea <readI2CPacket+0x48>
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	else{
		return(ERR_IO_ERROR);
	}
}
    3eea:	88 27       	eor	r24, r24
    3eec:	99 27       	eor	r25, r25
    3eee:	82 1b       	sub	r24, r18
    3ef0:	93 0b       	sbc	r25, r19
    3ef2:	2b 96       	adiw	r28, 0x0b	; 11
    3ef4:	cd bf       	out	0x3d, r28	; 61
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	df 91       	pop	r29
    3efa:	cf 91       	pop	r28
    3efc:	08 95       	ret

00003efe <writeI2C>:

status_code_t writeI2C(uint8_t addr, uint8_t registerNumber, uint8_t value){
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    3f06:	2c 97       	sbiw	r28, 0x0c	; 12
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	de bf       	out	0x3e, r29	; 62
	uint8_t twi_packet[] = {0};

	twi_packet[0] = value;
    3f0c:	49 83       	std	Y+1, r20	; 0x01

	twi_package_t twi_slave_packet = {
    3f0e:	fe 01       	movw	r30, r28
    3f10:	32 96       	adiw	r30, 0x02	; 2
    3f12:	9b e0       	ldi	r25, 0x0B	; 11
    3f14:	df 01       	movw	r26, r30
    3f16:	1d 92       	st	X+, r1
    3f18:	9a 95       	dec	r25
    3f1a:	e9 f7       	brne	.-6      	; 0x3f16 <writeI2C+0x18>
    3f1c:	8a 83       	std	Y+2, r24	; 0x02
    3f1e:	6b 83       	std	Y+3, r22	; 0x03
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	8e 83       	std	Y+6, r24	; 0x06
    3f26:	9f 83       	std	Y+7, r25	; 0x07
    3f28:	9e 01       	movw	r18, r28
    3f2a:	2f 5f       	subi	r18, 0xFF	; 255
    3f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2e:	28 87       	std	Y+8, r18	; 0x08
    3f30:	39 87       	std	Y+9, r19	; 0x09
    3f32:	8a 87       	std	Y+10, r24	; 0x0a
    3f34:	9b 87       	std	Y+11, r25	; 0x0b
    3f36:	8c 87       	std	Y+12, r24	; 0x0c
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	be 01       	movw	r22, r28
    3f3c:	6e 5f       	subi	r22, 0xFE	; 254
    3f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f40:	80 e8       	ldi	r24, 0x80	; 128
    3f42:	94 e0       	ldi	r25, 0x04	; 4
    3f44:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <twi_master_transfer>
		.chip         = addr,      // TWI slave bus address
		.buffer       = &twi_packet, // transfer data source buffer
		.length       = 1,   // transfer data size (bytes)
		.no_wait	= true//false //true
	};
	while (twi_master_write(TWI_MASTER, &twi_slave_packet) != TWI_SUCCESS);
    3f48:	89 2b       	or	r24, r25
    3f4a:	b1 f7       	brne	.-20     	; 0x3f38 <writeI2C+0x3a>

}
    3f4c:	2c 96       	adiw	r28, 0x0c	; 12
    3f4e:	cd bf       	out	0x3d, r28	; 61
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	df 91       	pop	r29
    3f54:	cf 91       	pop	r28
    3f56:	08 95       	ret

00003f58 <writeI2CPacket>:

status_code_t writeI2CPacket(uint8_t addr, uint8_t registerNumber, uint8_t packet[], unsigned int packetLength){
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
    3f60:	2b 97       	sbiw	r28, 0x0b	; 11
    3f62:	cd bf       	out	0x3d, r28	; 61
    3f64:	de bf       	out	0x3e, r29	; 62
	int status = 0;
	
	//uint8_t twi_packet[] = {0};
	
	twi_package_t twi_slave_packet = {
    3f66:	fe 01       	movw	r30, r28
    3f68:	31 96       	adiw	r30, 0x01	; 1
    3f6a:	9b e0       	ldi	r25, 0x0B	; 11
    3f6c:	df 01       	movw	r26, r30
    3f6e:	1d 92       	st	X+, r1
    3f70:	9a 95       	dec	r25
    3f72:	e9 f7       	brne	.-6      	; 0x3f6e <writeI2CPacket+0x16>
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	6a 83       	std	Y+2, r22	; 0x02
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
    3f7e:	9e 83       	std	Y+6, r25	; 0x06
    3f80:	4f 83       	std	Y+7, r20	; 0x07
    3f82:	58 87       	std	Y+8, r21	; 0x08
    3f84:	29 87       	std	Y+9, r18	; 0x09
    3f86:	3a 87       	std	Y+10, r19	; 0x0a
    3f88:	8b 87       	std	Y+11, r24	; 0x0b
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	be 01       	movw	r22, r28
    3f8e:	6f 5f       	subi	r22, 0xFF	; 255
    3f90:	7f 4f       	sbci	r23, 0xFF	; 255
    3f92:	80 e8       	ldi	r24, 0x80	; 128
    3f94:	94 e0       	ldi	r25, 0x04	; 4
    3f96:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <twi_master_transfer>
		.chip         = addr,    // TWI slave bus address
		.buffer       = packet, // transfer data source buffer
		.length       = packetLength,   // transfer data size (bytes)
		.no_wait	= true//true
	};
	while (twi_master_write(TWI_MASTER, &twi_slave_packet) != TWI_SUCCESS);
    3f9a:	89 2b       	or	r24, r25
    3f9c:	b1 f7       	brne	.-20     	; 0x3f8a <writeI2CPacket+0x32>
	}
	
	else{
		return(ERR_IO_ERROR);
	}
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	2b 96       	adiw	r28, 0x0b	; 11
    3fa4:	cd bf       	out	0x3d, r28	; 61
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	08 95       	ret

00003fae <udi_hid_joystick_disable>:
	return UDI_HID_JOYSTICK_ENABLE_EXT();
}


void udi_hid_joystick_disable(void)
{
    3fae:	08 95       	ret

00003fb0 <udi_hid_joystick_getsetting>:

uint8_t udi_hid_joystick_getsetting(void)
{
	//JW NEED TO SET FOR JOYSTICK
	return 0;
}
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	08 95       	ret

00003fb4 <udi_hid_joystick_setreport>:

static bool udi_hid_joystick_setreport(void)
{
	//JW NEED TO SET FOR JOYSTICK
	return false;
}
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	08 95       	ret

00003fb8 <udi_hid_joystick_enable>:

bool udi_hid_joystick_enable(void)
{
	//JW NEED TO SET FOR JOYSTICK
	// Initialize internal value
	udi_hid_joystick_rate = 0;
    3fb8:	10 92 41 29 	sts	0x2941, r1	; 0x802941 <udi_hid_joystick_rate>
	udi_hid_joystick_protocol = 0;
    3fbc:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <udi_hid_joystick_protocol>
	udi_hid_joystick_report_trans_ongoing = false;
    3fc0:	10 92 32 29 	sts	0x2932, r1	; 0x802932 <udi_hid_joystick_report_trans_ongoing>
	memset(udi_hid_joystick_report, 0, UDI_HID_JOYSTICK_REPORT_SIZE);
    3fc4:	8c e0       	ldi	r24, 0x0C	; 12
    3fc6:	e3 e3       	ldi	r30, 0x33	; 51
    3fc8:	f9 e2       	ldi	r31, 0x29	; 41
    3fca:	df 01       	movw	r26, r30
    3fcc:	1d 92       	st	X+, r1
    3fce:	8a 95       	dec	r24
    3fd0:	e9 f7       	brne	.-6      	; 0x3fcc <udi_hid_joystick_enable+0x14>
	udi_hid_joystick_b_report_valid = false;
    3fd2:	10 92 3f 29 	sts	0x293F, r1	; 0x80293f <udi_hid_joystick_b_report_valid>
	return UDI_HID_JOYSTICK_ENABLE_EXT();
}
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	08 95       	ret

00003fda <udi_hid_joystick_setup>:


bool udi_hid_joystick_setup(void)
{
	//JW NEED TO SET FOR JOYSTICK
	return udi_hid_setup(&udi_hid_joystick_rate,
    3fda:	2a ed       	ldi	r18, 0xDA	; 218
    3fdc:	3f e1       	ldi	r19, 0x1F	; 31
    3fde:	40 e1       	ldi	r20, 0x10	; 16
    3fe0:	52 e2       	ldi	r21, 0x22	; 34
    3fe2:	60 e4       	ldi	r22, 0x40	; 64
    3fe4:	79 e2       	ldi	r23, 0x29	; 41
    3fe6:	81 e4       	ldi	r24, 0x41	; 65
    3fe8:	99 e2       	ldi	r25, 0x29	; 41
    3fea:	65 ca       	rjmp	.-2870   	; 0x34b6 <udi_hid_setup>
								&udi_hid_joystick_protocol,
								(uint8_t *) &udi_hid_joystick_report_desc,
								udi_hid_joystick_setreport);
}
    3fec:	08 95       	ret

00003fee <udi_hid_joystick_send_report>:
	return true;
}*/


static bool udi_hid_joystick_send_report(void)
{
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
	if (udi_hid_joystick_report_trans_ongoing)
    3ff2:	80 91 32 29 	lds	r24, 0x2932	; 0x802932 <udi_hid_joystick_report_trans_ongoing>
    3ff6:	81 11       	cpse	r24, r1
    3ff8:	18 c0       	rjmp	.+48     	; 0x402a <__stack+0x2b>
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_joystick_report_trans, udi_hid_joystick_report,
    3ffa:	8c e0       	ldi	r24, 0x0C	; 12
    3ffc:	e3 e3       	ldi	r30, 0x33	; 51
    3ffe:	f9 e2       	ldi	r31, 0x29	; 41
    4000:	a6 e2       	ldi	r26, 0x26	; 38
    4002:	b9 e2       	ldi	r27, 0x29	; 41
    4004:	01 90       	ld	r0, Z+
    4006:	0d 92       	st	X+, r0
    4008:	8a 95       	dec	r24
    400a:	e1 f7       	brne	.-8      	; 0x4004 <__stack+0x5>
			UDI_HID_JOYSTICK_REPORT_SIZE);
	//memset(&udi_hid_joystick_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_joystick_b_report_valid = false;
    400c:	10 92 3f 29 	sts	0x293F, r1	; 0x80293f <udi_hid_joystick_b_report_valid>

	// Send report
	udi_hid_joystick_report_trans_ongoing =
			udd_ep_run(	UDI_HID_JOYSTICK_EP_IN,
    4010:	09 e1       	ldi	r16, 0x19	; 25
    4012:	10 e2       	ldi	r17, 0x20	; 32
    4014:	2c e0       	ldi	r18, 0x0C	; 12
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	46 e2       	ldi	r20, 0x26	; 38
    401a:	59 e2       	ldi	r21, 0x29	; 41
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	83 e8       	ldi	r24, 0x83	; 131
    4020:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <udd_ep_run>
			UDI_HID_JOYSTICK_REPORT_SIZE);
	//memset(&udi_hid_joystick_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_joystick_b_report_valid = false;

	// Send report
	udi_hid_joystick_report_trans_ongoing =
    4024:	80 93 32 29 	sts	0x2932, r24	; 0x802932 <udi_hid_joystick_report_trans_ongoing>
			udd_ep_run(	UDI_HID_JOYSTICK_EP_IN,
							false,
							udi_hid_joystick_report_trans,
							UDI_HID_JOYSTICK_REPORT_SIZE,
							udi_hid_joystick_report_sent);
	return udi_hid_joystick_report_trans_ongoing;
    4028:	01 c0       	rjmp	.+2      	; 0x402c <__stack+0x2d>


static bool udi_hid_joystick_send_report(void)
{
	if (udi_hid_joystick_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete
    402a:	80 e0       	ldi	r24, 0x00	; 0
							false,
							udi_hid_joystick_report_trans,
							UDI_HID_JOYSTICK_REPORT_SIZE,
							udi_hid_joystick_report_sent);
	return udi_hid_joystick_report_trans_ongoing;
}
    402c:	1f 91       	pop	r17
    402e:	0f 91       	pop	r16
    4030:	08 95       	ret

00004032 <udi_hid_joystick_report_sent>:
{
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_joystick_report_trans_ongoing = false;
    4032:	10 92 32 29 	sts	0x2932, r1	; 0x802932 <udi_hid_joystick_report_trans_ongoing>
	if (udi_hid_joystick_b_report_valid) {
    4036:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <udi_hid_joystick_b_report_valid>
    403a:	81 11       	cpse	r24, r1
		// Send new valid report
		udi_hid_joystick_send_report();
    403c:	d8 cf       	rjmp	.-80     	; 0x3fee <udi_hid_joystick_send_report>
    403e:	08 95       	ret

00004040 <send_joystick_report>:
	
	cpu_irq_restore(flags);
	return true;
}*/

bool send_joystick_report(uint8_t *joybuf){
    4040:	cf 93       	push	r28
    4042:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4044:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    4046:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	
	memcpy(udi_hid_joystick_report, joybuf,	UDI_HID_JOYSTICK_REPORT_SIZE);
    4048:	9c e0       	ldi	r25, 0x0C	; 12
    404a:	a3 e3       	ldi	r26, 0x33	; 51
    404c:	b9 e2       	ldi	r27, 0x29	; 41
    404e:	01 90       	ld	r0, Z+
    4050:	0d 92       	st	X+, r0
    4052:	9a 95       	dec	r25
    4054:	e1 f7       	brne	.-8      	; 0x404e <send_joystick_report+0xe>
	
	udi_hid_joystick_b_report_valid = true;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	80 93 3f 29 	sts	0x293F, r24	; 0x80293f <udi_hid_joystick_b_report_valid>
	udi_hid_joystick_send_report();	
    405c:	c8 df       	rcall	.-112    	; 0x3fee <udi_hid_joystick_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    405e:	cf bf       	out	0x3f, r28	; 63
	
	cpu_irq_restore(flags);
	return true;
	
}
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	cf 91       	pop	r28
    4064:	08 95       	ret

00004066 <Howler_Init>:
void Howler_Init(void)
{
	//Default Configuration (need to update for changing board configurations)
	
	//Uncomment to Disable JTAG to allow use of pins 
	CCP = CCP_IOREG_gc;
    4066:	88 ed       	ldi	r24, 0xD8	; 216
    4068:	84 bf       	out	0x34, r24	; 52
	MCU.MCUCR = 0x01;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    4070:	41 e0       	ldi	r20, 0x01	; 1
    4072:	50 e0       	ldi	r21, 0x00	; 0
    4074:	61 e0       	ldi	r22, 0x01	; 1
    4076:	80 ee       	ldi	r24, 0xE0	; 224
    4078:	97 e0       	ldi	r25, 0x07	; 7
    407a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	50 e0       	ldi	r21, 0x00	; 0
    4082:	62 e0       	ldi	r22, 0x02	; 2
    4084:	80 ee       	ldi	r24, 0xE0	; 224
    4086:	97 e0       	ldi	r25, 0x07	; 7
    4088:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    408c:	41 e0       	ldi	r20, 0x01	; 1
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	64 e0       	ldi	r22, 0x04	; 4
    4092:	80 e2       	ldi	r24, 0x20	; 32
    4094:	96 e0       	ldi	r25, 0x06	; 6
    4096:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    409a:	40 e0       	ldi	r20, 0x00	; 0
    409c:	5b e1       	ldi	r21, 0x1B	; 27
    409e:	60 e2       	ldi	r22, 0x20	; 32
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	96 e0       	ldi	r25, 0x06	; 6
    40a4:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	5b e1       	ldi	r21, 0x1B	; 27
    40ac:	60 e1       	ldi	r22, 0x10	; 16
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	96 e0       	ldi	r25, 0x06	; 6
    40b2:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	5b e1       	ldi	r21, 0x1B	; 27
    40ba:	60 e8       	ldi	r22, 0x80	; 128
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	96 e0       	ldi	r25, 0x06	; 6
    40c0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40c4:	40 e0       	ldi	r20, 0x00	; 0
    40c6:	5b e1       	ldi	r21, 0x1B	; 27
    40c8:	60 e4       	ldi	r22, 0x40	; 64
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	96 e0       	ldi	r25, 0x06	; 6
    40ce:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	5b e1       	ldi	r21, 0x1B	; 27
    40d6:	64 e0       	ldi	r22, 0x04	; 4
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	96 e0       	ldi	r25, 0x06	; 6
    40dc:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	5b e1       	ldi	r21, 0x1B	; 27
    40e4:	68 e0       	ldi	r22, 0x08	; 8
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	96 e0       	ldi	r25, 0x06	; 6
    40ea:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	5b e1       	ldi	r21, 0x1B	; 27
    40f2:	61 e0       	ldi	r22, 0x01	; 1
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	96 e0       	ldi	r25, 0x06	; 6
    40f8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    40fc:	40 e0       	ldi	r20, 0x00	; 0
    40fe:	5b e1       	ldi	r21, 0x1B	; 27
    4100:	62 e0       	ldi	r22, 0x02	; 2
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	96 e0       	ldi	r25, 0x06	; 6
    4106:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    410a:	40 e0       	ldi	r20, 0x00	; 0
    410c:	5b e1       	ldi	r21, 0x1B	; 27
    410e:	64 e0       	ldi	r22, 0x04	; 4
    4110:	80 e6       	ldi	r24, 0x60	; 96
    4112:	96 e0       	ldi	r25, 0x06	; 6
    4114:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4118:	40 e0       	ldi	r20, 0x00	; 0
    411a:	5b e1       	ldi	r21, 0x1B	; 27
    411c:	68 e0       	ldi	r22, 0x08	; 8
    411e:	80 e6       	ldi	r24, 0x60	; 96
    4120:	96 e0       	ldi	r25, 0x06	; 6
    4122:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	5b e1       	ldi	r21, 0x1B	; 27
    412a:	61 e0       	ldi	r22, 0x01	; 1
    412c:	80 e6       	ldi	r24, 0x60	; 96
    412e:	96 e0       	ldi	r25, 0x06	; 6
    4130:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4134:	40 e0       	ldi	r20, 0x00	; 0
    4136:	5b e1       	ldi	r21, 0x1B	; 27
    4138:	62 e0       	ldi	r22, 0x02	; 2
    413a:	80 e6       	ldi	r24, 0x60	; 96
    413c:	96 e0       	ldi	r25, 0x06	; 6
    413e:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4142:	40 e0       	ldi	r20, 0x00	; 0
    4144:	5b e1       	ldi	r21, 0x1B	; 27
    4146:	61 e0       	ldi	r22, 0x01	; 1
    4148:	80 e8       	ldi	r24, 0x80	; 128
    414a:	96 e0       	ldi	r25, 0x06	; 6
    414c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	5b e1       	ldi	r21, 0x1B	; 27
    4154:	62 e0       	ldi	r22, 0x02	; 2
    4156:	80 e8       	ldi	r24, 0x80	; 128
    4158:	96 e0       	ldi	r25, 0x06	; 6
    415a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    415e:	40 e0       	ldi	r20, 0x00	; 0
    4160:	5b e1       	ldi	r21, 0x1B	; 27
    4162:	60 e1       	ldi	r22, 0x10	; 16
    4164:	80 e6       	ldi	r24, 0x60	; 96
    4166:	96 e0       	ldi	r25, 0x06	; 6
    4168:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	5b e1       	ldi	r21, 0x1B	; 27
    4170:	60 e2       	ldi	r22, 0x20	; 32
    4172:	80 e6       	ldi	r24, 0x60	; 96
    4174:	96 e0       	ldi	r25, 0x06	; 6
    4176:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    417a:	40 e0       	ldi	r20, 0x00	; 0
    417c:	5b e1       	ldi	r21, 0x1B	; 27
    417e:	61 e0       	ldi	r22, 0x01	; 1
    4180:	80 e2       	ldi	r24, 0x20	; 32
    4182:	96 e0       	ldi	r25, 0x06	; 6
    4184:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	5b e1       	ldi	r21, 0x1B	; 27
    418c:	62 e0       	ldi	r22, 0x02	; 2
    418e:	80 e2       	ldi	r24, 0x20	; 32
    4190:	96 e0       	ldi	r25, 0x06	; 6
    4192:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4196:	40 e0       	ldi	r20, 0x00	; 0
    4198:	5b e1       	ldi	r21, 0x1B	; 27
    419a:	68 e0       	ldi	r22, 0x08	; 8
    419c:	80 e2       	ldi	r24, 0x20	; 32
    419e:	96 e0       	ldi	r25, 0x06	; 6
    41a0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41a4:	40 e0       	ldi	r20, 0x00	; 0
    41a6:	5b e1       	ldi	r21, 0x1B	; 27
    41a8:	60 e1       	ldi	r22, 0x10	; 16
    41aa:	80 e2       	ldi	r24, 0x20	; 32
    41ac:	96 e0       	ldi	r25, 0x06	; 6
    41ae:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41b2:	40 e0       	ldi	r20, 0x00	; 0
    41b4:	5b e1       	ldi	r21, 0x1B	; 27
    41b6:	60 e2       	ldi	r22, 0x20	; 32
    41b8:	80 e2       	ldi	r24, 0x20	; 32
    41ba:	96 e0       	ldi	r25, 0x06	; 6
    41bc:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41c0:	40 e0       	ldi	r20, 0x00	; 0
    41c2:	5b e1       	ldi	r21, 0x1B	; 27
    41c4:	60 e4       	ldi	r22, 0x40	; 64
    41c6:	80 e2       	ldi	r24, 0x20	; 32
    41c8:	96 e0       	ldi	r25, 0x06	; 6
    41ca:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	5b e1       	ldi	r21, 0x1B	; 27
    41d2:	60 e8       	ldi	r22, 0x80	; 128
    41d4:	80 e2       	ldi	r24, 0x20	; 32
    41d6:	96 e0       	ldi	r25, 0x06	; 6
    41d8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41dc:	40 e0       	ldi	r20, 0x00	; 0
    41de:	5b e1       	ldi	r21, 0x1B	; 27
    41e0:	64 e0       	ldi	r22, 0x04	; 4
    41e2:	80 e4       	ldi	r24, 0x40	; 64
    41e4:	96 e0       	ldi	r25, 0x06	; 6
    41e6:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	5b e1       	ldi	r21, 0x1B	; 27
    41ee:	68 e0       	ldi	r22, 0x08	; 8
    41f0:	80 e4       	ldi	r24, 0x40	; 64
    41f2:	96 e0       	ldi	r25, 0x06	; 6
    41f4:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    41f8:	40 e0       	ldi	r20, 0x00	; 0
    41fa:	5b e1       	ldi	r21, 0x1B	; 27
    41fc:	60 e1       	ldi	r22, 0x10	; 16
    41fe:	80 e4       	ldi	r24, 0x40	; 64
    4200:	96 e0       	ldi	r25, 0x06	; 6
    4202:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	5b e1       	ldi	r21, 0x1B	; 27
    420a:	60 e2       	ldi	r22, 0x20	; 32
    420c:	80 e4       	ldi	r24, 0x40	; 64
    420e:	96 e0       	ldi	r25, 0x06	; 6
    4210:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4214:	40 e0       	ldi	r20, 0x00	; 0
    4216:	5b e1       	ldi	r21, 0x1B	; 27
    4218:	60 e4       	ldi	r22, 0x40	; 64
    421a:	80 e4       	ldi	r24, 0x40	; 64
    421c:	96 e0       	ldi	r25, 0x06	; 6
    421e:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4222:	40 e0       	ldi	r20, 0x00	; 0
    4224:	5b e1       	ldi	r21, 0x1B	; 27
    4226:	60 e8       	ldi	r22, 0x80	; 128
    4228:	80 e4       	ldi	r24, 0x40	; 64
    422a:	96 e0       	ldi	r25, 0x06	; 6
    422c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4230:	40 e0       	ldi	r20, 0x00	; 0
    4232:	5b e1       	ldi	r21, 0x1B	; 27
    4234:	60 e8       	ldi	r22, 0x80	; 128
    4236:	80 ea       	ldi	r24, 0xA0	; 160
    4238:	96 e0       	ldi	r25, 0x06	; 6
    423a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	5b e1       	ldi	r21, 0x1B	; 27
    4242:	60 e4       	ldi	r22, 0x40	; 64
    4244:	80 ea       	ldi	r24, 0xA0	; 160
    4246:	96 e0       	ldi	r25, 0x06	; 6
    4248:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    424c:	40 e0       	ldi	r20, 0x00	; 0
    424e:	5b e1       	ldi	r21, 0x1B	; 27
    4250:	60 e2       	ldi	r22, 0x20	; 32
    4252:	80 ea       	ldi	r24, 0xA0	; 160
    4254:	96 e0       	ldi	r25, 0x06	; 6
    4256:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    425a:	40 e0       	ldi	r20, 0x00	; 0
    425c:	5b e1       	ldi	r21, 0x1B	; 27
    425e:	60 e1       	ldi	r22, 0x10	; 16
    4260:	80 ea       	ldi	r24, 0xA0	; 160
    4262:	96 e0       	ldi	r25, 0x06	; 6
    4264:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	5b e1       	ldi	r21, 0x1B	; 27
    426c:	68 e0       	ldi	r22, 0x08	; 8
    426e:	80 ea       	ldi	r24, 0xA0	; 160
    4270:	96 e0       	ldi	r25, 0x06	; 6
    4272:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	5b e1       	ldi	r21, 0x1B	; 27
    427a:	64 e0       	ldi	r22, 0x04	; 4
    427c:	80 ea       	ldi	r24, 0xA0	; 160
    427e:	96 e0       	ldi	r25, 0x06	; 6
    4280:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4284:	40 e0       	ldi	r20, 0x00	; 0
    4286:	5b e1       	ldi	r21, 0x1B	; 27
    4288:	62 e0       	ldi	r22, 0x02	; 2
    428a:	80 ea       	ldi	r24, 0xA0	; 160
    428c:	96 e0       	ldi	r25, 0x06	; 6
    428e:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    4292:	40 e0       	ldi	r20, 0x00	; 0
    4294:	5b e1       	ldi	r21, 0x1B	; 27
    4296:	61 e0       	ldi	r22, 0x01	; 1
    4298:	80 ea       	ldi	r24, 0xA0	; 160
    429a:	96 e0       	ldi	r25, 0x06	; 6
    429c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    42a0:	40 e0       	ldi	r20, 0x00	; 0
    42a2:	5b e1       	ldi	r21, 0x1B	; 27
    42a4:	60 e8       	ldi	r22, 0x80	; 128
    42a6:	80 e8       	ldi	r24, 0x80	; 128
    42a8:	96 e0       	ldi	r25, 0x06	; 6
    42aa:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    42ae:	40 e0       	ldi	r20, 0x00	; 0
    42b0:	5b e1       	ldi	r21, 0x1B	; 27
    42b2:	60 e4       	ldi	r22, 0x40	; 64
    42b4:	80 e8       	ldi	r24, 0x80	; 128
    42b6:	96 e0       	ldi	r25, 0x06	; 6
    42b8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	5b e1       	ldi	r21, 0x1B	; 27
    42c0:	60 e1       	ldi	r22, 0x10	; 16
    42c2:	80 e8       	ldi	r24, 0x80	; 128
    42c4:	96 e0       	ldi	r25, 0x06	; 6
    42c6:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	5b e1       	ldi	r21, 0x1B	; 27
    42ce:	68 e0       	ldi	r22, 0x08	; 8
    42d0:	80 e8       	ldi	r24, 0x80	; 128
    42d2:	96 e0       	ldi	r25, 0x06	; 6
    42d4:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	5b e1       	ldi	r21, 0x1B	; 27
    42dc:	64 e0       	ldi	r22, 0x04	; 4
    42de:	80 e8       	ldi	r24, 0x80	; 128
    42e0:	96 e0       	ldi	r25, 0x06	; 6
    42e2:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <ioport_configure_port_pin>
    42e6:	08 95       	ret

000042e8 <LED_Drivers_Init>:
	//set green LED
	writeI2C(ledToSet>>24, ledToSet>>16, rgbLevel>>8);
	
	//set blue LED
	writeI2C(ledToSet>>8, ledToSet, rgbLevel);
}
    42e8:	41 e0       	ldi	r20, 0x01	; 1
    42ea:	60 e0       	ldi	r22, 0x00	; 0
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	07 de       	rcall	.-1010   	; 0x3efe <writeI2C>
    42f0:	41 e0       	ldi	r20, 0x01	; 1
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	03 de       	rcall	.-1018   	; 0x3efe <writeI2C>
    42f8:	41 e0       	ldi	r20, 0x01	; 1
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	82 e0       	ldi	r24, 0x02	; 2
    42fe:	ff dd       	rcall	.-1026   	; 0x3efe <writeI2C>
    4300:	41 e0       	ldi	r20, 0x01	; 1
    4302:	60 e0       	ldi	r22, 0x00	; 0
    4304:	87 e0       	ldi	r24, 0x07	; 7
    4306:	fb dd       	rcall	.-1034   	; 0x3efe <writeI2C>
    4308:	41 e0       	ldi	r20, 0x01	; 1
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	84 e0       	ldi	r24, 0x04	; 4
    430e:	f7 dd       	rcall	.-1042   	; 0x3efe <writeI2C>
    4310:	41 e0       	ldi	r20, 0x01	; 1
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	85 e0       	ldi	r24, 0x05	; 5
    4316:	f3 dd       	rcall	.-1050   	; 0x3efe <writeI2C>
    4318:	41 e0       	ldi	r20, 0x01	; 1
    431a:	61 e0       	ldi	r22, 0x01	; 1
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	ef dd       	rcall	.-1058   	; 0x3efe <writeI2C>
    4320:	41 e0       	ldi	r20, 0x01	; 1
    4322:	61 e0       	ldi	r22, 0x01	; 1
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	eb dd       	rcall	.-1066   	; 0x3efe <writeI2C>
    4328:	41 e0       	ldi	r20, 0x01	; 1
    432a:	61 e0       	ldi	r22, 0x01	; 1
    432c:	82 e0       	ldi	r24, 0x02	; 2
    432e:	e7 dd       	rcall	.-1074   	; 0x3efe <writeI2C>
    4330:	41 e0       	ldi	r20, 0x01	; 1
    4332:	61 e0       	ldi	r22, 0x01	; 1
    4334:	87 e0       	ldi	r24, 0x07	; 7
    4336:	e3 dd       	rcall	.-1082   	; 0x3efe <writeI2C>
    4338:	41 e0       	ldi	r20, 0x01	; 1
    433a:	61 e0       	ldi	r22, 0x01	; 1
    433c:	84 e0       	ldi	r24, 0x04	; 4
    433e:	df dd       	rcall	.-1090   	; 0x3efe <writeI2C>
    4340:	41 e0       	ldi	r20, 0x01	; 1
    4342:	61 e0       	ldi	r22, 0x01	; 1
    4344:	85 e0       	ldi	r24, 0x05	; 5
    4346:	db dd       	rcall	.-1098   	; 0x3efe <writeI2C>
    4348:	4f ef       	ldi	r20, 0xFF	; 255
    434a:	64 e1       	ldi	r22, 0x14	; 20
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	d7 dd       	rcall	.-1106   	; 0x3efe <writeI2C>
    4350:	4f ef       	ldi	r20, 0xFF	; 255
    4352:	65 e1       	ldi	r22, 0x15	; 21
    4354:	80 e0       	ldi	r24, 0x00	; 0
    4356:	d3 dd       	rcall	.-1114   	; 0x3efe <writeI2C>
    4358:	4f ef       	ldi	r20, 0xFF	; 255
    435a:	66 e1       	ldi	r22, 0x16	; 22
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	cf dd       	rcall	.-1122   	; 0x3efe <writeI2C>
    4360:	4f ef       	ldi	r20, 0xFF	; 255
    4362:	67 e1       	ldi	r22, 0x17	; 23
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	cb dd       	rcall	.-1130   	; 0x3efe <writeI2C>
    4368:	4f ef       	ldi	r20, 0xFF	; 255
    436a:	64 e1       	ldi	r22, 0x14	; 20
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	c7 dd       	rcall	.-1138   	; 0x3efe <writeI2C>
    4370:	4f ef       	ldi	r20, 0xFF	; 255
    4372:	65 e1       	ldi	r22, 0x15	; 21
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	c3 dd       	rcall	.-1146   	; 0x3efe <writeI2C>
    4378:	4f ef       	ldi	r20, 0xFF	; 255
    437a:	66 e1       	ldi	r22, 0x16	; 22
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	bf dd       	rcall	.-1154   	; 0x3efe <writeI2C>
    4380:	4f ef       	ldi	r20, 0xFF	; 255
    4382:	67 e1       	ldi	r22, 0x17	; 23
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	bb dd       	rcall	.-1162   	; 0x3efe <writeI2C>
    4388:	4f ef       	ldi	r20, 0xFF	; 255
    438a:	64 e1       	ldi	r22, 0x14	; 20
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	b7 dd       	rcall	.-1170   	; 0x3efe <writeI2C>
    4390:	4f ef       	ldi	r20, 0xFF	; 255
    4392:	65 e1       	ldi	r22, 0x15	; 21
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	b3 dd       	rcall	.-1178   	; 0x3efe <writeI2C>
    4398:	4f ef       	ldi	r20, 0xFF	; 255
    439a:	66 e1       	ldi	r22, 0x16	; 22
    439c:	82 e0       	ldi	r24, 0x02	; 2
    439e:	af dd       	rcall	.-1186   	; 0x3efe <writeI2C>
    43a0:	4f ef       	ldi	r20, 0xFF	; 255
    43a2:	67 e1       	ldi	r22, 0x17	; 23
    43a4:	82 e0       	ldi	r24, 0x02	; 2
    43a6:	ab dd       	rcall	.-1194   	; 0x3efe <writeI2C>
    43a8:	4f ef       	ldi	r20, 0xFF	; 255
    43aa:	64 e1       	ldi	r22, 0x14	; 20
    43ac:	87 e0       	ldi	r24, 0x07	; 7
    43ae:	a7 dd       	rcall	.-1202   	; 0x3efe <writeI2C>
    43b0:	4f ef       	ldi	r20, 0xFF	; 255
    43b2:	65 e1       	ldi	r22, 0x15	; 21
    43b4:	87 e0       	ldi	r24, 0x07	; 7
    43b6:	a3 dd       	rcall	.-1210   	; 0x3efe <writeI2C>
    43b8:	4f ef       	ldi	r20, 0xFF	; 255
    43ba:	66 e1       	ldi	r22, 0x16	; 22
    43bc:	87 e0       	ldi	r24, 0x07	; 7
    43be:	9f dd       	rcall	.-1218   	; 0x3efe <writeI2C>
    43c0:	4f ef       	ldi	r20, 0xFF	; 255
    43c2:	67 e1       	ldi	r22, 0x17	; 23
    43c4:	87 e0       	ldi	r24, 0x07	; 7
    43c6:	9b dd       	rcall	.-1226   	; 0x3efe <writeI2C>
    43c8:	4f ef       	ldi	r20, 0xFF	; 255
    43ca:	64 e1       	ldi	r22, 0x14	; 20
    43cc:	84 e0       	ldi	r24, 0x04	; 4
    43ce:	97 dd       	rcall	.-1234   	; 0x3efe <writeI2C>
    43d0:	4f ef       	ldi	r20, 0xFF	; 255
    43d2:	65 e1       	ldi	r22, 0x15	; 21
    43d4:	84 e0       	ldi	r24, 0x04	; 4
    43d6:	93 dd       	rcall	.-1242   	; 0x3efe <writeI2C>
    43d8:	4f ef       	ldi	r20, 0xFF	; 255
    43da:	66 e1       	ldi	r22, 0x16	; 22
    43dc:	84 e0       	ldi	r24, 0x04	; 4
    43de:	8f dd       	rcall	.-1250   	; 0x3efe <writeI2C>
    43e0:	4f ef       	ldi	r20, 0xFF	; 255
    43e2:	67 e1       	ldi	r22, 0x17	; 23
    43e4:	84 e0       	ldi	r24, 0x04	; 4
    43e6:	8b dd       	rcall	.-1258   	; 0x3efe <writeI2C>
    43e8:	4f ef       	ldi	r20, 0xFF	; 255
    43ea:	64 e1       	ldi	r22, 0x14	; 20
    43ec:	85 e0       	ldi	r24, 0x05	; 5
    43ee:	87 dd       	rcall	.-1266   	; 0x3efe <writeI2C>
    43f0:	4f ef       	ldi	r20, 0xFF	; 255
    43f2:	65 e1       	ldi	r22, 0x15	; 21
    43f4:	85 e0       	ldi	r24, 0x05	; 5
    43f6:	83 dd       	rcall	.-1274   	; 0x3efe <writeI2C>
    43f8:	4f ef       	ldi	r20, 0xFF	; 255
    43fa:	66 e1       	ldi	r22, 0x16	; 22
    43fc:	85 e0       	ldi	r24, 0x05	; 5
    43fe:	7f dd       	rcall	.-1282   	; 0x3efe <writeI2C>
    4400:	4f ef       	ldi	r20, 0xFF	; 255
    4402:	67 e1       	ldi	r22, 0x17	; 23
    4404:	85 e0       	ldi	r24, 0x05	; 5
    4406:	7b dd       	rcall	.-1290   	; 0x3efe <writeI2C>
    4408:	4f ef       	ldi	r20, 0xFF	; 255
    440a:	62 e1       	ldi	r22, 0x12	; 18
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	77 dd       	rcall	.-1298   	; 0x3efe <writeI2C>
    4410:	4f ef       	ldi	r20, 0xFF	; 255
    4412:	62 e1       	ldi	r22, 0x12	; 18
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	73 dd       	rcall	.-1306   	; 0x3efe <writeI2C>
    4418:	4f ef       	ldi	r20, 0xFF	; 255
    441a:	62 e1       	ldi	r22, 0x12	; 18
    441c:	82 e0       	ldi	r24, 0x02	; 2
    441e:	6f dd       	rcall	.-1314   	; 0x3efe <writeI2C>
    4420:	4f ef       	ldi	r20, 0xFF	; 255
    4422:	62 e1       	ldi	r22, 0x12	; 18
    4424:	87 e0       	ldi	r24, 0x07	; 7
    4426:	6b dd       	rcall	.-1322   	; 0x3efe <writeI2C>
    4428:	4f ef       	ldi	r20, 0xFF	; 255
    442a:	62 e1       	ldi	r22, 0x12	; 18
    442c:	84 e0       	ldi	r24, 0x04	; 4
    442e:	67 dd       	rcall	.-1330   	; 0x3efe <writeI2C>
    4430:	4f ef       	ldi	r20, 0xFF	; 255
    4432:	62 e1       	ldi	r22, 0x12	; 18
    4434:	85 e0       	ldi	r24, 0x05	; 5
    4436:	63 cd       	rjmp	.-1338   	; 0x3efe <writeI2C>
    4438:	08 95       	ret

0000443a <setLED>:
    443a:	46 2f       	mov	r20, r22
    443c:	68 2f       	mov	r22, r24
    443e:	89 2f       	mov	r24, r25
    4440:	5e cd       	rjmp	.-1348   	; 0x3efe <writeI2C>
    4442:	08 95       	ret

00004444 <setLEDBank>:
    4444:	ab 01       	movw	r20, r22
    4446:	83 30       	cpi	r24, 0x03	; 3
    4448:	91 05       	cpc	r25, r1
    444a:	81 f0       	breq	.+32     	; 0x446c <setLEDBank+0x28>
    444c:	30 f4       	brcc	.+12     	; 0x445a <setLEDBank+0x16>
    444e:	81 30       	cpi	r24, 0x01	; 1
    4450:	91 05       	cpc	r25, r1
    4452:	b1 f0       	breq	.+44     	; 0x4480 <setLEDBank+0x3c>
    4454:	02 97       	sbiw	r24, 0x02	; 2
    4456:	41 f0       	breq	.+16     	; 0x4468 <setLEDBank+0x24>
    4458:	11 c0       	rjmp	.+34     	; 0x447c <setLEDBank+0x38>
    445a:	85 30       	cpi	r24, 0x05	; 5
    445c:	91 05       	cpc	r25, r1
    445e:	51 f0       	breq	.+20     	; 0x4474 <setLEDBank+0x30>
    4460:	38 f0       	brcs	.+14     	; 0x4470 <setLEDBank+0x2c>
    4462:	06 97       	sbiw	r24, 0x06	; 6
    4464:	49 f0       	breq	.+18     	; 0x4478 <setLEDBank+0x34>
    4466:	0a c0       	rjmp	.+20     	; 0x447c <setLEDBank+0x38>
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	0b c0       	rjmp	.+22     	; 0x4482 <setLEDBank+0x3e>
    446c:	82 e0       	ldi	r24, 0x02	; 2
    446e:	09 c0       	rjmp	.+18     	; 0x4482 <setLEDBank+0x3e>
    4470:	87 e0       	ldi	r24, 0x07	; 7
    4472:	07 c0       	rjmp	.+14     	; 0x4482 <setLEDBank+0x3e>
    4474:	84 e0       	ldi	r24, 0x04	; 4
    4476:	05 c0       	rjmp	.+10     	; 0x4482 <setLEDBank+0x3e>
    4478:	85 e0       	ldi	r24, 0x05	; 5
    447a:	03 c0       	rjmp	.+6      	; 0x4482 <setLEDBank+0x3e>
    447c:	8f ef       	ldi	r24, 0xFF	; 255
    447e:	01 c0       	rjmp	.+2      	; 0x4482 <setLEDBank+0x3e>
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	20 e1       	ldi	r18, 0x10	; 16
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	62 ea       	ldi	r22, 0xA2	; 162
    4488:	67 cd       	rjmp	.-1330   	; 0x3f58 <writeI2CPacket>
    448a:	08 95       	ret

0000448c <getLED>:


void getLED(uint16_t ledToGet, uint8_t* pwmLevel){
    448c:	0f 93       	push	r16
    448e:	1f 93       	push	r17
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	1f 92       	push	r1
    4496:	cd b7       	in	r28, 0x3d	; 61
    4498:	de b7       	in	r29, 0x3e	; 62
    449a:	8b 01       	movw	r16, r22
	uint8_t level = 0;
    449c:	19 82       	std	Y+1, r1	; 0x01
	
	readI2C(ledToGet>>8, ledToGet, &level);
    449e:	ae 01       	movw	r20, r28
    44a0:	4f 5f       	subi	r20, 0xFF	; 255
    44a2:	5f 4f       	sbci	r21, 0xFF	; 255
    44a4:	68 2f       	mov	r22, r24
    44a6:	89 2f       	mov	r24, r25
    44a8:	c6 dc       	rcall	.-1652   	; 0x3e36 <readI2C>
	
	*pwmLevel = level;
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
    44ac:	f8 01       	movw	r30, r16
    44ae:	80 83       	st	Z, r24

}
    44b0:	0f 90       	pop	r0
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

000044bc <setLEDglobalbrightness>:

void setLEDglobalbrightness(uint8_t globalBrightness){
    44bc:	cf 93       	push	r28
    44be:	c8 2f       	mov	r28, r24
	writeI2C(LED_SLAVE1_ADDR, LED_REG_GRPPWM, globalBrightness);
    44c0:	48 2f       	mov	r20, r24
    44c2:	62 e1       	ldi	r22, 0x12	; 18
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	1b dd       	rcall	.-1482   	; 0x3efe <writeI2C>
	writeI2C(LED_SLAVE2_ADDR, LED_REG_GRPPWM, globalBrightness);
    44c8:	4c 2f       	mov	r20, r28
    44ca:	62 e1       	ldi	r22, 0x12	; 18
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	17 dd       	rcall	.-1490   	; 0x3efe <writeI2C>
	writeI2C(LED_SLAVE3_ADDR, LED_REG_GRPPWM, globalBrightness);
    44d0:	4c 2f       	mov	r20, r28
    44d2:	62 e1       	ldi	r22, 0x12	; 18
    44d4:	82 e0       	ldi	r24, 0x02	; 2
    44d6:	13 dd       	rcall	.-1498   	; 0x3efe <writeI2C>
	writeI2C(LED_SLAVE4_ADDR, LED_REG_GRPPWM, globalBrightness);
    44d8:	4c 2f       	mov	r20, r28
    44da:	62 e1       	ldi	r22, 0x12	; 18
    44dc:	87 e0       	ldi	r24, 0x07	; 7
    44de:	0f dd       	rcall	.-1506   	; 0x3efe <writeI2C>
	writeI2C(LED_SLAVE5_ADDR, LED_REG_GRPPWM, globalBrightness);
    44e0:	4c 2f       	mov	r20, r28
    44e2:	62 e1       	ldi	r22, 0x12	; 18
    44e4:	84 e0       	ldi	r24, 0x04	; 4
    44e6:	0b dd       	rcall	.-1514   	; 0x3efe <writeI2C>
	writeI2C(LED_SLAVE6_ADDR, LED_REG_GRPPWM, globalBrightness);
    44e8:	4c 2f       	mov	r20, r28
    44ea:	62 e1       	ldi	r22, 0x12	; 18
    44ec:	85 e0       	ldi	r24, 0x05	; 5
    44ee:	07 dd       	rcall	.-1522   	; 0x3efe <writeI2C>
    44f0:	cf 91       	pop	r28
}
    44f2:	08 95       	ret

000044f4 <adc_handler>:
    44f4:	62 30       	cpi	r22, 0x02	; 2
	qdec_enabled(&gConfig3);
}

static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
	switch (ch_mask) {
    44f6:	a1 f0       	breq	.+40     	; 0x4520 <adc_handler+0x2c>
    44f8:	18 f4       	brcc	.+6      	; 0x4500 <adc_handler+0xc>
    44fa:	61 30       	cpi	r22, 0x01	; 1
    44fc:	31 f0       	breq	.+12     	; 0x450a <adc_handler+0x16>
    44fe:	08 95       	ret
    4500:	64 30       	cpi	r22, 0x04	; 4
    4502:	c9 f0       	breq	.+50     	; 0x4536 <adc_handler+0x42>
    4504:	68 30       	cpi	r22, 0x08	; 8
    4506:	11 f1       	breq	.+68     	; 0x454c <adc_handler+0x58>
    4508:	08 95       	ret
		case ADC_CH0:
			gJoy1_u_ana_val = result>>4;
    450a:	52 95       	swap	r21
    450c:	42 95       	swap	r20
    450e:	4f 70       	andi	r20, 0x0F	; 15
    4510:	45 27       	eor	r20, r21
    4512:	5f 70       	andi	r21, 0x0F	; 15
    4514:	45 27       	eor	r20, r21
    4516:	40 93 6e 29 	sts	0x296E, r20	; 0x80296e <gJoy1_u_ana_val>
    451a:	50 93 6f 29 	sts	0x296F, r21	; 0x80296f <gJoy1_u_ana_val+0x1>
			break;
    451e:	08 95       	ret
		case ADC_CH1:
			gJoy1_d_ana_val = result>>4;
    4520:	52 95       	swap	r21
    4522:	42 95       	swap	r20
    4524:	4f 70       	andi	r20, 0x0F	; 15
    4526:	45 27       	eor	r20, r21
    4528:	5f 70       	andi	r21, 0x0F	; 15
    452a:	45 27       	eor	r20, r21
    452c:	40 93 6c 29 	sts	0x296C, r20	; 0x80296c <gJoy1_d_ana_val>
    4530:	50 93 6d 29 	sts	0x296D, r21	; 0x80296d <gJoy1_d_ana_val+0x1>
			break;
    4534:	08 95       	ret
		case ADC_CH2:
			gJoy1_l_ana_val = result>>4;
    4536:	52 95       	swap	r21
    4538:	42 95       	swap	r20
    453a:	4f 70       	andi	r20, 0x0F	; 15
    453c:	45 27       	eor	r20, r21
    453e:	5f 70       	andi	r21, 0x0F	; 15
    4540:	45 27       	eor	r20, r21
    4542:	40 93 6a 29 	sts	0x296A, r20	; 0x80296a <gJoy1_l_ana_val>
    4546:	50 93 6b 29 	sts	0x296B, r21	; 0x80296b <gJoy1_l_ana_val+0x1>
			break;
    454a:	08 95       	ret
		case ADC_CH3:
			gJoy1_r_ana_val = result>>4;
    454c:	52 95       	swap	r21
    454e:	42 95       	swap	r20
    4550:	4f 70       	andi	r20, 0x0F	; 15
    4552:	45 27       	eor	r20, r21
    4554:	5f 70       	andi	r21, 0x0F	; 15
    4556:	45 27       	eor	r20, r21
    4558:	40 93 68 29 	sts	0x2968, r20	; 0x802968 <gJoy1_r_ana_val>
    455c:	50 93 69 29 	sts	0x2969, r21	; 0x802969 <gJoy1_r_ana_val+0x1>
    4560:	08 95       	ret

00004562 <checkJoystickUp>:
		}
	}	
	
}

void checkJoystickUp(uint8_t index, uint64_t mask){
    4562:	2f 92       	push	r2
    4564:	3f 92       	push	r3
    4566:	4f 92       	push	r4
    4568:	5f 92       	push	r5
    456a:	6f 92       	push	r6
    456c:	7f 92       	push	r7
    456e:	8f 92       	push	r8
    4570:	9f 92       	push	r9
    4572:	af 92       	push	r10
    4574:	bf 92       	push	r11
    4576:	cf 92       	push	r12
    4578:	df 92       	push	r13
    457a:	ef 92       	push	r14
    457c:	ff 92       	push	r15
    457e:	0f 93       	push	r16
    4580:	1f 93       	push	r17
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
    458a:	28 97       	sbiw	r28, 0x08	; 8
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	de bf       	out	0x3e, r29	; 62
    4590:	80 2e       	mov	r8, r16
    4592:	91 2e       	mov	r9, r17
    4594:	62 2e       	mov	r6, r18
    4596:	73 2e       	mov	r7, r19
    4598:	b4 2f       	mov	r27, r20
    459a:	a5 2f       	mov	r26, r21
    459c:	6f 83       	std	Y+7, r22	; 0x07
    459e:	78 87       	std	Y+8, r23	; 0x08
	if(input_type_lookup[index] == IT_KEYBOARD){
    45a0:	28 2f       	mov	r18, r24
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	2d 83       	std	Y+5, r18	; 0x05
    45a6:	3e 83       	std	Y+6, r19	; 0x06
    45a8:	c9 01       	movw	r24, r18
    45aa:	80 53       	subi	r24, 0x30	; 48
    45ac:	96 4d       	sbci	r25, 0xD6	; 214
    45ae:	fc 01       	movw	r30, r24
    45b0:	80 81       	ld	r24, Z
    45b2:	83 30       	cpi	r24, 0x03	; 3
    45b4:	09 f0       	breq	.+2      	; 0x45b8 <checkJoystickUp+0x56>
    45b6:	5b c0       	rjmp	.+182    	; 0x466e <checkJoystickUp+0x10c>
		//keyboard input
		if((gKeyPressed & mask) == mask){
    45b8:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    45bc:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    45c0:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    45c4:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    45c8:	e0 91 19 2a 	lds	r30, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    45cc:	f0 91 1a 2a 	lds	r31, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    45d0:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    45d4:	2b 83       	std	Y+3, r18	; 0x03
    45d6:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    45da:	3c 83       	std	Y+4, r19	; 0x04
    45dc:	a2 2c       	mov	r10, r2
    45de:	a0 22       	and	r10, r16
    45e0:	b3 2c       	mov	r11, r3
    45e2:	b1 22       	and	r11, r17
    45e4:	c4 2c       	mov	r12, r4
    45e6:	c6 20       	and	r12, r6
    45e8:	d5 2c       	mov	r13, r5
    45ea:	d7 20       	and	r13, r7
    45ec:	ee 2e       	mov	r14, r30
    45ee:	e4 22       	and	r14, r20
    45f0:	ff 2e       	mov	r15, r31
    45f2:	f5 22       	and	r15, r21
    45f4:	02 2f       	mov	r16, r18
    45f6:	06 23       	and	r16, r22
    45f8:	13 2f       	mov	r17, r19
    45fa:	17 23       	and	r17, r23
    45fc:	28 2d       	mov	r18, r8
    45fe:	39 2d       	mov	r19, r9
    4600:	46 2d       	mov	r20, r6
    4602:	57 2d       	mov	r21, r7
    4604:	6b 2f       	mov	r22, r27
    4606:	7a 2f       	mov	r23, r26
    4608:	8f 81       	ldd	r24, Y+7	; 0x07
    460a:	98 85       	ldd	r25, Y+8	; 0x08
    460c:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    4610:	09 f0       	breq	.+2      	; 0x4614 <checkJoystickUp+0xb2>
    4612:	92 c0       	rjmp	.+292    	; 0x4738 <checkJoystickUp+0x1d6>
			gKeyPressed ^= mask;
    4614:	82 24       	eor	r8, r2
    4616:	80 92 15 2a 	sts	0x2A15, r8	; 0x802a15 <gKeyPressed>
    461a:	93 24       	eor	r9, r3
    461c:	90 92 16 2a 	sts	0x2A16, r9	; 0x802a16 <gKeyPressed+0x1>
    4620:	84 2d       	mov	r24, r4
    4622:	86 25       	eor	r24, r6
    4624:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <gKeyPressed+0x2>
    4628:	85 2d       	mov	r24, r5
    462a:	87 25       	eor	r24, r7
    462c:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <gKeyPressed+0x3>
    4630:	be 27       	eor	r27, r30
    4632:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    4636:	af 27       	eor	r26, r31
    4638:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    463c:	ff 81       	ldd	r31, Y+7	; 0x07
    463e:	eb 81       	ldd	r30, Y+3	; 0x03
    4640:	fe 27       	eor	r31, r30
    4642:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4646:	e9 2f       	mov	r30, r25
    4648:	fc 81       	ldd	r31, Y+4	; 0x04
    464a:	ef 27       	eor	r30, r31
    464c:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			udi_hid_kbd_modifier_up(input_value2_lookup[index]);
    4650:	ed 81       	ldd	r30, Y+5	; 0x05
    4652:	fe 81       	ldd	r31, Y+6	; 0x06
    4654:	ea 58       	subi	r30, 0x8A	; 138
    4656:	f6 4d       	sbci	r31, 0xD6	; 214
    4658:	80 81       	ld	r24, Z
    465a:	0e 94 40 19 	call	0x3280	; 0x3280 <udi_hid_kbd_modifier_up>
			udi_hid_kbd_up(input_value_lookup[index]);
    465e:	ed 81       	ldd	r30, Y+5	; 0x05
    4660:	fe 81       	ldd	r31, Y+6	; 0x06
    4662:	ed 55       	subi	r30, 0x5D	; 93
    4664:	f6 4d       	sbci	r31, 0xD6	; 214
    4666:	80 81       	ld	r24, Z
    4668:	0e 94 61 19 	call	0x32c2	; 0x32c2 <udi_hid_kbd_up>
    466c:	65 c0       	rjmp	.+202    	; 0x4738 <checkJoystickUp+0x1d6>
		}	
	}	
	else if(input_type_lookup[index] == IT_MOUSE_BUTTON){
    466e:	84 30       	cpi	r24, 0x04	; 4
    4670:	09 f0       	breq	.+2      	; 0x4674 <checkJoystickUp+0x112>
    4672:	62 c0       	rjmp	.+196    	; 0x4738 <checkJoystickUp+0x1d6>
		//mouse button input
		if((gKeyPressed & mask) == mask){
    4674:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    4678:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    467c:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    4680:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    4684:	e0 91 19 2a 	lds	r30, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    4688:	f0 91 1a 2a 	lds	r31, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    468c:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    4690:	2b 83       	std	Y+3, r18	; 0x03
    4692:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    4696:	3c 83       	std	Y+4, r19	; 0x04
    4698:	a0 2e       	mov	r10, r16
    469a:	a2 20       	and	r10, r2
    469c:	b1 2e       	mov	r11, r17
    469e:	b3 20       	and	r11, r3
    46a0:	c6 2c       	mov	r12, r6
    46a2:	c4 20       	and	r12, r4
    46a4:	d7 2c       	mov	r13, r7
    46a6:	d5 20       	and	r13, r5
    46a8:	ee 2e       	mov	r14, r30
    46aa:	e4 22       	and	r14, r20
    46ac:	ff 2e       	mov	r15, r31
    46ae:	f5 22       	and	r15, r21
    46b0:	02 2f       	mov	r16, r18
    46b2:	8f 81       	ldd	r24, Y+7	; 0x07
    46b4:	08 23       	and	r16, r24
    46b6:	13 2f       	mov	r17, r19
    46b8:	28 85       	ldd	r18, Y+8	; 0x08
    46ba:	12 23       	and	r17, r18
    46bc:	28 2d       	mov	r18, r8
    46be:	39 2d       	mov	r19, r9
    46c0:	46 2d       	mov	r20, r6
    46c2:	57 2d       	mov	r21, r7
    46c4:	6b 2f       	mov	r22, r27
    46c6:	7a 2f       	mov	r23, r26
    46c8:	98 85       	ldd	r25, Y+8	; 0x08
    46ca:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    46ce:	a1 f5       	brne	.+104    	; 0x4738 <checkJoystickUp+0x1d6>
			gKeyPressed ^= mask;
    46d0:	82 24       	eor	r8, r2
    46d2:	80 92 15 2a 	sts	0x2A15, r8	; 0x802a15 <gKeyPressed>
    46d6:	93 24       	eor	r9, r3
    46d8:	90 92 16 2a 	sts	0x2A16, r9	; 0x802a16 <gKeyPressed+0x1>
    46dc:	86 2d       	mov	r24, r6
    46de:	84 25       	eor	r24, r4
    46e0:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <gKeyPressed+0x2>
    46e4:	87 2d       	mov	r24, r7
    46e6:	85 25       	eor	r24, r5
    46e8:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <gKeyPressed+0x3>
    46ec:	be 27       	eor	r27, r30
    46ee:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    46f2:	af 27       	eor	r26, r31
    46f4:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    46f8:	ff 81       	ldd	r31, Y+7	; 0x07
    46fa:	eb 81       	ldd	r30, Y+3	; 0x03
    46fc:	fe 27       	eor	r31, r30
    46fe:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4702:	e9 2f       	mov	r30, r25
    4704:	fc 81       	ldd	r31, Y+4	; 0x04
    4706:	ef 27       	eor	r30, r31
    4708:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			if(input_value_lookup[index] == 1){
    470c:	ed 81       	ldd	r30, Y+5	; 0x05
    470e:	fe 81       	ldd	r31, Y+6	; 0x06
    4710:	ed 55       	subi	r30, 0x5D	; 93
    4712:	f6 4d       	sbci	r31, 0xD6	; 214
    4714:	80 81       	ld	r24, Z
    4716:	81 30       	cpi	r24, 0x01	; 1
    4718:	21 f4       	brne	.+8      	; 0x4722 <checkJoystickUp+0x1c0>
				udi_hid_mouse_btnleft(0);
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <udi_hid_mouse_btnleft>
    4720:	0b c0       	rjmp	.+22     	; 0x4738 <checkJoystickUp+0x1d6>
			}
			else if(input_value_lookup[index] == 2){
    4722:	82 30       	cpi	r24, 0x02	; 2
    4724:	21 f4       	brne	.+8      	; 0x472e <checkJoystickUp+0x1cc>
				udi_hid_mouse_btnright(0);
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	0e 94 55 1a 	call	0x34aa	; 0x34aa <udi_hid_mouse_btnright>
    472c:	05 c0       	rjmp	.+10     	; 0x4738 <checkJoystickUp+0x1d6>
			}
			else if(input_value_lookup[index] == 3){
    472e:	83 30       	cpi	r24, 0x03	; 3
    4730:	19 f4       	brne	.+6      	; 0x4738 <checkJoystickUp+0x1d6>
				udi_hid_mouse_btnmiddle(0);
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <udi_hid_mouse_btnmiddle>
			}
		}		
	}
}
    4738:	28 96       	adiw	r28, 0x08	; 8
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	1f 91       	pop	r17
    4744:	0f 91       	pop	r16
    4746:	ff 90       	pop	r15
    4748:	ef 90       	pop	r14
    474a:	df 90       	pop	r13
    474c:	cf 90       	pop	r12
    474e:	bf 90       	pop	r11
    4750:	af 90       	pop	r10
    4752:	9f 90       	pop	r9
    4754:	8f 90       	pop	r8
    4756:	7f 90       	pop	r7
    4758:	6f 90       	pop	r6
    475a:	5f 90       	pop	r5
    475c:	4f 90       	pop	r4
    475e:	3f 90       	pop	r3
    4760:	2f 90       	pop	r2
    4762:	08 95       	ret

00004764 <checkButtonUp>:
			}
		}		
	}
}

void checkButtonUp(uint8_t index, uint64_t mask){
    4764:	2f 92       	push	r2
    4766:	3f 92       	push	r3
    4768:	4f 92       	push	r4
    476a:	5f 92       	push	r5
    476c:	6f 92       	push	r6
    476e:	7f 92       	push	r7
    4770:	8f 92       	push	r8
    4772:	9f 92       	push	r9
    4774:	af 92       	push	r10
    4776:	bf 92       	push	r11
    4778:	cf 92       	push	r12
    477a:	df 92       	push	r13
    477c:	ef 92       	push	r14
    477e:	ff 92       	push	r15
    4780:	0f 93       	push	r16
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	cd b7       	in	r28, 0x3d	; 61
    478a:	de b7       	in	r29, 0x3e	; 62
    478c:	28 97       	sbiw	r28, 0x08	; 8
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	80 2e       	mov	r8, r16
    4794:	91 2e       	mov	r9, r17
    4796:	62 2e       	mov	r6, r18
    4798:	73 2e       	mov	r7, r19
    479a:	b4 2f       	mov	r27, r20
    479c:	a5 2f       	mov	r26, r21
    479e:	6f 83       	std	Y+7, r22	; 0x07
    47a0:	78 87       	std	Y+8, r23	; 0x08
	if(input_type_lookup[index] == IT_KEYBOARD){
    47a2:	28 2f       	mov	r18, r24
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	2d 83       	std	Y+5, r18	; 0x05
    47a8:	3e 83       	std	Y+6, r19	; 0x06
    47aa:	c9 01       	movw	r24, r18
    47ac:	80 53       	subi	r24, 0x30	; 48
    47ae:	96 4d       	sbci	r25, 0xD6	; 214
    47b0:	fc 01       	movw	r30, r24
    47b2:	80 81       	ld	r24, Z
    47b4:	83 30       	cpi	r24, 0x03	; 3
    47b6:	09 f0       	breq	.+2      	; 0x47ba <checkButtonUp+0x56>
    47b8:	5b c0       	rjmp	.+182    	; 0x4870 <checkButtonUp+0x10c>
		//keyboard input
		if((gKeyPressed & mask) == mask){
    47ba:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    47be:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    47c2:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    47c6:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    47ca:	e0 91 19 2a 	lds	r30, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    47ce:	f0 91 1a 2a 	lds	r31, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    47d2:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    47d6:	2b 83       	std	Y+3, r18	; 0x03
    47d8:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    47dc:	3c 83       	std	Y+4, r19	; 0x04
    47de:	a2 2c       	mov	r10, r2
    47e0:	a0 22       	and	r10, r16
    47e2:	b3 2c       	mov	r11, r3
    47e4:	b1 22       	and	r11, r17
    47e6:	c4 2c       	mov	r12, r4
    47e8:	c6 20       	and	r12, r6
    47ea:	d5 2c       	mov	r13, r5
    47ec:	d7 20       	and	r13, r7
    47ee:	ee 2e       	mov	r14, r30
    47f0:	e4 22       	and	r14, r20
    47f2:	ff 2e       	mov	r15, r31
    47f4:	f5 22       	and	r15, r21
    47f6:	02 2f       	mov	r16, r18
    47f8:	06 23       	and	r16, r22
    47fa:	13 2f       	mov	r17, r19
    47fc:	17 23       	and	r17, r23
    47fe:	28 2d       	mov	r18, r8
    4800:	39 2d       	mov	r19, r9
    4802:	46 2d       	mov	r20, r6
    4804:	57 2d       	mov	r21, r7
    4806:	6b 2f       	mov	r22, r27
    4808:	7a 2f       	mov	r23, r26
    480a:	8f 81       	ldd	r24, Y+7	; 0x07
    480c:	98 85       	ldd	r25, Y+8	; 0x08
    480e:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    4812:	09 f0       	breq	.+2      	; 0x4816 <checkButtonUp+0xb2>
    4814:	92 c0       	rjmp	.+292    	; 0x493a <checkButtonUp+0x1d6>
			gKeyPressed ^= mask;
    4816:	82 24       	eor	r8, r2
    4818:	80 92 15 2a 	sts	0x2A15, r8	; 0x802a15 <gKeyPressed>
    481c:	93 24       	eor	r9, r3
    481e:	90 92 16 2a 	sts	0x2A16, r9	; 0x802a16 <gKeyPressed+0x1>
    4822:	84 2d       	mov	r24, r4
    4824:	86 25       	eor	r24, r6
    4826:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <gKeyPressed+0x2>
    482a:	85 2d       	mov	r24, r5
    482c:	87 25       	eor	r24, r7
    482e:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <gKeyPressed+0x3>
    4832:	be 27       	eor	r27, r30
    4834:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    4838:	af 27       	eor	r26, r31
    483a:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    483e:	ff 81       	ldd	r31, Y+7	; 0x07
    4840:	eb 81       	ldd	r30, Y+3	; 0x03
    4842:	fe 27       	eor	r31, r30
    4844:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4848:	e9 2f       	mov	r30, r25
    484a:	fc 81       	ldd	r31, Y+4	; 0x04
    484c:	ef 27       	eor	r30, r31
    484e:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			udi_hid_kbd_modifier_up(input_value2_lookup[index]);
    4852:	ed 81       	ldd	r30, Y+5	; 0x05
    4854:	fe 81       	ldd	r31, Y+6	; 0x06
    4856:	ea 58       	subi	r30, 0x8A	; 138
    4858:	f6 4d       	sbci	r31, 0xD6	; 214
    485a:	80 81       	ld	r24, Z
    485c:	0e 94 40 19 	call	0x3280	; 0x3280 <udi_hid_kbd_modifier_up>
			udi_hid_kbd_up(input_value_lookup[index]);
    4860:	ed 81       	ldd	r30, Y+5	; 0x05
    4862:	fe 81       	ldd	r31, Y+6	; 0x06
    4864:	ed 55       	subi	r30, 0x5D	; 93
    4866:	f6 4d       	sbci	r31, 0xD6	; 214
    4868:	80 81       	ld	r24, Z
    486a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <udi_hid_kbd_up>
    486e:	65 c0       	rjmp	.+202    	; 0x493a <checkButtonUp+0x1d6>
		}	
	}
	else if(input_type_lookup[index] == IT_MOUSE_BUTTON){
    4870:	84 30       	cpi	r24, 0x04	; 4
    4872:	09 f0       	breq	.+2      	; 0x4876 <checkButtonUp+0x112>
    4874:	62 c0       	rjmp	.+196    	; 0x493a <checkButtonUp+0x1d6>
		//mouse button input
		if((gKeyPressed & mask) == mask){
    4876:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    487a:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    487e:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    4882:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    4886:	e0 91 19 2a 	lds	r30, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    488a:	f0 91 1a 2a 	lds	r31, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    488e:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    4892:	2b 83       	std	Y+3, r18	; 0x03
    4894:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    4898:	3c 83       	std	Y+4, r19	; 0x04
    489a:	a0 2e       	mov	r10, r16
    489c:	a2 20       	and	r10, r2
    489e:	b1 2e       	mov	r11, r17
    48a0:	b3 20       	and	r11, r3
    48a2:	c6 2c       	mov	r12, r6
    48a4:	c4 20       	and	r12, r4
    48a6:	d7 2c       	mov	r13, r7
    48a8:	d5 20       	and	r13, r5
    48aa:	ee 2e       	mov	r14, r30
    48ac:	e4 22       	and	r14, r20
    48ae:	ff 2e       	mov	r15, r31
    48b0:	f5 22       	and	r15, r21
    48b2:	02 2f       	mov	r16, r18
    48b4:	8f 81       	ldd	r24, Y+7	; 0x07
    48b6:	08 23       	and	r16, r24
    48b8:	13 2f       	mov	r17, r19
    48ba:	28 85       	ldd	r18, Y+8	; 0x08
    48bc:	12 23       	and	r17, r18
    48be:	28 2d       	mov	r18, r8
    48c0:	39 2d       	mov	r19, r9
    48c2:	46 2d       	mov	r20, r6
    48c4:	57 2d       	mov	r21, r7
    48c6:	6b 2f       	mov	r22, r27
    48c8:	7a 2f       	mov	r23, r26
    48ca:	98 85       	ldd	r25, Y+8	; 0x08
    48cc:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    48d0:	a1 f5       	brne	.+104    	; 0x493a <checkButtonUp+0x1d6>
			gKeyPressed ^= mask;
    48d2:	82 24       	eor	r8, r2
    48d4:	80 92 15 2a 	sts	0x2A15, r8	; 0x802a15 <gKeyPressed>
    48d8:	93 24       	eor	r9, r3
    48da:	90 92 16 2a 	sts	0x2A16, r9	; 0x802a16 <gKeyPressed+0x1>
    48de:	86 2d       	mov	r24, r6
    48e0:	84 25       	eor	r24, r4
    48e2:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <gKeyPressed+0x2>
    48e6:	87 2d       	mov	r24, r7
    48e8:	85 25       	eor	r24, r5
    48ea:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <gKeyPressed+0x3>
    48ee:	be 27       	eor	r27, r30
    48f0:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    48f4:	af 27       	eor	r26, r31
    48f6:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    48fa:	ff 81       	ldd	r31, Y+7	; 0x07
    48fc:	eb 81       	ldd	r30, Y+3	; 0x03
    48fe:	fe 27       	eor	r31, r30
    4900:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4904:	e9 2f       	mov	r30, r25
    4906:	fc 81       	ldd	r31, Y+4	; 0x04
    4908:	ef 27       	eor	r30, r31
    490a:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			if(input_value_lookup[index] == 1){
    490e:	ed 81       	ldd	r30, Y+5	; 0x05
    4910:	fe 81       	ldd	r31, Y+6	; 0x06
    4912:	ed 55       	subi	r30, 0x5D	; 93
    4914:	f6 4d       	sbci	r31, 0xD6	; 214
    4916:	80 81       	ld	r24, Z
    4918:	81 30       	cpi	r24, 0x01	; 1
    491a:	21 f4       	brne	.+8      	; 0x4924 <checkButtonUp+0x1c0>
				udi_hid_mouse_btnleft(0);
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <udi_hid_mouse_btnleft>
    4922:	0b c0       	rjmp	.+22     	; 0x493a <checkButtonUp+0x1d6>
			}
			else if(input_value_lookup[index] == 2){
    4924:	82 30       	cpi	r24, 0x02	; 2
    4926:	21 f4       	brne	.+8      	; 0x4930 <checkButtonUp+0x1cc>
				udi_hid_mouse_btnright(0);
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	0e 94 55 1a 	call	0x34aa	; 0x34aa <udi_hid_mouse_btnright>
    492e:	05 c0       	rjmp	.+10     	; 0x493a <checkButtonUp+0x1d6>
			}
			else if(input_value_lookup[index] == 3){
    4930:	83 30       	cpi	r24, 0x03	; 3
    4932:	19 f4       	brne	.+6      	; 0x493a <checkButtonUp+0x1d6>
				udi_hid_mouse_btnmiddle(0);
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <udi_hid_mouse_btnmiddle>
			}
		}			
	}		
}
    493a:	28 96       	adiw	r28, 0x08	; 8
    493c:	cd bf       	out	0x3d, r28	; 61
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	1f 91       	pop	r17
    4946:	0f 91       	pop	r16
    4948:	ff 90       	pop	r15
    494a:	ef 90       	pop	r14
    494c:	df 90       	pop	r13
    494e:	cf 90       	pop	r12
    4950:	bf 90       	pop	r11
    4952:	af 90       	pop	r10
    4954:	9f 90       	pop	r9
    4956:	8f 90       	pop	r8
    4958:	7f 90       	pop	r7
    495a:	6f 90       	pop	r6
    495c:	5f 90       	pop	r5
    495e:	4f 90       	pop	r4
    4960:	3f 90       	pop	r3
    4962:	2f 90       	pop	r2
    4964:	08 95       	ret

00004966 <joyButtonPressed>:

void joyButtonPressed(uint8_t button, uint8_t joystick){
	uint8_t index = 0;
	uint8_t value = 0;
		
	switch(button){
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	fc 01       	movw	r30, r24
    496a:	31 97       	sbiw	r30, 0x01	; 1
    496c:	e0 32       	cpi	r30, 0x20	; 32
    496e:	f1 05       	cpc	r31, r1
    4970:	08 f0       	brcs	.+2      	; 0x4974 <joyButtonPressed+0xe>
    4972:	66 c0       	rjmp	.+204    	; 0x4a40 <joyButtonPressed+0xda>
    4974:	88 27       	eor	r24, r24
    4976:	e4 5f       	subi	r30, 0xF4	; 244
    4978:	fe 4f       	sbci	r31, 0xFE	; 254
    497a:	8f 4f       	sbci	r24, 0xFF	; 255
    497c:	0c 94 91 43 	jmp	0x8722	; 0x8722 <__tablejump2__>
		case 1:
			index = 8;
			value = 0x01;
    4980:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t index = 0;
	uint8_t value = 0;
		
	switch(button){
		case 1:
			index = 8;
    4982:	e8 e0       	ldi	r30, 0x08	; 8
    4984:	5f c0       	rjmp	.+190    	; 0x4a44 <joyButtonPressed+0xde>
			value = 0x01;
			break;
		case 2:
			index = 8;
			value = 0x02;
    4986:	82 e0       	ldi	r24, 0x02	; 2
		case 1:
			index = 8;
			value = 0x01;
			break;
		case 2:
			index = 8;
    4988:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x02;
			break;
    498a:	5c c0       	rjmp	.+184    	; 0x4a44 <joyButtonPressed+0xde>
		case 3:
			index = 8;
			value = 0x04;
    498c:	84 e0       	ldi	r24, 0x04	; 4
		case 2:
			index = 8;
			value = 0x02;
			break;
		case 3:
			index = 8;
    498e:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x04;
			break;
    4990:	59 c0       	rjmp	.+178    	; 0x4a44 <joyButtonPressed+0xde>
		case 4:
			index = 8;
			value = 0x08;
    4992:	88 e0       	ldi	r24, 0x08	; 8
		case 3:
			index = 8;
			value = 0x04;
			break;
		case 4:
			index = 8;
    4994:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x08;
			break;
    4996:	56 c0       	rjmp	.+172    	; 0x4a44 <joyButtonPressed+0xde>
		case 5:
			index = 8;
			value = 0x10;
    4998:	80 e1       	ldi	r24, 0x10	; 16
		case 4:
			index = 8;
			value = 0x08;
			break;
		case 5:
			index = 8;
    499a:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x10;
			break;
    499c:	53 c0       	rjmp	.+166    	; 0x4a44 <joyButtonPressed+0xde>
		case 6:
			index = 8;
			value = 0x20;
    499e:	80 e2       	ldi	r24, 0x20	; 32
		case 5:
			index = 8;
			value = 0x10;
			break;
		case 6:
			index = 8;
    49a0:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x20;
			break;
    49a2:	50 c0       	rjmp	.+160    	; 0x4a44 <joyButtonPressed+0xde>
		case 7:
			index = 8;
			value = 0x40;
    49a4:	80 e4       	ldi	r24, 0x40	; 64
		case 6:
			index = 8;
			value = 0x20;
			break;
		case 7:
			index = 8;
    49a6:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x40;
			break;
    49a8:	4d c0       	rjmp	.+154    	; 0x4a44 <joyButtonPressed+0xde>
		case 8:
			index = 8;
			value = 0x80;
    49aa:	80 e8       	ldi	r24, 0x80	; 128
		case 7:
			index = 8;
			value = 0x40;
			break;
		case 8:
			index = 8;
    49ac:	e8 e0       	ldi	r30, 0x08	; 8
			value = 0x80;
			break;
    49ae:	4a c0       	rjmp	.+148    	; 0x4a44 <joyButtonPressed+0xde>
		case 9:
			index = 9;
			value = 0x01;
    49b0:	81 e0       	ldi	r24, 0x01	; 1
		case 8:
			index = 8;
			value = 0x80;
			break;
		case 9:
			index = 9;
    49b2:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x01;
			break;
    49b4:	47 c0       	rjmp	.+142    	; 0x4a44 <joyButtonPressed+0xde>
		case 10:
			index = 9;
			value = 0x02;
    49b6:	82 e0       	ldi	r24, 0x02	; 2
		case 9:
			index = 9;
			value = 0x01;
			break;
		case 10:
			index = 9;
    49b8:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x02;
			break;
    49ba:	44 c0       	rjmp	.+136    	; 0x4a44 <joyButtonPressed+0xde>
		case 11:
			index = 9;
			value = 0x04;
    49bc:	84 e0       	ldi	r24, 0x04	; 4
		case 10:
			index = 9;
			value = 0x02;
			break;
		case 11:
			index = 9;
    49be:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x04;
			break;
    49c0:	41 c0       	rjmp	.+130    	; 0x4a44 <joyButtonPressed+0xde>
		case 12:
			index = 9;
			value = 0x08;
    49c2:	88 e0       	ldi	r24, 0x08	; 8
		case 11:
			index = 9;
			value = 0x04;
			break;
		case 12:
			index = 9;
    49c4:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x08;
			break;
    49c6:	3e c0       	rjmp	.+124    	; 0x4a44 <joyButtonPressed+0xde>
		case 13:
			index = 9;
			value = 0x10;
    49c8:	80 e1       	ldi	r24, 0x10	; 16
		case 12:
			index = 9;
			value = 0x08;
			break;
		case 13:
			index = 9;
    49ca:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x10;
			break;
    49cc:	3b c0       	rjmp	.+118    	; 0x4a44 <joyButtonPressed+0xde>
		case 14:
			index = 9;
			value = 0x20;
    49ce:	80 e2       	ldi	r24, 0x20	; 32
		case 13:
			index = 9;
			value = 0x10;
			break;
		case 14:
			index = 9;
    49d0:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x20;
			break;
    49d2:	38 c0       	rjmp	.+112    	; 0x4a44 <joyButtonPressed+0xde>
		case 15:
			index = 9;
			value = 0x40;
    49d4:	80 e4       	ldi	r24, 0x40	; 64
		case 14:
			index = 9;
			value = 0x20;
			break;
		case 15:
			index = 9;
    49d6:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x40;
			break;
    49d8:	35 c0       	rjmp	.+106    	; 0x4a44 <joyButtonPressed+0xde>
		case 16:
			index = 9;
			value = 0x80;
    49da:	80 e8       	ldi	r24, 0x80	; 128
		case 15:
			index = 9;
			value = 0x40;
			break;
		case 16:
			index = 9;
    49dc:	e9 e0       	ldi	r30, 0x09	; 9
			value = 0x80;
			break;
    49de:	32 c0       	rjmp	.+100    	; 0x4a44 <joyButtonPressed+0xde>
		case 17:
			index = 10;
			value = 0x01;
    49e0:	81 e0       	ldi	r24, 0x01	; 1
		case 16:
			index = 9;
			value = 0x80;
			break;
		case 17:
			index = 10;
    49e2:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x01;
			break;
    49e4:	2f c0       	rjmp	.+94     	; 0x4a44 <joyButtonPressed+0xde>
		case 18:
			index = 10;
			value = 0x02;
    49e6:	82 e0       	ldi	r24, 0x02	; 2
		case 17:
			index = 10;
			value = 0x01;
			break;
		case 18:
			index = 10;
    49e8:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x02;
			break;
    49ea:	2c c0       	rjmp	.+88     	; 0x4a44 <joyButtonPressed+0xde>
		case 19:
			index = 10;
			value = 0x04;
    49ec:	84 e0       	ldi	r24, 0x04	; 4
		case 18:
			index = 10;
			value = 0x02;
			break;
		case 19:
			index = 10;
    49ee:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x04;
			break;
    49f0:	29 c0       	rjmp	.+82     	; 0x4a44 <joyButtonPressed+0xde>
		case 20:
			index = 10;
			value = 0x08;
    49f2:	88 e0       	ldi	r24, 0x08	; 8
		case 19:
			index = 10;
			value = 0x04;
			break;
		case 20:
			index = 10;
    49f4:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x08;
			break;
    49f6:	26 c0       	rjmp	.+76     	; 0x4a44 <joyButtonPressed+0xde>
		case 21:
			index = 10;
			value = 0x10;
    49f8:	80 e1       	ldi	r24, 0x10	; 16
		case 20:
			index = 10;
			value = 0x08;
			break;
		case 21:
			index = 10;
    49fa:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x10;
			break;
    49fc:	23 c0       	rjmp	.+70     	; 0x4a44 <joyButtonPressed+0xde>
		case 22:
			index = 10;
			value = 0x20;
    49fe:	80 e2       	ldi	r24, 0x20	; 32
		case 21:
			index = 10;
			value = 0x10;
			break;
		case 22:
			index = 10;
    4a00:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x20;
			break;
    4a02:	20 c0       	rjmp	.+64     	; 0x4a44 <joyButtonPressed+0xde>
		case 23:
			index = 10;
			value = 0x40;
    4a04:	80 e4       	ldi	r24, 0x40	; 64
		case 22:
			index = 10;
			value = 0x20;
			break;
		case 23:
			index = 10;
    4a06:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x40;
			break;
    4a08:	1d c0       	rjmp	.+58     	; 0x4a44 <joyButtonPressed+0xde>
		case 24:
			index = 10;
			value = 0x80;
    4a0a:	80 e8       	ldi	r24, 0x80	; 128
		case 23:
			index = 10;
			value = 0x40;
			break;
		case 24:
			index = 10;
    4a0c:	ea e0       	ldi	r30, 0x0A	; 10
			value = 0x80;
			break;
    4a0e:	1a c0       	rjmp	.+52     	; 0x4a44 <joyButtonPressed+0xde>
		case 25:
			index = 11;
			value = 0x01;
    4a10:	81 e0       	ldi	r24, 0x01	; 1
		case 24:
			index = 10;
			value = 0x80;
			break;
		case 25:
			index = 11;
    4a12:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x01;
			break;
    4a14:	17 c0       	rjmp	.+46     	; 0x4a44 <joyButtonPressed+0xde>
		case 26:
			index = 11;
			value = 0x02;
    4a16:	82 e0       	ldi	r24, 0x02	; 2
		case 25:
			index = 11;
			value = 0x01;
			break;
		case 26:
			index = 11;
    4a18:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x02;
			break;
    4a1a:	14 c0       	rjmp	.+40     	; 0x4a44 <joyButtonPressed+0xde>
		case 27:
			index = 11;
			value = 0x04;
    4a1c:	84 e0       	ldi	r24, 0x04	; 4
		case 26:
			index = 11;
			value = 0x02;
			break;
		case 27:
			index = 11;
    4a1e:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x04;
			break;
    4a20:	11 c0       	rjmp	.+34     	; 0x4a44 <joyButtonPressed+0xde>
		case 28:
			index = 11;
			value = 0x08;
    4a22:	88 e0       	ldi	r24, 0x08	; 8
		case 27:
			index = 11;
			value = 0x04;
			break;
		case 28:
			index = 11;
    4a24:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x08;
			break;
    4a26:	0e c0       	rjmp	.+28     	; 0x4a44 <joyButtonPressed+0xde>
		case 29:
			index = 11;
			value = 0x10;
    4a28:	80 e1       	ldi	r24, 0x10	; 16
		case 28:
			index = 11;
			value = 0x08;
			break;
		case 29:
			index = 11;
    4a2a:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x10;
			break;
    4a2c:	0b c0       	rjmp	.+22     	; 0x4a44 <joyButtonPressed+0xde>
		case 30:
			index = 11;
			value = 0x20;
    4a2e:	80 e2       	ldi	r24, 0x20	; 32
		case 29:
			index = 11;
			value = 0x10;
			break;
		case 30:
			index = 11;
    4a30:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x20;
			break;
    4a32:	08 c0       	rjmp	.+16     	; 0x4a44 <joyButtonPressed+0xde>
		case 31:
			index = 11;
			value = 0x40;
    4a34:	80 e4       	ldi	r24, 0x40	; 64
		case 30:
			index = 11;
			value = 0x20;
			break;
		case 31:
			index = 11;
    4a36:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x40;
			break;
    4a38:	05 c0       	rjmp	.+10     	; 0x4a44 <joyButtonPressed+0xde>
		case 32:
			index = 11;
			value = 0x80;
    4a3a:	80 e8       	ldi	r24, 0x80	; 128
		case 31:
			index = 11;
			value = 0x40;
			break;
		case 32:
			index = 11;
    4a3c:	eb e0       	ldi	r30, 0x0B	; 11
			value = 0x80;
			break;
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <joyButtonPressed+0xde>
	}		
}

void joyButtonPressed(uint8_t button, uint8_t joystick){
	uint8_t index = 0;
	uint8_t value = 0;
    4a40:	80 e0       	ldi	r24, 0x00	; 0
		}			
	}		
}

void joyButtonPressed(uint8_t button, uint8_t joystick){
	uint8_t index = 0;
    4a42:	e0 e0       	ldi	r30, 0x00	; 0
			value = 0x80;
			break;
		default:
			break;	
	}
	if(joystick == 1){
    4a44:	61 30       	cpi	r22, 0x01	; 1
    4a46:	39 f4       	brne	.+14     	; 0x4a56 <joyButtonPressed+0xf0>
		gJoy1Buf[index] |= value;
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	e7 5f       	subi	r30, 0xF7	; 247
    4a4c:	f5 4d       	sbci	r31, 0xD5	; 213
    4a4e:	90 81       	ld	r25, Z
    4a50:	89 2b       	or	r24, r25
    4a52:	80 83       	st	Z, r24
    4a54:	08 95       	ret
	}
	else if(joystick == 2){
    4a56:	62 30       	cpi	r22, 0x02	; 2
    4a58:	31 f4       	brne	.+12     	; 0x4a66 <joyButtonPressed+0x100>
		gJoy2Buf[index] |= value;
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	e3 50       	subi	r30, 0x03	; 3
    4a5e:	f6 4d       	sbci	r31, 0xD6	; 214
    4a60:	90 81       	ld	r25, Z
    4a62:	89 2b       	or	r24, r25
    4a64:	80 83       	st	Z, r24
    4a66:	08 95       	ret

00004a68 <checkJoystickDown>:
	adcch_set_input(&adcch_conf, JOY1_R_ADC_INPUT, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&JOY_ADC_MODULE, ADC_CH3, &adcch_conf);
	
}

void checkJoystickDown(uint8_t index, uint64_t mask){
    4a68:	2f 92       	push	r2
    4a6a:	3f 92       	push	r3
    4a6c:	4f 92       	push	r4
    4a6e:	5f 92       	push	r5
    4a70:	6f 92       	push	r6
    4a72:	7f 92       	push	r7
    4a74:	8f 92       	push	r8
    4a76:	9f 92       	push	r9
    4a78:	af 92       	push	r10
    4a7a:	bf 92       	push	r11
    4a7c:	cf 92       	push	r12
    4a7e:	df 92       	push	r13
    4a80:	ef 92       	push	r14
    4a82:	ff 92       	push	r15
    4a84:	0f 93       	push	r16
    4a86:	1f 93       	push	r17
    4a88:	cf 93       	push	r28
    4a8a:	df 93       	push	r29
    4a8c:	00 d0       	rcall	.+0      	; 0x4a8e <checkJoystickDown+0x26>
    4a8e:	00 d0       	rcall	.+0      	; 0x4a90 <checkJoystickDown+0x28>
    4a90:	cd b7       	in	r28, 0x3d	; 61
    4a92:	de b7       	in	r29, 0x3e	; 62
	if((input_type_lookup[index] & IT_JOY1_DIG_OFFSET) == IT_JOY1_DIG_OFFSET){
    4a94:	a8 2f       	mov	r26, r24
    4a96:	b0 e0       	ldi	r27, 0x00	; 0
    4a98:	ad 83       	std	Y+5, r26	; 0x05
    4a9a:	be 83       	std	Y+6, r27	; 0x06
    4a9c:	fd 01       	movw	r30, r26
    4a9e:	e0 53       	subi	r30, 0x30	; 48
    4aa0:	f6 4d       	sbci	r31, 0xD6	; 214
    4aa2:	80 81       	ld	r24, Z
    4aa4:	84 ff       	sbrs	r24, 4
    4aa6:	09 c0       	rjmp	.+18     	; 0x4aba <checkJoystickDown+0x52>
		//digital joystick input
		gJoy1Buf[input_type_lookup[index] - IT_JOY1_DIG_OFFSET] = input_value_lookup[index]; 
    4aa8:	e8 2f       	mov	r30, r24
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	e7 50       	subi	r30, 0x07	; 7
    4aae:	f6 4d       	sbci	r31, 0xD6	; 214
    4ab0:	ad 55       	subi	r26, 0x5D	; 93
    4ab2:	b6 4d       	sbci	r27, 0xD6	; 214
    4ab4:	8c 91       	ld	r24, X
    4ab6:	80 83       	st	Z, r24
    4ab8:	ef c0       	rjmp	.+478    	; 0x4c98 <checkJoystickDown+0x230>
	}
	else if((input_type_lookup[index] & IT_JOY2_DIG_OFFSET) == IT_JOY2_DIG_OFFSET){
    4aba:	86 ff       	sbrs	r24, 6
    4abc:	0c c0       	rjmp	.+24     	; 0x4ad6 <checkJoystickDown+0x6e>
		//digital joystick input
		gJoy2Buf[input_type_lookup[index] - IT_JOY2_DIG_OFFSET] = input_value_lookup[index];
    4abe:	e8 2f       	mov	r30, r24
    4ac0:	f0 e0       	ldi	r31, 0x00	; 0
    4ac2:	e3 54       	subi	r30, 0x43	; 67
    4ac4:	f6 4d       	sbci	r31, 0xD6	; 214
    4ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aca:	8d 55       	subi	r24, 0x5D	; 93
    4acc:	96 4d       	sbci	r25, 0xD6	; 214
    4ace:	dc 01       	movw	r26, r24
    4ad0:	8c 91       	ld	r24, X
    4ad2:	80 83       	st	Z, r24
    4ad4:	e1 c0       	rjmp	.+450    	; 0x4c98 <checkJoystickDown+0x230>
    4ad6:	e7 2f       	mov	r30, r23
    4ad8:	f6 2f       	mov	r31, r22
    4ada:	a5 2f       	mov	r26, r21
    4adc:	b4 2f       	mov	r27, r20
    4ade:	93 2e       	mov	r9, r19
    4ae0:	82 2e       	mov	r8, r18
    4ae2:	71 2e       	mov	r7, r17
    4ae4:	60 2e       	mov	r6, r16
	}
	else if(input_type_lookup[index] == IT_JOY1_BUTTON){
    4ae6:	81 30       	cpi	r24, 0x01	; 1
    4ae8:	41 f4       	brne	.+16     	; 0x4afa <checkJoystickDown+0x92>
		//joystick button input
		joyButtonPressed(input_value_lookup[index], 1);
    4aea:	ed 81       	ldd	r30, Y+5	; 0x05
    4aec:	fe 81       	ldd	r31, Y+6	; 0x06
    4aee:	ed 55       	subi	r30, 0x5D	; 93
    4af0:	f6 4d       	sbci	r31, 0xD6	; 214
    4af2:	61 e0       	ldi	r22, 0x01	; 1
    4af4:	80 81       	ld	r24, Z
    4af6:	37 df       	rcall	.-402    	; 0x4966 <joyButtonPressed>
    4af8:	cf c0       	rjmp	.+414    	; 0x4c98 <checkJoystickDown+0x230>
	}
	else if(input_type_lookup[index] == IT_JOY2_BUTTON){
    4afa:	82 30       	cpi	r24, 0x02	; 2
    4afc:	59 f4       	brne	.+22     	; 0x4b14 <checkJoystickDown+0xac>
		//joystick button input
		joyButtonPressed(input_value_lookup[index], 2);
    4afe:	8d 81       	ldd	r24, Y+5	; 0x05
    4b00:	9e 81       	ldd	r25, Y+6	; 0x06
    4b02:	8d 55       	subi	r24, 0x5D	; 93
    4b04:	96 4d       	sbci	r25, 0xD6	; 214
    4b06:	8d 83       	std	Y+5, r24	; 0x05
    4b08:	9e 83       	std	Y+6, r25	; 0x06
    4b0a:	62 e0       	ldi	r22, 0x02	; 2
    4b0c:	dc 01       	movw	r26, r24
    4b0e:	8c 91       	ld	r24, X
    4b10:	2a df       	rcall	.-428    	; 0x4966 <joyButtonPressed>
    4b12:	c2 c0       	rjmp	.+388    	; 0x4c98 <checkJoystickDown+0x230>
	}
	else if(input_type_lookup[index] == IT_MOUSE_BUTTON){
    4b14:	84 30       	cpi	r24, 0x04	; 4
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <checkJoystickDown+0xb2>
    4b18:	63 c0       	rjmp	.+198    	; 0x4be0 <checkJoystickDown+0x178>
		//mouse button input
		if((gKeyPressed & mask) != mask){
    4b1a:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    4b1e:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    4b22:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    4b26:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    4b2a:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    4b2e:	89 83       	std	Y+1, r24	; 0x01
    4b30:	90 91 1a 2a 	lds	r25, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    4b34:	9a 83       	std	Y+2, r25	; 0x02
    4b36:	80 91 1b 2a 	lds	r24, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    4b3a:	8b 83       	std	Y+3, r24	; 0x03
    4b3c:	90 91 1c 2a 	lds	r25, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    4b40:	9c 83       	std	Y+4, r25	; 0x04
    4b42:	a2 2c       	mov	r10, r2
    4b44:	a0 22       	and	r10, r16
    4b46:	b3 2c       	mov	r11, r3
    4b48:	b1 22       	and	r11, r17
    4b4a:	c4 2c       	mov	r12, r4
    4b4c:	c2 22       	and	r12, r18
    4b4e:	d5 2c       	mov	r13, r5
    4b50:	d3 22       	and	r13, r19
    4b52:	e9 80       	ldd	r14, Y+1	; 0x01
    4b54:	e4 22       	and	r14, r20
    4b56:	fa 80       	ldd	r15, Y+2	; 0x02
    4b58:	f5 22       	and	r15, r21
    4b5a:	08 2f       	mov	r16, r24
    4b5c:	06 23       	and	r16, r22
    4b5e:	19 2f       	mov	r17, r25
    4b60:	17 23       	and	r17, r23
    4b62:	26 2d       	mov	r18, r6
    4b64:	37 2d       	mov	r19, r7
    4b66:	48 2d       	mov	r20, r8
    4b68:	59 2d       	mov	r21, r9
    4b6a:	6b 2f       	mov	r22, r27
    4b6c:	7a 2f       	mov	r23, r26
    4b6e:	8f 2f       	mov	r24, r31
    4b70:	9e 2f       	mov	r25, r30
    4b72:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    4b76:	09 f4       	brne	.+2      	; 0x4b7a <checkJoystickDown+0x112>
    4b78:	8f c0       	rjmp	.+286    	; 0x4c98 <checkJoystickDown+0x230>
			gKeyPressed |= mask;
    4b7a:	62 28       	or	r6, r2
    4b7c:	60 92 15 2a 	sts	0x2A15, r6	; 0x802a15 <gKeyPressed>
    4b80:	73 28       	or	r7, r3
    4b82:	70 92 16 2a 	sts	0x2A16, r7	; 0x802a16 <gKeyPressed+0x1>
    4b86:	84 28       	or	r8, r4
    4b88:	80 92 17 2a 	sts	0x2A17, r8	; 0x802a17 <gKeyPressed+0x2>
    4b8c:	95 28       	or	r9, r5
    4b8e:	90 92 18 2a 	sts	0x2A18, r9	; 0x802a18 <gKeyPressed+0x3>
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	b8 2b       	or	r27, r24
    4b96:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    4b9a:	ba 81       	ldd	r27, Y+2	; 0x02
    4b9c:	ab 2b       	or	r26, r27
    4b9e:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    4ba2:	ab 81       	ldd	r26, Y+3	; 0x03
    4ba4:	fa 2b       	or	r31, r26
    4ba6:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4baa:	bc 81       	ldd	r27, Y+4	; 0x04
    4bac:	eb 2b       	or	r30, r27
    4bae:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			if(input_value_lookup[index] == 1){
    4bb2:	ed 81       	ldd	r30, Y+5	; 0x05
    4bb4:	fe 81       	ldd	r31, Y+6	; 0x06
    4bb6:	ed 55       	subi	r30, 0x5D	; 93
    4bb8:	f6 4d       	sbci	r31, 0xD6	; 214
    4bba:	80 81       	ld	r24, Z
    4bbc:	81 30       	cpi	r24, 0x01	; 1
    4bbe:	19 f4       	brne	.+6      	; 0x4bc6 <checkJoystickDown+0x15e>
				udi_hid_mouse_btnleft(1);
    4bc0:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <udi_hid_mouse_btnleft>
    4bc4:	69 c0       	rjmp	.+210    	; 0x4c98 <checkJoystickDown+0x230>
			}
			else if(input_value_lookup[index] == 2){
    4bc6:	82 30       	cpi	r24, 0x02	; 2
    4bc8:	21 f4       	brne	.+8      	; 0x4bd2 <checkJoystickDown+0x16a>
				udi_hid_mouse_btnright(1);
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	0e 94 55 1a 	call	0x34aa	; 0x34aa <udi_hid_mouse_btnright>
    4bd0:	63 c0       	rjmp	.+198    	; 0x4c98 <checkJoystickDown+0x230>
			}
			else if(input_value_lookup[index] == 3){
    4bd2:	83 30       	cpi	r24, 0x03	; 3
    4bd4:	09 f0       	breq	.+2      	; 0x4bd8 <checkJoystickDown+0x170>
    4bd6:	60 c0       	rjmp	.+192    	; 0x4c98 <checkJoystickDown+0x230>
				udi_hid_mouse_btnmiddle(1);
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <udi_hid_mouse_btnmiddle>
    4bde:	5c c0       	rjmp	.+184    	; 0x4c98 <checkJoystickDown+0x230>
			}
		}		
	}
	else if(input_type_lookup[index] == IT_KEYBOARD){
    4be0:	83 30       	cpi	r24, 0x03	; 3
    4be2:	09 f0       	breq	.+2      	; 0x4be6 <checkJoystickDown+0x17e>
    4be4:	59 c0       	rjmp	.+178    	; 0x4c98 <checkJoystickDown+0x230>
		//keyboard input
		if((gKeyPressed & mask) != mask){
    4be6:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    4bea:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    4bee:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    4bf2:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    4bf6:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    4bfa:	89 83       	std	Y+1, r24	; 0x01
    4bfc:	90 91 1a 2a 	lds	r25, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    4c00:	9a 83       	std	Y+2, r25	; 0x02
    4c02:	80 91 1b 2a 	lds	r24, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    4c06:	8b 83       	std	Y+3, r24	; 0x03
    4c08:	90 91 1c 2a 	lds	r25, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    4c0c:	9c 83       	std	Y+4, r25	; 0x04
    4c0e:	a0 2e       	mov	r10, r16
    4c10:	a2 20       	and	r10, r2
    4c12:	b1 2e       	mov	r11, r17
    4c14:	b3 20       	and	r11, r3
    4c16:	c2 2e       	mov	r12, r18
    4c18:	c4 20       	and	r12, r4
    4c1a:	d3 2e       	mov	r13, r19
    4c1c:	d5 20       	and	r13, r5
    4c1e:	e9 80       	ldd	r14, Y+1	; 0x01
    4c20:	e4 22       	and	r14, r20
    4c22:	fa 80       	ldd	r15, Y+2	; 0x02
    4c24:	f5 22       	and	r15, r21
    4c26:	08 2f       	mov	r16, r24
    4c28:	06 23       	and	r16, r22
    4c2a:	19 2f       	mov	r17, r25
    4c2c:	17 23       	and	r17, r23
    4c2e:	26 2d       	mov	r18, r6
    4c30:	37 2d       	mov	r19, r7
    4c32:	48 2d       	mov	r20, r8
    4c34:	59 2d       	mov	r21, r9
    4c36:	6b 2f       	mov	r22, r27
    4c38:	7a 2f       	mov	r23, r26
    4c3a:	8f 2f       	mov	r24, r31
    4c3c:	9e 2f       	mov	r25, r30
    4c3e:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    4c42:	51 f1       	breq	.+84     	; 0x4c98 <checkJoystickDown+0x230>
			gKeyPressed |= mask;
    4c44:	62 28       	or	r6, r2
    4c46:	60 92 15 2a 	sts	0x2A15, r6	; 0x802a15 <gKeyPressed>
    4c4a:	73 28       	or	r7, r3
    4c4c:	70 92 16 2a 	sts	0x2A16, r7	; 0x802a16 <gKeyPressed+0x1>
    4c50:	84 28       	or	r8, r4
    4c52:	80 92 17 2a 	sts	0x2A17, r8	; 0x802a17 <gKeyPressed+0x2>
    4c56:	95 28       	or	r9, r5
    4c58:	90 92 18 2a 	sts	0x2A18, r9	; 0x802a18 <gKeyPressed+0x3>
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	b8 2b       	or	r27, r24
    4c60:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    4c64:	ba 81       	ldd	r27, Y+2	; 0x02
    4c66:	ab 2b       	or	r26, r27
    4c68:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    4c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    4c6e:	fa 2b       	or	r31, r26
    4c70:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4c74:	bc 81       	ldd	r27, Y+4	; 0x04
    4c76:	eb 2b       	or	r30, r27
    4c78:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			udi_hid_kbd_modifier_down(input_value2_lookup[index]);
    4c7c:	ed 81       	ldd	r30, Y+5	; 0x05
    4c7e:	fe 81       	ldd	r31, Y+6	; 0x06
    4c80:	ea 58       	subi	r30, 0x8A	; 138
    4c82:	f6 4d       	sbci	r31, 0xD6	; 214
    4c84:	80 81       	ld	r24, Z
    4c86:	0e 94 51 19 	call	0x32a2	; 0x32a2 <udi_hid_kbd_modifier_down>
			udi_hid_kbd_down(input_value_lookup[index]);
    4c8a:	ed 81       	ldd	r30, Y+5	; 0x05
    4c8c:	fe 81       	ldd	r31, Y+6	; 0x06
    4c8e:	ed 55       	subi	r30, 0x5D	; 93
    4c90:	f6 4d       	sbci	r31, 0xD6	; 214
    4c92:	80 81       	ld	r24, Z
    4c94:	0e 94 93 19 	call	0x3326	; 0x3326 <udi_hid_kbd_down>
		}
	}	
	
}
    4c98:	26 96       	adiw	r28, 0x06	; 6
    4c9a:	cd bf       	out	0x3d, r28	; 61
    4c9c:	de bf       	out	0x3e, r29	; 62
    4c9e:	df 91       	pop	r29
    4ca0:	cf 91       	pop	r28
    4ca2:	1f 91       	pop	r17
    4ca4:	0f 91       	pop	r16
    4ca6:	ff 90       	pop	r15
    4ca8:	ef 90       	pop	r14
    4caa:	df 90       	pop	r13
    4cac:	cf 90       	pop	r12
    4cae:	bf 90       	pop	r11
    4cb0:	af 90       	pop	r10
    4cb2:	9f 90       	pop	r9
    4cb4:	8f 90       	pop	r8
    4cb6:	7f 90       	pop	r7
    4cb8:	6f 90       	pop	r6
    4cba:	5f 90       	pop	r5
    4cbc:	4f 90       	pop	r4
    4cbe:	3f 90       	pop	r3
    4cc0:	2f 90       	pop	r2
    4cc2:	08 95       	ret

00004cc4 <checkButtonDown>:
			}
		}		
	}
}

void checkButtonDown(uint8_t index, uint64_t mask){
    4cc4:	2f 92       	push	r2
    4cc6:	3f 92       	push	r3
    4cc8:	4f 92       	push	r4
    4cca:	5f 92       	push	r5
    4ccc:	6f 92       	push	r6
    4cce:	7f 92       	push	r7
    4cd0:	8f 92       	push	r8
    4cd2:	9f 92       	push	r9
    4cd4:	af 92       	push	r10
    4cd6:	bf 92       	push	r11
    4cd8:	cf 92       	push	r12
    4cda:	df 92       	push	r13
    4cdc:	ef 92       	push	r14
    4cde:	ff 92       	push	r15
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	cd b7       	in	r28, 0x3d	; 61
    4cea:	de b7       	in	r29, 0x3e	; 62
    4cec:	28 97       	sbiw	r28, 0x08	; 8
    4cee:	cd bf       	out	0x3d, r28	; 61
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	60 2e       	mov	r6, r16
    4cf4:	71 2e       	mov	r7, r17
    4cf6:	82 2e       	mov	r8, r18
    4cf8:	93 2e       	mov	r9, r19
    4cfa:	b4 2f       	mov	r27, r20
    4cfc:	a5 2f       	mov	r26, r21
    4cfe:	6f 83       	std	Y+7, r22	; 0x07
    4d00:	78 87       	std	Y+8, r23	; 0x08
	if(input_type_lookup[index] == IT_JOY1_BUTTON){
    4d02:	28 2f       	mov	r18, r24
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	2d 83       	std	Y+5, r18	; 0x05
    4d08:	3e 83       	std	Y+6, r19	; 0x06
    4d0a:	c9 01       	movw	r24, r18
    4d0c:	80 53       	subi	r24, 0x30	; 48
    4d0e:	96 4d       	sbci	r25, 0xD6	; 214
    4d10:	fc 01       	movw	r30, r24
    4d12:	80 81       	ld	r24, Z
    4d14:	81 30       	cpi	r24, 0x01	; 1
    4d16:	39 f4       	brne	.+14     	; 0x4d26 <checkButtonDown+0x62>
		//joystick button input
		joyButtonPressed(input_value_lookup[index], 1);
    4d18:	2d 55       	subi	r18, 0x5D	; 93
    4d1a:	36 4d       	sbci	r19, 0xD6	; 214
    4d1c:	61 e0       	ldi	r22, 0x01	; 1
    4d1e:	f9 01       	movw	r30, r18
    4d20:	80 81       	ld	r24, Z
    4d22:	21 de       	rcall	.-958    	; 0x4966 <joyButtonPressed>
    4d24:	ca c0       	rjmp	.+404    	; 0x4eba <checkButtonDown+0x1f6>
	}
	else if(input_type_lookup[index] == IT_JOY2_BUTTON){
    4d26:	82 30       	cpi	r24, 0x02	; 2
    4d28:	49 f4       	brne	.+18     	; 0x4d3c <checkButtonDown+0x78>
		//joystick button input
		joyButtonPressed(input_value_lookup[index], 2);
    4d2a:	2d 81       	ldd	r18, Y+5	; 0x05
    4d2c:	3e 81       	ldd	r19, Y+6	; 0x06
    4d2e:	2d 55       	subi	r18, 0x5D	; 93
    4d30:	36 4d       	sbci	r19, 0xD6	; 214
    4d32:	62 e0       	ldi	r22, 0x02	; 2
    4d34:	f9 01       	movw	r30, r18
    4d36:	80 81       	ld	r24, Z
    4d38:	16 de       	rcall	.-980    	; 0x4966 <joyButtonPressed>
    4d3a:	bf c0       	rjmp	.+382    	; 0x4eba <checkButtonDown+0x1f6>
	}
	else if(input_type_lookup[index] == IT_KEYBOARD){
    4d3c:	83 30       	cpi	r24, 0x03	; 3
    4d3e:	09 f0       	breq	.+2      	; 0x4d42 <checkButtonDown+0x7e>
    4d40:	5a c0       	rjmp	.+180    	; 0x4df6 <checkButtonDown+0x132>
		//keyboard input
		if((gKeyPressed & mask) != mask){
    4d42:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    4d46:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    4d4a:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    4d4e:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    4d52:	e0 91 19 2a 	lds	r30, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    4d56:	f0 91 1a 2a 	lds	r31, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    4d5a:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    4d5e:	2b 83       	std	Y+3, r18	; 0x03
    4d60:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    4d64:	3c 83       	std	Y+4, r19	; 0x04
    4d66:	a2 2c       	mov	r10, r2
    4d68:	a0 22       	and	r10, r16
    4d6a:	b3 2c       	mov	r11, r3
    4d6c:	b1 22       	and	r11, r17
    4d6e:	c4 2c       	mov	r12, r4
    4d70:	c8 20       	and	r12, r8
    4d72:	d5 2c       	mov	r13, r5
    4d74:	d9 20       	and	r13, r9
    4d76:	ee 2e       	mov	r14, r30
    4d78:	e4 22       	and	r14, r20
    4d7a:	ff 2e       	mov	r15, r31
    4d7c:	f5 22       	and	r15, r21
    4d7e:	02 2f       	mov	r16, r18
    4d80:	8f 81       	ldd	r24, Y+7	; 0x07
    4d82:	08 23       	and	r16, r24
    4d84:	13 2f       	mov	r17, r19
    4d86:	98 85       	ldd	r25, Y+8	; 0x08
    4d88:	19 23       	and	r17, r25
    4d8a:	26 2d       	mov	r18, r6
    4d8c:	37 2d       	mov	r19, r7
    4d8e:	48 2d       	mov	r20, r8
    4d90:	59 2d       	mov	r21, r9
    4d92:	6b 2f       	mov	r22, r27
    4d94:	7a 2f       	mov	r23, r26
    4d96:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    4d9a:	09 f4       	brne	.+2      	; 0x4d9e <checkButtonDown+0xda>
    4d9c:	8e c0       	rjmp	.+284    	; 0x4eba <checkButtonDown+0x1f6>
			gKeyPressed |= mask;
    4d9e:	62 28       	or	r6, r2
    4da0:	60 92 15 2a 	sts	0x2A15, r6	; 0x802a15 <gKeyPressed>
    4da4:	73 28       	or	r7, r3
    4da6:	70 92 16 2a 	sts	0x2A16, r7	; 0x802a16 <gKeyPressed+0x1>
    4daa:	84 28       	or	r8, r4
    4dac:	80 92 17 2a 	sts	0x2A17, r8	; 0x802a17 <gKeyPressed+0x2>
    4db0:	95 28       	or	r9, r5
    4db2:	90 92 18 2a 	sts	0x2A18, r9	; 0x802a18 <gKeyPressed+0x3>
    4db6:	be 2b       	or	r27, r30
    4db8:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    4dbc:	af 2b       	or	r26, r31
    4dbe:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    4dc2:	f8 2f       	mov	r31, r24
    4dc4:	eb 81       	ldd	r30, Y+3	; 0x03
    4dc6:	fe 2b       	or	r31, r30
    4dc8:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4dcc:	e9 2f       	mov	r30, r25
    4dce:	fc 81       	ldd	r31, Y+4	; 0x04
    4dd0:	ef 2b       	or	r30, r31
    4dd2:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			udi_hid_kbd_modifier_down(input_value2_lookup[index]);
    4dd6:	ed 81       	ldd	r30, Y+5	; 0x05
    4dd8:	fe 81       	ldd	r31, Y+6	; 0x06
    4dda:	ea 58       	subi	r30, 0x8A	; 138
    4ddc:	f6 4d       	sbci	r31, 0xD6	; 214
    4dde:	80 81       	ld	r24, Z
    4de0:	0e 94 51 19 	call	0x32a2	; 0x32a2 <udi_hid_kbd_modifier_down>
			udi_hid_kbd_down(input_value_lookup[index]);
    4de4:	2d 81       	ldd	r18, Y+5	; 0x05
    4de6:	3e 81       	ldd	r19, Y+6	; 0x06
    4de8:	2d 55       	subi	r18, 0x5D	; 93
    4dea:	36 4d       	sbci	r19, 0xD6	; 214
    4dec:	f9 01       	movw	r30, r18
    4dee:	80 81       	ld	r24, Z
    4df0:	0e 94 93 19 	call	0x3326	; 0x3326 <udi_hid_kbd_down>
    4df4:	62 c0       	rjmp	.+196    	; 0x4eba <checkButtonDown+0x1f6>
		}
	}	
	else if(input_type_lookup[index] == IT_MOUSE_BUTTON){
    4df6:	84 30       	cpi	r24, 0x04	; 4
    4df8:	09 f0       	breq	.+2      	; 0x4dfc <checkButtonDown+0x138>
    4dfa:	5f c0       	rjmp	.+190    	; 0x4eba <checkButtonDown+0x1f6>
		//mouse button input
		if((gKeyPressed & mask) != mask){
    4dfc:	20 90 15 2a 	lds	r2, 0x2A15	; 0x802a15 <gKeyPressed>
    4e00:	30 90 16 2a 	lds	r3, 0x2A16	; 0x802a16 <gKeyPressed+0x1>
    4e04:	40 90 17 2a 	lds	r4, 0x2A17	; 0x802a17 <gKeyPressed+0x2>
    4e08:	50 90 18 2a 	lds	r5, 0x2A18	; 0x802a18 <gKeyPressed+0x3>
    4e0c:	e0 91 19 2a 	lds	r30, 0x2A19	; 0x802a19 <gKeyPressed+0x4>
    4e10:	f0 91 1a 2a 	lds	r31, 0x2A1A	; 0x802a1a <gKeyPressed+0x5>
    4e14:	20 91 1b 2a 	lds	r18, 0x2A1B	; 0x802a1b <gKeyPressed+0x6>
    4e18:	2b 83       	std	Y+3, r18	; 0x03
    4e1a:	30 91 1c 2a 	lds	r19, 0x2A1C	; 0x802a1c <gKeyPressed+0x7>
    4e1e:	3c 83       	std	Y+4, r19	; 0x04
    4e20:	a0 2e       	mov	r10, r16
    4e22:	a2 20       	and	r10, r2
    4e24:	b1 2e       	mov	r11, r17
    4e26:	b3 20       	and	r11, r3
    4e28:	c8 2c       	mov	r12, r8
    4e2a:	c4 20       	and	r12, r4
    4e2c:	d9 2c       	mov	r13, r9
    4e2e:	d5 20       	and	r13, r5
    4e30:	ee 2e       	mov	r14, r30
    4e32:	e4 22       	and	r14, r20
    4e34:	ff 2e       	mov	r15, r31
    4e36:	f5 22       	and	r15, r21
    4e38:	02 2f       	mov	r16, r18
    4e3a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e3c:	08 23       	and	r16, r24
    4e3e:	13 2f       	mov	r17, r19
    4e40:	98 85       	ldd	r25, Y+8	; 0x08
    4e42:	19 23       	and	r17, r25
    4e44:	26 2d       	mov	r18, r6
    4e46:	37 2d       	mov	r19, r7
    4e48:	48 2d       	mov	r20, r8
    4e4a:	59 2d       	mov	r21, r9
    4e4c:	6b 2f       	mov	r22, r27
    4e4e:	7a 2f       	mov	r23, r26
    4e50:	0e 94 31 44 	call	0x8862	; 0x8862 <__cmpdi2>
    4e54:	91 f1       	breq	.+100    	; 0x4eba <checkButtonDown+0x1f6>
			gKeyPressed |= mask;
    4e56:	62 28       	or	r6, r2
    4e58:	60 92 15 2a 	sts	0x2A15, r6	; 0x802a15 <gKeyPressed>
    4e5c:	73 28       	or	r7, r3
    4e5e:	70 92 16 2a 	sts	0x2A16, r7	; 0x802a16 <gKeyPressed+0x1>
    4e62:	84 28       	or	r8, r4
    4e64:	80 92 17 2a 	sts	0x2A17, r8	; 0x802a17 <gKeyPressed+0x2>
    4e68:	95 28       	or	r9, r5
    4e6a:	90 92 18 2a 	sts	0x2A18, r9	; 0x802a18 <gKeyPressed+0x3>
    4e6e:	be 2b       	or	r27, r30
    4e70:	b0 93 19 2a 	sts	0x2A19, r27	; 0x802a19 <gKeyPressed+0x4>
    4e74:	af 2b       	or	r26, r31
    4e76:	a0 93 1a 2a 	sts	0x2A1A, r26	; 0x802a1a <gKeyPressed+0x5>
    4e7a:	f8 2f       	mov	r31, r24
    4e7c:	eb 81       	ldd	r30, Y+3	; 0x03
    4e7e:	fe 2b       	or	r31, r30
    4e80:	f0 93 1b 2a 	sts	0x2A1B, r31	; 0x802a1b <gKeyPressed+0x6>
    4e84:	e9 2f       	mov	r30, r25
    4e86:	fc 81       	ldd	r31, Y+4	; 0x04
    4e88:	ef 2b       	or	r30, r31
    4e8a:	e0 93 1c 2a 	sts	0x2A1C, r30	; 0x802a1c <gKeyPressed+0x7>
			if(input_value_lookup[index] == 1){
    4e8e:	2d 81       	ldd	r18, Y+5	; 0x05
    4e90:	3e 81       	ldd	r19, Y+6	; 0x06
    4e92:	2d 55       	subi	r18, 0x5D	; 93
    4e94:	36 4d       	sbci	r19, 0xD6	; 214
    4e96:	f9 01       	movw	r30, r18
    4e98:	80 81       	ld	r24, Z
    4e9a:	81 30       	cpi	r24, 0x01	; 1
    4e9c:	19 f4       	brne	.+6      	; 0x4ea4 <checkButtonDown+0x1e0>
				udi_hid_mouse_btnleft(1);
    4e9e:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <udi_hid_mouse_btnleft>
    4ea2:	0b c0       	rjmp	.+22     	; 0x4eba <checkButtonDown+0x1f6>
			}	
			else if(input_value_lookup[index] == 2){
    4ea4:	82 30       	cpi	r24, 0x02	; 2
    4ea6:	21 f4       	brne	.+8      	; 0x4eb0 <checkButtonDown+0x1ec>
				udi_hid_mouse_btnright(1);
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	0e 94 55 1a 	call	0x34aa	; 0x34aa <udi_hid_mouse_btnright>
    4eae:	05 c0       	rjmp	.+10     	; 0x4eba <checkButtonDown+0x1f6>
			}
			else if(input_value_lookup[index] == 3){
    4eb0:	83 30       	cpi	r24, 0x03	; 3
    4eb2:	19 f4       	brne	.+6      	; 0x4eba <checkButtonDown+0x1f6>
				udi_hid_mouse_btnmiddle(1);
    4eb4:	81 e0       	ldi	r24, 0x01	; 1
    4eb6:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <udi_hid_mouse_btnmiddle>
			}
		}		
	}
}
    4eba:	28 96       	adiw	r28, 0x08	; 8
    4ebc:	cd bf       	out	0x3d, r28	; 61
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	df 91       	pop	r29
    4ec2:	cf 91       	pop	r28
    4ec4:	1f 91       	pop	r17
    4ec6:	0f 91       	pop	r16
    4ec8:	ff 90       	pop	r15
    4eca:	ef 90       	pop	r14
    4ecc:	df 90       	pop	r13
    4ece:	cf 90       	pop	r12
    4ed0:	bf 90       	pop	r11
    4ed2:	af 90       	pop	r10
    4ed4:	9f 90       	pop	r9
    4ed6:	8f 90       	pop	r8
    4ed8:	7f 90       	pop	r7
    4eda:	6f 90       	pop	r6
    4edc:	5f 90       	pop	r5
    4ede:	4f 90       	pop	r4
    4ee0:	3f 90       	pop	r3
    4ee2:	2f 90       	pop	r2
    4ee4:	08 95       	ret

00004ee6 <user_callback_sof_action>:
	}
}


//Start of frame callback (check for button presses and act accordingly!)
void user_callback_sof_action(void){
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	cf 93       	push	r28
    4eec:	df 93       	push	r29
    4eee:	e9 e0       	ldi	r30, 0x09	; 9
    4ef0:	fa e2       	ldi	r31, 0x2A	; 42
    4ef2:	ad ef       	ldi	r26, 0xFD	; 253
    4ef4:	b9 e2       	ldi	r27, 0x29	; 41
    4ef6:	85 e1       	ldi	r24, 0x15	; 21
    4ef8:	9a e2       	ldi	r25, 0x2A	; 42
	uint16_t accelReadingX = 0;

	
	for(i = 0; i < 12; i++){
		//initialize joybufs
		gJoy1Buf[i] = 0x00;
    4efa:	11 92       	st	Z+, r1
		gJoy2Buf[i] = 0x00;
    4efc:	1d 92       	st	X+, r1
	uint16_t qdec3_pos = 0;
	uint16_t qdec3_freq = 0;
	uint16_t accelReadingX = 0;

	
	for(i = 0; i < 12; i++){
    4efe:	e8 17       	cp	r30, r24
    4f00:	f9 07       	cpc	r31, r25
    4f02:	d9 f7       	brne	.-10     	; 0x4efa <user_callback_sof_action+0x14>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4f04:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7007e8>
		//initialize joybufs
		gJoy1Buf[i] = 0x00;
		gJoy2Buf[i] = 0x00;
	}		
	
	if(gpio_pin_is_low(LED_USBINIT)){
    4f08:	80 fd       	sbrc	r24, 0
    4f0a:	03 c0       	rjmp	.+6      	; 0x4f12 <user_callback_sof_action+0x2c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
		gpio_set_pin_high(LED_USBINIT);
	}
	
	//Set COP LED	
	if(gCopCountdown == COP_TIMEOUT){
    4f12:	80 91 4d 29 	lds	r24, 0x294D	; 0x80294d <gCopCountdown>
    4f16:	90 91 4e 29 	lds	r25, 0x294E	; 0x80294e <gCopCountdown+0x1>
    4f1a:	8a 3f       	cpi	r24, 0xFA	; 250
    4f1c:	91 05       	cpc	r25, r1
    4f1e:	39 f4       	brne	.+14     	; 0x4f2e <user_callback_sof_action+0x48>
		gCopCountdown = 0;
    4f20:	10 92 4d 29 	sts	0x294D, r1	; 0x80294d <gCopCountdown>
    4f24:	10 92 4e 29 	sts	0x294E, r1	; 0x80294e <gCopCountdown+0x1>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    4f28:	82 e0       	ldi	r24, 0x02	; 2
    4f2a:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <__TEXT_REGION_LENGTH__+0x7007e7>
		gpio_toggle_pin(LED_COP);
	}	
	gCopCountdown++;
    4f2e:	80 91 4d 29 	lds	r24, 0x294D	; 0x80294d <gCopCountdown>
    4f32:	90 91 4e 29 	lds	r25, 0x294E	; 0x80294e <gCopCountdown+0x1>
    4f36:	01 96       	adiw	r24, 0x01	; 1
    4f38:	80 93 4d 29 	sts	0x294D, r24	; 0x80294d <gCopCountdown>
    4f3c:	90 93 4e 29 	sts	0x294E, r25	; 0x80294e <gCopCountdown+0x1>
	
	//Check if Joy1_U pin is an analog input
	if((input_type_lookup[JOY1_U_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    4f40:	e0 91 d0 29 	lds	r30, 0x29D0	; 0x8029d0 <input_type_lookup>
    4f44:	e5 ff       	sbrs	r30, 5
    4f46:	08 c0       	rjmp	.+16     	; 0x4f58 <user_callback_sof_action+0x72>
		//JOY1_U is an analog input on Joystick 1
		gJoy1Buf[input_type_lookup[JOY1_U_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = (int8_t)(gJoy1_u_ana_val-128);
    4f48:	f0 e0       	ldi	r31, 0x00	; 0
    4f4a:	e7 51       	subi	r30, 0x17	; 23
    4f4c:	f6 4d       	sbci	r31, 0xD6	; 214
    4f4e:	80 91 6e 29 	lds	r24, 0x296E	; 0x80296e <gJoy1_u_ana_val>
    4f52:	80 58       	subi	r24, 0x80	; 128
    4f54:	80 83       	st	Z, r24
    4f56:	23 c0       	rjmp	.+70     	; 0x4f9e <user_callback_sof_action+0xb8>
	}
	else if((input_type_lookup[JOY1_U_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    4f58:	ee 23       	and	r30, r30
    4f5a:	44 f4       	brge	.+16     	; 0x4f6c <user_callback_sof_action+0x86>
		//JOY1_U is an analog input on Joystick 2
		gJoy2Buf[input_type_lookup[JOY1_U_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = (int8_t)(gJoy1_u_ana_val-128);
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	e3 58       	subi	r30, 0x83	; 131
    4f60:	f6 4d       	sbci	r31, 0xD6	; 214
    4f62:	80 91 6e 29 	lds	r24, 0x296E	; 0x80296e <gJoy1_u_ana_val>
    4f66:	80 58       	subi	r24, 0x80	; 128
    4f68:	80 83       	st	Z, r24
    4f6a:	19 c0       	rjmp	.+50     	; 0x4f9e <user_callback_sof_action+0xb8>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4f6c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	else{
		//JOY1_U is a digital input
		if(ioport_pin_is_low(JOY1_U)){
    4f70:	85 fd       	sbrc	r24, 5
    4f72:	0b c0       	rjmp	.+22     	; 0x4f8a <user_callback_sof_action+0xa4>
			checkJoystickDown(JOY1_U_LKUP_INDEX, JOY1_U_MASK);
    4f74:	01 e0       	ldi	r16, 0x01	; 1
    4f76:	10 e0       	ldi	r17, 0x00	; 0
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	40 e0       	ldi	r20, 0x00	; 0
    4f7e:	50 e0       	ldi	r21, 0x00	; 0
    4f80:	60 e0       	ldi	r22, 0x00	; 0
    4f82:	70 e0       	ldi	r23, 0x00	; 0
    4f84:	80 e0       	ldi	r24, 0x00	; 0
    4f86:	70 dd       	rcall	.-1312   	; 0x4a68 <checkJoystickDown>
    4f88:	0a c0       	rjmp	.+20     	; 0x4f9e <user_callback_sof_action+0xb8>
		}	
		else{
			checkJoystickUp(JOY1_U_LKUP_INDEX, JOY1_U_MASK);	
    4f8a:	01 e0       	ldi	r16, 0x01	; 1
    4f8c:	10 e0       	ldi	r17, 0x00	; 0
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	40 e0       	ldi	r20, 0x00	; 0
    4f94:	50 e0       	ldi	r21, 0x00	; 0
    4f96:	60 e0       	ldi	r22, 0x00	; 0
    4f98:	70 e0       	ldi	r23, 0x00	; 0
    4f9a:	80 e0       	ldi	r24, 0x00	; 0
    4f9c:	e2 da       	rcall	.-2620   	; 0x4562 <checkJoystickUp>
		}
	}	
		
	if((input_type_lookup[JOY1_D_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    4f9e:	e0 91 d1 29 	lds	r30, 0x29D1	; 0x8029d1 <input_type_lookup+0x1>
    4fa2:	e5 ff       	sbrs	r30, 5
    4fa4:	08 c0       	rjmp	.+16     	; 0x4fb6 <user_callback_sof_action+0xd0>
		//JOY1_D is an analog input on Joystick 1
		gJoy1Buf[input_type_lookup[JOY1_D_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = (int8_t)(gJoy1_d_ana_val-128);
    4fa6:	f0 e0       	ldi	r31, 0x00	; 0
    4fa8:	e7 51       	subi	r30, 0x17	; 23
    4faa:	f6 4d       	sbci	r31, 0xD6	; 214
    4fac:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <gJoy1_d_ana_val>
    4fb0:	80 58       	subi	r24, 0x80	; 128
    4fb2:	80 83       	st	Z, r24
    4fb4:	23 c0       	rjmp	.+70     	; 0x4ffc <user_callback_sof_action+0x116>
	}
	else if((input_type_lookup[JOY1_D_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    4fb6:	ee 23       	and	r30, r30
    4fb8:	44 f4       	brge	.+16     	; 0x4fca <user_callback_sof_action+0xe4>
		//JOY1_D is an analog input on Joystick 2
		gJoy2Buf[input_type_lookup[JOY1_D_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = (int8_t)(gJoy1_d_ana_val-128);
    4fba:	f0 e0       	ldi	r31, 0x00	; 0
    4fbc:	e3 58       	subi	r30, 0x83	; 131
    4fbe:	f6 4d       	sbci	r31, 0xD6	; 214
    4fc0:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <gJoy1_d_ana_val>
    4fc4:	80 58       	subi	r24, 0x80	; 128
    4fc6:	80 83       	st	Z, r24
    4fc8:	19 c0       	rjmp	.+50     	; 0x4ffc <user_callback_sof_action+0x116>
    4fca:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	else{
		//JOY1_D is a digital input
		if(ioport_pin_is_low(JOY1_D)){
    4fce:	84 fd       	sbrc	r24, 4
    4fd0:	0b c0       	rjmp	.+22     	; 0x4fe8 <user_callback_sof_action+0x102>
			checkJoystickDown(JOY1_D_LKUP_INDEX, JOY1_D_MASK);
    4fd2:	02 e0       	ldi	r16, 0x02	; 2
    4fd4:	10 e0       	ldi	r17, 0x00	; 0
    4fd6:	20 e0       	ldi	r18, 0x00	; 0
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	40 e0       	ldi	r20, 0x00	; 0
    4fdc:	50 e0       	ldi	r21, 0x00	; 0
    4fde:	60 e0       	ldi	r22, 0x00	; 0
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	41 dd       	rcall	.-1406   	; 0x4a68 <checkJoystickDown>
    4fe6:	0a c0       	rjmp	.+20     	; 0x4ffc <user_callback_sof_action+0x116>
		}
		else{
			checkJoystickUp(JOY1_D_LKUP_INDEX, JOY1_D_MASK);
    4fe8:	02 e0       	ldi	r16, 0x02	; 2
    4fea:	10 e0       	ldi	r17, 0x00	; 0
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	40 e0       	ldi	r20, 0x00	; 0
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	60 e0       	ldi	r22, 0x00	; 0
    4ff6:	70 e0       	ldi	r23, 0x00	; 0
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	b3 da       	rcall	.-2714   	; 0x4562 <checkJoystickUp>
		}
	}
	
	if((input_type_lookup[JOY1_L_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    4ffc:	e0 91 d2 29 	lds	r30, 0x29D2	; 0x8029d2 <input_type_lookup+0x2>
    5000:	e5 ff       	sbrs	r30, 5
    5002:	08 c0       	rjmp	.+16     	; 0x5014 <user_callback_sof_action+0x12e>
		//JOY1_L is an analog input on joystick 1
		gJoy1Buf[input_type_lookup[JOY1_L_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = (int8_t)(gJoy1_l_ana_val-128);
    5004:	f0 e0       	ldi	r31, 0x00	; 0
    5006:	e7 51       	subi	r30, 0x17	; 23
    5008:	f6 4d       	sbci	r31, 0xD6	; 214
    500a:	80 91 6a 29 	lds	r24, 0x296A	; 0x80296a <gJoy1_l_ana_val>
    500e:	80 58       	subi	r24, 0x80	; 128
    5010:	80 83       	st	Z, r24
    5012:	23 c0       	rjmp	.+70     	; 0x505a <user_callback_sof_action+0x174>
	}
	else if((input_type_lookup[JOY1_L_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    5014:	ee 23       	and	r30, r30
    5016:	44 f4       	brge	.+16     	; 0x5028 <user_callback_sof_action+0x142>
		//JOY1_L is an analog input on joystick 2
		gJoy2Buf[input_type_lookup[JOY1_L_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = (int8_t)(gJoy1_l_ana_val-128);
    5018:	f0 e0       	ldi	r31, 0x00	; 0
    501a:	e3 58       	subi	r30, 0x83	; 131
    501c:	f6 4d       	sbci	r31, 0xD6	; 214
    501e:	80 91 6a 29 	lds	r24, 0x296A	; 0x80296a <gJoy1_l_ana_val>
    5022:	80 58       	subi	r24, 0x80	; 128
    5024:	80 83       	st	Z, r24
    5026:	19 c0       	rjmp	.+50     	; 0x505a <user_callback_sof_action+0x174>
    5028:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	else{
		//JOY1_L is a digital input	
		if(ioport_pin_is_low(JOY1_L)){
    502c:	88 23       	and	r24, r24
    502e:	5c f0       	brlt	.+22     	; 0x5046 <user_callback_sof_action+0x160>
			checkJoystickDown(JOY1_L_LKUP_INDEX, JOY1_L_MASK);
    5030:	04 e0       	ldi	r16, 0x04	; 4
    5032:	10 e0       	ldi	r17, 0x00	; 0
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	40 e0       	ldi	r20, 0x00	; 0
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	60 e0       	ldi	r22, 0x00	; 0
    503e:	70 e0       	ldi	r23, 0x00	; 0
    5040:	82 e0       	ldi	r24, 0x02	; 2
    5042:	12 dd       	rcall	.-1500   	; 0x4a68 <checkJoystickDown>
    5044:	0a c0       	rjmp	.+20     	; 0x505a <user_callback_sof_action+0x174>
		}
		else{
			checkJoystickUp(JOY1_L_LKUP_INDEX, JOY1_L_MASK);
    5046:	04 e0       	ldi	r16, 0x04	; 4
    5048:	10 e0       	ldi	r17, 0x00	; 0
    504a:	20 e0       	ldi	r18, 0x00	; 0
    504c:	30 e0       	ldi	r19, 0x00	; 0
    504e:	40 e0       	ldi	r20, 0x00	; 0
    5050:	50 e0       	ldi	r21, 0x00	; 0
    5052:	60 e0       	ldi	r22, 0x00	; 0
    5054:	70 e0       	ldi	r23, 0x00	; 0
    5056:	82 e0       	ldi	r24, 0x02	; 2
    5058:	84 da       	rcall	.-2808   	; 0x4562 <checkJoystickUp>
		}
	}	
	
	if((input_type_lookup[JOY1_R_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    505a:	e0 91 d3 29 	lds	r30, 0x29D3	; 0x8029d3 <input_type_lookup+0x3>
    505e:	e5 ff       	sbrs	r30, 5
    5060:	08 c0       	rjmp	.+16     	; 0x5072 <user_callback_sof_action+0x18c>
		//JOY1_R is an analog input on joystick 1
		gJoy1Buf[input_type_lookup[JOY1_R_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = (int8_t)(gJoy1_r_ana_val-128);
    5062:	f0 e0       	ldi	r31, 0x00	; 0
    5064:	e7 51       	subi	r30, 0x17	; 23
    5066:	f6 4d       	sbci	r31, 0xD6	; 214
    5068:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <gJoy1_r_ana_val>
    506c:	80 58       	subi	r24, 0x80	; 128
    506e:	80 83       	st	Z, r24
    5070:	23 c0       	rjmp	.+70     	; 0x50b8 <user_callback_sof_action+0x1d2>
	}
	else if((input_type_lookup[JOY1_R_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    5072:	ee 23       	and	r30, r30
    5074:	44 f4       	brge	.+16     	; 0x5086 <user_callback_sof_action+0x1a0>
		//JOY1_R is an analog input on joystick 2
		gJoy2Buf[input_type_lookup[JOY1_R_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = (int8_t)(gJoy1_r_ana_val-128);
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	e3 58       	subi	r30, 0x83	; 131
    507a:	f6 4d       	sbci	r31, 0xD6	; 214
    507c:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <gJoy1_r_ana_val>
    5080:	80 58       	subi	r24, 0x80	; 128
    5082:	80 83       	st	Z, r24
    5084:	19 c0       	rjmp	.+50     	; 0x50b8 <user_callback_sof_action+0x1d2>
    5086:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	else{
		//JOY1_R is a digital input
		if(ioport_pin_is_low(JOY1_R)){
    508a:	86 fd       	sbrc	r24, 6
    508c:	0b c0       	rjmp	.+22     	; 0x50a4 <user_callback_sof_action+0x1be>
			checkJoystickDown(JOY1_R_LKUP_INDEX, JOY1_R_MASK);
    508e:	08 e0       	ldi	r16, 0x08	; 8
    5090:	10 e0       	ldi	r17, 0x00	; 0
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e0       	ldi	r20, 0x00	; 0
    5098:	50 e0       	ldi	r21, 0x00	; 0
    509a:	60 e0       	ldi	r22, 0x00	; 0
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	83 e0       	ldi	r24, 0x03	; 3
    50a0:	e3 dc       	rcall	.-1594   	; 0x4a68 <checkJoystickDown>
    50a2:	0a c0       	rjmp	.+20     	; 0x50b8 <user_callback_sof_action+0x1d2>
		}
		else{
			checkJoystickUp(JOY1_R_LKUP_INDEX, JOY1_R_MASK);
    50a4:	08 e0       	ldi	r16, 0x08	; 8
    50a6:	10 e0       	ldi	r17, 0x00	; 0
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	40 e0       	ldi	r20, 0x00	; 0
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	60 e0       	ldi	r22, 0x00	; 0
    50b2:	70 e0       	ldi	r23, 0x00	; 0
    50b4:	83 e0       	ldi	r24, 0x03	; 3
    50b6:	55 da       	rcall	.-2902   	; 0x4562 <checkJoystickUp>
    50b8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
		}
	}	
	
	//check joystick 2 inputs
	if(ioport_pin_is_low(JOY2_U)){
    50bc:	82 fd       	sbrc	r24, 2
    50be:	0b c0       	rjmp	.+22     	; 0x50d6 <user_callback_sof_action+0x1f0>
		checkJoystickDown(JOY2_U_LKUP_INDEX, JOY2_U_MASK);
    50c0:	00 e1       	ldi	r16, 0x10	; 16
    50c2:	10 e0       	ldi	r17, 0x00	; 0
    50c4:	20 e0       	ldi	r18, 0x00	; 0
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	40 e0       	ldi	r20, 0x00	; 0
    50ca:	50 e0       	ldi	r21, 0x00	; 0
    50cc:	60 e0       	ldi	r22, 0x00	; 0
    50ce:	70 e0       	ldi	r23, 0x00	; 0
    50d0:	84 e0       	ldi	r24, 0x04	; 4
    50d2:	ca dc       	rcall	.-1644   	; 0x4a68 <checkJoystickDown>
    50d4:	0a c0       	rjmp	.+20     	; 0x50ea <user_callback_sof_action+0x204>
	}
	else{
		checkJoystickUp(JOY2_U_LKUP_INDEX, JOY2_U_MASK);
    50d6:	00 e1       	ldi	r16, 0x10	; 16
    50d8:	10 e0       	ldi	r17, 0x00	; 0
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	40 e0       	ldi	r20, 0x00	; 0
    50e0:	50 e0       	ldi	r21, 0x00	; 0
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	70 e0       	ldi	r23, 0x00	; 0
    50e6:	84 e0       	ldi	r24, 0x04	; 4
    50e8:	3c da       	rcall	.-2952   	; 0x4562 <checkJoystickUp>
    50ea:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	if(ioport_pin_is_low(JOY2_D)){
    50ee:	83 fd       	sbrc	r24, 3
		checkJoystickDown(JOY2_D_LKUP_INDEX, JOY2_D_MASK);
    50f0:	0b c0       	rjmp	.+22     	; 0x5108 <user_callback_sof_action+0x222>
    50f2:	00 e2       	ldi	r16, 0x20	; 32
    50f4:	10 e0       	ldi	r17, 0x00	; 0
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e0       	ldi	r20, 0x00	; 0
    50fc:	50 e0       	ldi	r21, 0x00	; 0
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	70 e0       	ldi	r23, 0x00	; 0
    5102:	85 e0       	ldi	r24, 0x05	; 5
    5104:	b1 dc       	rcall	.-1694   	; 0x4a68 <checkJoystickDown>
	}
	else{
		checkJoystickUp(JOY2_D_LKUP_INDEX, JOY2_D_MASK);
    5106:	0a c0       	rjmp	.+20     	; 0x511c <user_callback_sof_action+0x236>
    5108:	00 e2       	ldi	r16, 0x20	; 32
    510a:	10 e0       	ldi	r17, 0x00	; 0
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e0       	ldi	r20, 0x00	; 0
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	60 e0       	ldi	r22, 0x00	; 0
    5116:	70 e0       	ldi	r23, 0x00	; 0
    5118:	85 e0       	ldi	r24, 0x05	; 5
    511a:	23 da       	rcall	.-3002   	; 0x4562 <checkJoystickUp>
    511c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	if(ioport_pin_is_low(JOY2_L)){
    5120:	80 fd       	sbrc	r24, 0
		checkJoystickDown(JOY2_L_LKUP_INDEX, JOY2_L_MASK);
    5122:	0b c0       	rjmp	.+22     	; 0x513a <user_callback_sof_action+0x254>
    5124:	00 e4       	ldi	r16, 0x40	; 64
    5126:	10 e0       	ldi	r17, 0x00	; 0
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e0       	ldi	r20, 0x00	; 0
    512e:	50 e0       	ldi	r21, 0x00	; 0
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	70 e0       	ldi	r23, 0x00	; 0
    5134:	86 e0       	ldi	r24, 0x06	; 6
    5136:	98 dc       	rcall	.-1744   	; 0x4a68 <checkJoystickDown>
	}
	else{
		checkJoystickUp(JOY2_L_LKUP_INDEX, JOY2_L_MASK);
    5138:	0a c0       	rjmp	.+20     	; 0x514e <user_callback_sof_action+0x268>
    513a:	00 e4       	ldi	r16, 0x40	; 64
    513c:	10 e0       	ldi	r17, 0x00	; 0
    513e:	20 e0       	ldi	r18, 0x00	; 0
    5140:	30 e0       	ldi	r19, 0x00	; 0
    5142:	40 e0       	ldi	r20, 0x00	; 0
    5144:	50 e0       	ldi	r21, 0x00	; 0
    5146:	60 e0       	ldi	r22, 0x00	; 0
    5148:	70 e0       	ldi	r23, 0x00	; 0
    514a:	86 e0       	ldi	r24, 0x06	; 6
    514c:	0a da       	rcall	.-3052   	; 0x4562 <checkJoystickUp>
    514e:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	}
	if(ioport_pin_is_low(JOY2_R)){
    5152:	81 fd       	sbrc	r24, 1
		checkJoystickDown(JOY2_R_LKUP_INDEX, JOY2_R_MASK);
    5154:	0b c0       	rjmp	.+22     	; 0x516c <user_callback_sof_action+0x286>
    5156:	00 e8       	ldi	r16, 0x80	; 128
    5158:	10 e0       	ldi	r17, 0x00	; 0
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	40 e0       	ldi	r20, 0x00	; 0
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	60 e0       	ldi	r22, 0x00	; 0
    5164:	70 e0       	ldi	r23, 0x00	; 0
    5166:	87 e0       	ldi	r24, 0x07	; 7
    5168:	7f dc       	rcall	.-1794   	; 0x4a68 <checkJoystickDown>
	}
	else{
		checkJoystickUp(JOY2_R_LKUP_INDEX, JOY2_R_MASK);
    516a:	0a c0       	rjmp	.+20     	; 0x5180 <user_callback_sof_action+0x29a>
    516c:	00 e8       	ldi	r16, 0x80	; 128
    516e:	10 e0       	ldi	r17, 0x00	; 0
    5170:	20 e0       	ldi	r18, 0x00	; 0
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	40 e0       	ldi	r20, 0x00	; 0
    5176:	50 e0       	ldi	r21, 0x00	; 0
    5178:	60 e0       	ldi	r22, 0x00	; 0
    517a:	70 e0       	ldi	r23, 0x00	; 0
    517c:	87 e0       	ldi	r24, 0x07	; 7
    517e:	f1 d9       	rcall	.-3102   	; 0x4562 <checkJoystickUp>
	}
	
	//check JOY3_U and JOY3_D inputs (Can be QEC1 for Mouse Axis)
	if((input_type_lookup[JOY3_U_LKUP_INDEX] >= IT_MOUSE_XAXIS)&&(input_type_lookup[JOY3_U_LKUP_INDEX] <= IT_MOUSE_ZAXIS)){
    5180:	80 91 d8 29 	lds	r24, 0x29D8	; 0x8029d8 <input_type_lookup+0x8>
    5184:	85 50       	subi	r24, 0x05	; 5
    5186:	83 30       	cpi	r24, 0x03	; 3
    5188:	d8 f5       	brcc	.+118    	; 0x5200 <user_callback_sof_action+0x31a>
		//QEC1 Enabled
		qdec1_dir = qdec_get_direction(&gConfig1);
    518a:	8d e6       	ldi	r24, 0x6D	; 109
    518c:	9a e2       	ldi	r25, 0x2A	; 42
    518e:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    5192:	18 2f       	mov	r17, r24
		qdec1_pos = qdec_get_position(&gConfig1);
    5194:	8d e6       	ldi	r24, 0x6D	; 109
    5196:	9a e2       	ldi	r25, 0x2A	; 42
    5198:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    519c:	ec 01       	movw	r28, r24
		qdec1_freq = qdec_get_frequency(&gConfig1);
    519e:	8d e6       	ldi	r24, 0x6D	; 109
    51a0:	9a e2       	ldi	r25, 0x2A	; 42
    51a2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <qdec_get_frequency>
		if(qdec1_pos != gQdec1_prev_pos){
    51a6:	20 91 74 29 	lds	r18, 0x2974	; 0x802974 <gQdec1_prev_pos>
    51aa:	30 91 75 29 	lds	r19, 0x2975	; 0x802975 <gQdec1_prev_pos+0x1>
    51ae:	c2 17       	cp	r28, r18
    51b0:	d3 07       	cpc	r29, r19
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <user_callback_sof_action+0x2d0>
    51b4:	57 c0       	rjmp	.+174    	; 0x5264 <user_callback_sof_action+0x37e>
			gQdec1_prev_pos = qdec1_pos;
    51b6:	c0 93 74 29 	sts	0x2974, r28	; 0x802974 <gQdec1_prev_pos>
    51ba:	d0 93 75 29 	sts	0x2975, r29	; 0x802975 <gQdec1_prev_pos+0x1>
    51be:	28 2f       	mov	r18, r24
    51c0:	39 2f       	mov	r19, r25
    51c2:	21 15       	cp	r18, r1
    51c4:	31 05       	cpc	r19, r1
    51c6:	11 f4       	brne	.+4      	; 0x51cc <user_callback_sof_action+0x2e6>
    51c8:	21 e0       	ldi	r18, 0x01	; 1
    51ca:	30 e0       	ldi	r19, 0x00	; 0
			if(qdec1_freq < 2){
				qdec1_freq = 1;
			}
			
			if(qdec1_dir == 1){
    51cc:	11 23       	and	r17, r17
    51ce:	19 f0       	breq	.+6      	; 0x51d6 <user_callback_sof_action+0x2f0>
				qdec1_freq *= -1;				
    51d0:	31 95       	neg	r19
    51d2:	21 95       	neg	r18
    51d4:	31 09       	sbc	r19, r1
			}
			
			switch(input_type_lookup[JOY3_U_LKUP_INDEX]){
    51d6:	80 91 d8 29 	lds	r24, 0x29D8	; 0x8029d8 <input_type_lookup+0x8>
    51da:	86 30       	cpi	r24, 0x06	; 6
    51dc:	49 f0       	breq	.+18     	; 0x51f0 <user_callback_sof_action+0x30a>
    51de:	87 30       	cpi	r24, 0x07	; 7
    51e0:	59 f0       	breq	.+22     	; 0x51f8 <user_callback_sof_action+0x312>
    51e2:	85 30       	cpi	r24, 0x05	; 5
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <user_callback_sof_action+0x302>
    51e6:	3e c0       	rjmp	.+124    	; 0x5264 <user_callback_sof_action+0x37e>
				case IT_MOUSE_XAXIS:
					udi_hid_mouse_moveX(qdec1_freq);
    51e8:	82 2f       	mov	r24, r18
    51ea:	0e 94 4f 1a 	call	0x349e	; 0x349e <udi_hid_mouse_moveX>
					break;
    51ee:	3a c0       	rjmp	.+116    	; 0x5264 <user_callback_sof_action+0x37e>
				case IT_MOUSE_YAXIS:
					udi_hid_mouse_moveY(qdec1_freq);
    51f0:	82 2f       	mov	r24, r18
    51f2:	0e 94 4c 1a 	call	0x3498	; 0x3498 <udi_hid_mouse_moveY>
					break;
    51f6:	36 c0       	rjmp	.+108    	; 0x5264 <user_callback_sof_action+0x37e>
				case IT_MOUSE_ZAXIS:
					udi_hid_mouse_moveScroll(qdec1_freq);
    51f8:	82 2f       	mov	r24, r18
    51fa:	0e 94 49 1a 	call	0x3492	; 0x3492 <udi_hid_mouse_moveScroll>
    51fe:	32 c0       	rjmp	.+100    	; 0x5264 <user_callback_sof_action+0x37e>
    5200:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
		}
	}
	else{
		//QEC1 Disabled
		//if(ioport_pin_is_low(JOY3_U)){
		if(ioport_pin_is_high(JOY3_U)){ //inverted logic
    5204:	82 ff       	sbrs	r24, 2
			checkJoystickDown(JOY3_U_LKUP_INDEX, JOY3_U_MASK);
    5206:	0b c0       	rjmp	.+22     	; 0x521e <user_callback_sof_action+0x338>
    5208:	00 e0       	ldi	r16, 0x00	; 0
    520a:	11 e0       	ldi	r17, 0x01	; 1
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	40 e0       	ldi	r20, 0x00	; 0
    5212:	50 e0       	ldi	r21, 0x00	; 0
    5214:	60 e0       	ldi	r22, 0x00	; 0
    5216:	70 e0       	ldi	r23, 0x00	; 0
    5218:	88 e0       	ldi	r24, 0x08	; 8
    521a:	26 dc       	rcall	.-1972   	; 0x4a68 <checkJoystickDown>
		}
		else{
			checkJoystickUp(JOY3_U_LKUP_INDEX, JOY3_U_MASK);
    521c:	0a c0       	rjmp	.+20     	; 0x5232 <user_callback_sof_action+0x34c>
    521e:	00 e0       	ldi	r16, 0x00	; 0
    5220:	11 e0       	ldi	r17, 0x01	; 1
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	40 e0       	ldi	r20, 0x00	; 0
    5228:	50 e0       	ldi	r21, 0x00	; 0
    522a:	60 e0       	ldi	r22, 0x00	; 0
    522c:	70 e0       	ldi	r23, 0x00	; 0
    522e:	88 e0       	ldi	r24, 0x08	; 8
    5230:	98 d9       	rcall	.-3280   	; 0x4562 <checkJoystickUp>
    5232:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
		}
		//if(ioport_pin_is_low(JOY3_D)){
		if(ioport_pin_is_high(JOY3_D)){ //inverted logic
    5236:	83 ff       	sbrs	r24, 3
			checkJoystickDown(JOY3_D_LKUP_INDEX, JOY3_D_MASK);
    5238:	0b c0       	rjmp	.+22     	; 0x5250 <user_callback_sof_action+0x36a>
    523a:	00 e0       	ldi	r16, 0x00	; 0
    523c:	12 e0       	ldi	r17, 0x02	; 2
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	40 e0       	ldi	r20, 0x00	; 0
    5244:	50 e0       	ldi	r21, 0x00	; 0
    5246:	60 e0       	ldi	r22, 0x00	; 0
    5248:	70 e0       	ldi	r23, 0x00	; 0
    524a:	89 e0       	ldi	r24, 0x09	; 9
    524c:	0d dc       	rcall	.-2022   	; 0x4a68 <checkJoystickDown>
		}
		else{
			checkJoystickUp(JOY3_D_LKUP_INDEX, JOY3_D_MASK);
    524e:	0a c0       	rjmp	.+20     	; 0x5264 <user_callback_sof_action+0x37e>
    5250:	00 e0       	ldi	r16, 0x00	; 0
    5252:	12 e0       	ldi	r17, 0x02	; 2
    5254:	20 e0       	ldi	r18, 0x00	; 0
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	40 e0       	ldi	r20, 0x00	; 0
    525a:	50 e0       	ldi	r21, 0x00	; 0
    525c:	60 e0       	ldi	r22, 0x00	; 0
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	89 e0       	ldi	r24, 0x09	; 9
    5262:	7f d9       	rcall	.-3330   	; 0x4562 <checkJoystickUp>
		}
	}
	
	//check JOY3_L and JOY3_R inputs (Can be QEC2 for Mouse Axis)
	if((input_type_lookup[JOY3_L_LKUP_INDEX] >= IT_MOUSE_XAXIS)&&(input_type_lookup[JOY3_L_LKUP_INDEX] <= IT_MOUSE_ZAXIS)){
    5264:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <input_type_lookup+0xa>
    5268:	85 50       	subi	r24, 0x05	; 5
    526a:	83 30       	cpi	r24, 0x03	; 3
    526c:	d8 f5       	brcc	.+118    	; 0x52e4 <user_callback_sof_action+0x3fe>
		//QEC2 Enabled
		qdec2_dir = qdec_get_direction(&gConfig2);
    526e:	8f e4       	ldi	r24, 0x4F	; 79
    5270:	9a e2       	ldi	r25, 0x2A	; 42
    5272:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    5276:	18 2f       	mov	r17, r24
		qdec2_pos = qdec_get_position(&gConfig2);
    5278:	8f e4       	ldi	r24, 0x4F	; 79
    527a:	9a e2       	ldi	r25, 0x2A	; 42
    527c:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    5280:	ec 01       	movw	r28, r24
		qdec2_freq = qdec_get_frequency(&gConfig2);
    5282:	8f e4       	ldi	r24, 0x4F	; 79
    5284:	9a e2       	ldi	r25, 0x2A	; 42
    5286:	0e 94 cd 06 	call	0xd9a	; 0xd9a <qdec_get_frequency>
		if(qdec2_pos != gQdec2_prev_pos){
    528a:	20 91 72 29 	lds	r18, 0x2972	; 0x802972 <gQdec2_prev_pos>
    528e:	30 91 73 29 	lds	r19, 0x2973	; 0x802973 <gQdec2_prev_pos+0x1>
    5292:	c2 17       	cp	r28, r18
    5294:	d3 07       	cpc	r29, r19
    5296:	09 f4       	brne	.+2      	; 0x529a <user_callback_sof_action+0x3b4>
    5298:	57 c0       	rjmp	.+174    	; 0x5348 <user_callback_sof_action+0x462>
			gQdec2_prev_pos = qdec2_pos;
    529a:	c0 93 72 29 	sts	0x2972, r28	; 0x802972 <gQdec2_prev_pos>
    529e:	d0 93 73 29 	sts	0x2973, r29	; 0x802973 <gQdec2_prev_pos+0x1>
    52a2:	28 2f       	mov	r18, r24
    52a4:	39 2f       	mov	r19, r25
    52a6:	21 15       	cp	r18, r1
    52a8:	31 05       	cpc	r19, r1
    52aa:	11 f4       	brne	.+4      	; 0x52b0 <user_callback_sof_action+0x3ca>
    52ac:	21 e0       	ldi	r18, 0x01	; 1
    52ae:	30 e0       	ldi	r19, 0x00	; 0
			if(qdec2_freq < 2){
				qdec2_freq = 1;
			}
			
			if(qdec2_dir == 1){
    52b0:	11 23       	and	r17, r17
    52b2:	19 f0       	breq	.+6      	; 0x52ba <user_callback_sof_action+0x3d4>
				qdec2_freq *= -1;
    52b4:	31 95       	neg	r19
    52b6:	21 95       	neg	r18
    52b8:	31 09       	sbc	r19, r1
			}
			
			switch(input_type_lookup[JOY3_L_LKUP_INDEX]){
    52ba:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <input_type_lookup+0xa>
    52be:	86 30       	cpi	r24, 0x06	; 6
    52c0:	49 f0       	breq	.+18     	; 0x52d4 <user_callback_sof_action+0x3ee>
    52c2:	87 30       	cpi	r24, 0x07	; 7
    52c4:	59 f0       	breq	.+22     	; 0x52dc <user_callback_sof_action+0x3f6>
    52c6:	85 30       	cpi	r24, 0x05	; 5
    52c8:	09 f0       	breq	.+2      	; 0x52cc <user_callback_sof_action+0x3e6>
    52ca:	3e c0       	rjmp	.+124    	; 0x5348 <user_callback_sof_action+0x462>
				case IT_MOUSE_XAXIS:
					udi_hid_mouse_moveX(qdec2_freq);
    52cc:	82 2f       	mov	r24, r18
    52ce:	0e 94 4f 1a 	call	0x349e	; 0x349e <udi_hid_mouse_moveX>
					break;
    52d2:	3a c0       	rjmp	.+116    	; 0x5348 <user_callback_sof_action+0x462>
				case IT_MOUSE_YAXIS:
					udi_hid_mouse_moveY(qdec2_freq);
    52d4:	82 2f       	mov	r24, r18
    52d6:	0e 94 4c 1a 	call	0x3498	; 0x3498 <udi_hid_mouse_moveY>
					break;
				case IT_MOUSE_ZAXIS:
					udi_hid_mouse_moveScroll(qdec2_freq);
    52da:	36 c0       	rjmp	.+108    	; 0x5348 <user_callback_sof_action+0x462>
    52dc:	82 2f       	mov	r24, r18
    52de:	0e 94 49 1a 	call	0x3492	; 0x3492 <udi_hid_mouse_moveScroll>
    52e2:	32 c0       	rjmp	.+100    	; 0x5348 <user_callback_sof_action+0x462>
    52e4:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
		}
	}
	else{
		//QEC2 Disabled
		//if(ioport_pin_is_low(JOY3_L)){
		if(ioport_pin_is_high(JOY3_L)){ //inverted logic
    52e8:	80 ff       	sbrs	r24, 0
			checkJoystickDown(JOY3_L_LKUP_INDEX, JOY3_L_MASK);
    52ea:	0b c0       	rjmp	.+22     	; 0x5302 <user_callback_sof_action+0x41c>
    52ec:	00 e0       	ldi	r16, 0x00	; 0
    52ee:	14 e0       	ldi	r17, 0x04	; 4
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	40 e0       	ldi	r20, 0x00	; 0
    52f6:	50 e0       	ldi	r21, 0x00	; 0
    52f8:	60 e0       	ldi	r22, 0x00	; 0
    52fa:	70 e0       	ldi	r23, 0x00	; 0
    52fc:	8a e0       	ldi	r24, 0x0A	; 10
    52fe:	b4 db       	rcall	.-2200   	; 0x4a68 <checkJoystickDown>
		}
		else{
			checkJoystickUp(JOY3_L_LKUP_INDEX, JOY3_L_MASK);
    5300:	0a c0       	rjmp	.+20     	; 0x5316 <user_callback_sof_action+0x430>
    5302:	00 e0       	ldi	r16, 0x00	; 0
    5304:	14 e0       	ldi	r17, 0x04	; 4
    5306:	20 e0       	ldi	r18, 0x00	; 0
    5308:	30 e0       	ldi	r19, 0x00	; 0
    530a:	40 e0       	ldi	r20, 0x00	; 0
    530c:	50 e0       	ldi	r21, 0x00	; 0
    530e:	60 e0       	ldi	r22, 0x00	; 0
    5310:	70 e0       	ldi	r23, 0x00	; 0
    5312:	8a e0       	ldi	r24, 0x0A	; 10
    5314:	26 d9       	rcall	.-3508   	; 0x4562 <checkJoystickUp>
    5316:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
		}
		//if(ioport_pin_is_low(JOY3_R)){
		if(ioport_pin_is_high(JOY3_R)){ //inverted logic
			checkJoystickDown(JOY3_R_LKUP_INDEX, JOY3_R_MASK);
    531a:	81 ff       	sbrs	r24, 1
    531c:	0b c0       	rjmp	.+22     	; 0x5334 <user_callback_sof_action+0x44e>
    531e:	00 e0       	ldi	r16, 0x00	; 0
    5320:	18 e0       	ldi	r17, 0x08	; 8
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	40 e0       	ldi	r20, 0x00	; 0
    5328:	50 e0       	ldi	r21, 0x00	; 0
    532a:	60 e0       	ldi	r22, 0x00	; 0
    532c:	70 e0       	ldi	r23, 0x00	; 0
    532e:	8b e0       	ldi	r24, 0x0B	; 11
    5330:	9b db       	rcall	.-2250   	; 0x4a68 <checkJoystickDown>
		}
		else{
			checkJoystickUp(JOY3_R_LKUP_INDEX, JOY3_R_MASK);
    5332:	0a c0       	rjmp	.+20     	; 0x5348 <user_callback_sof_action+0x462>
    5334:	00 e0       	ldi	r16, 0x00	; 0
    5336:	18 e0       	ldi	r17, 0x08	; 8
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	40 e0       	ldi	r20, 0x00	; 0
    533e:	50 e0       	ldi	r21, 0x00	; 0
    5340:	60 e0       	ldi	r22, 0x00	; 0
    5342:	70 e0       	ldi	r23, 0x00	; 0
    5344:	8b e0       	ldi	r24, 0x0B	; 11
    5346:	0d d9       	rcall	.-3558   	; 0x4562 <checkJoystickUp>
		}	
	}

	
	//check JOY4_L and JOY4_R inputs (Can be QEC3 for Mouse Axis)
	if((input_type_lookup[JOY4_L_LKUP_INDEX] >= IT_MOUSE_XAXIS)&&(input_type_lookup[JOY4_R_LKUP_INDEX] <= IT_MOUSE_ZAXIS)){
    5348:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <input_type_lookup+0xe>
    534c:	85 30       	cpi	r24, 0x05	; 5
    534e:	08 f4       	brcc	.+2      	; 0x5352 <user_callback_sof_action+0x46c>
    5350:	3f c0       	rjmp	.+126    	; 0x53d0 <user_callback_sof_action+0x4ea>
    5352:	80 91 df 29 	lds	r24, 0x29DF	; 0x8029df <input_type_lookup+0xf>
    5356:	88 30       	cpi	r24, 0x08	; 8
    5358:	d8 f5       	brcc	.+118    	; 0x53d0 <user_callback_sof_action+0x4ea>
		//QEC3 Enabled
		qdec3_dir = qdec_get_direction(&gConfig3);
    535a:	8b e8       	ldi	r24, 0x8B	; 139
    535c:	9a e2       	ldi	r25, 0x2A	; 42
    535e:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    5362:	18 2f       	mov	r17, r24
		qdec3_pos = qdec_get_position(&gConfig3);
    5364:	8b e8       	ldi	r24, 0x8B	; 139
    5366:	9a e2       	ldi	r25, 0x2A	; 42
    5368:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    536c:	ec 01       	movw	r28, r24
		qdec3_freq = qdec_get_frequency(&gConfig3);
    536e:	8b e8       	ldi	r24, 0x8B	; 139
    5370:	9a e2       	ldi	r25, 0x2A	; 42
    5372:	0e 94 cd 06 	call	0xd9a	; 0xd9a <qdec_get_frequency>
		if(qdec3_pos != gQdec3_prev_pos){
    5376:	20 91 70 29 	lds	r18, 0x2970	; 0x802970 <gQdec3_prev_pos>
    537a:	30 91 71 29 	lds	r19, 0x2971	; 0x802971 <gQdec3_prev_pos+0x1>
    537e:	c2 17       	cp	r28, r18
    5380:	d3 07       	cpc	r29, r19
    5382:	09 f4       	brne	.+2      	; 0x5386 <user_callback_sof_action+0x4a0>
    5384:	57 c0       	rjmp	.+174    	; 0x5434 <user_callback_sof_action+0x54e>
			gQdec3_prev_pos = qdec3_pos;
    5386:	c0 93 70 29 	sts	0x2970, r28	; 0x802970 <gQdec3_prev_pos>
    538a:	d0 93 71 29 	sts	0x2971, r29	; 0x802971 <gQdec3_prev_pos+0x1>
    538e:	28 2f       	mov	r18, r24
    5390:	39 2f       	mov	r19, r25
    5392:	21 15       	cp	r18, r1
    5394:	31 05       	cpc	r19, r1
    5396:	11 f4       	brne	.+4      	; 0x539c <user_callback_sof_action+0x4b6>
    5398:	21 e0       	ldi	r18, 0x01	; 1
    539a:	30 e0       	ldi	r19, 0x00	; 0
			if(qdec3_freq < 2){
				qdec3_freq = 1;
			}
			
			if(qdec3_dir == 1){
    539c:	11 23       	and	r17, r17
    539e:	19 f0       	breq	.+6      	; 0x53a6 <user_callback_sof_action+0x4c0>
				qdec3_freq *= -1;
    53a0:	31 95       	neg	r19
    53a2:	21 95       	neg	r18
    53a4:	31 09       	sbc	r19, r1
			}
			
			switch(input_type_lookup[JOY4_L_LKUP_INDEX]){
    53a6:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <input_type_lookup+0xe>
    53aa:	86 30       	cpi	r24, 0x06	; 6
    53ac:	49 f0       	breq	.+18     	; 0x53c0 <user_callback_sof_action+0x4da>
    53ae:	87 30       	cpi	r24, 0x07	; 7
    53b0:	59 f0       	breq	.+22     	; 0x53c8 <user_callback_sof_action+0x4e2>
    53b2:	85 30       	cpi	r24, 0x05	; 5
    53b4:	09 f0       	breq	.+2      	; 0x53b8 <user_callback_sof_action+0x4d2>
    53b6:	3e c0       	rjmp	.+124    	; 0x5434 <user_callback_sof_action+0x54e>
				case IT_MOUSE_XAXIS:
					udi_hid_mouse_moveX(qdec3_freq);
    53b8:	82 2f       	mov	r24, r18
    53ba:	0e 94 4f 1a 	call	0x349e	; 0x349e <udi_hid_mouse_moveX>
					break;
				case IT_MOUSE_YAXIS:
					udi_hid_mouse_moveY(qdec3_freq);
    53be:	3a c0       	rjmp	.+116    	; 0x5434 <user_callback_sof_action+0x54e>
    53c0:	82 2f       	mov	r24, r18
    53c2:	0e 94 4c 1a 	call	0x3498	; 0x3498 <udi_hid_mouse_moveY>
					break;
				case IT_MOUSE_ZAXIS:
					udi_hid_mouse_moveScroll(qdec3_freq);
    53c6:	36 c0       	rjmp	.+108    	; 0x5434 <user_callback_sof_action+0x54e>
    53c8:	82 2f       	mov	r24, r18
    53ca:	0e 94 49 1a 	call	0x3492	; 0x3492 <udi_hid_mouse_moveScroll>
    53ce:	32 c0       	rjmp	.+100    	; 0x5434 <user_callback_sof_action+0x54e>
		}
	}
	else{
		//QEC3 Disabled
		//if(ioport_pin_is_low(JOY4_L)){
		if(ioport_pin_is_high(JOY4_L)){ //inverted logic
    53d0:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
			checkJoystickDown(JOY4_L_LKUP_INDEX, JOY4_L_MASK);
    53d4:	84 ff       	sbrs	r24, 4
    53d6:	0b c0       	rjmp	.+22     	; 0x53ee <user_callback_sof_action+0x508>
    53d8:	00 e0       	ldi	r16, 0x00	; 0
    53da:	10 e4       	ldi	r17, 0x40	; 64
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	40 e0       	ldi	r20, 0x00	; 0
    53e2:	50 e0       	ldi	r21, 0x00	; 0
    53e4:	60 e0       	ldi	r22, 0x00	; 0
    53e6:	70 e0       	ldi	r23, 0x00	; 0
    53e8:	8e e0       	ldi	r24, 0x0E	; 14
    53ea:	3e db       	rcall	.-2436   	; 0x4a68 <checkJoystickDown>
		}
		else{
			checkJoystickUp(JOY4_L_LKUP_INDEX, JOY4_L_MASK);
    53ec:	0a c0       	rjmp	.+20     	; 0x5402 <user_callback_sof_action+0x51c>
    53ee:	00 e0       	ldi	r16, 0x00	; 0
    53f0:	10 e4       	ldi	r17, 0x40	; 64
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	40 e0       	ldi	r20, 0x00	; 0
    53f8:	50 e0       	ldi	r21, 0x00	; 0
    53fa:	60 e0       	ldi	r22, 0x00	; 0
    53fc:	70 e0       	ldi	r23, 0x00	; 0
    53fe:	8e e0       	ldi	r24, 0x0E	; 14
    5400:	b0 d8       	rcall	.-3744   	; 0x4562 <checkJoystickUp>
		}
		//if(ioport_pin_is_low(JOY4_R)){
		if(ioport_pin_is_high(JOY4_R)){ //inverted logic
    5402:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
			checkJoystickDown(JOY4_R_LKUP_INDEX, JOY4_R_MASK);
    5406:	85 ff       	sbrs	r24, 5
    5408:	0b c0       	rjmp	.+22     	; 0x5420 <user_callback_sof_action+0x53a>
    540a:	00 e0       	ldi	r16, 0x00	; 0
    540c:	10 e8       	ldi	r17, 0x80	; 128
    540e:	20 e0       	ldi	r18, 0x00	; 0
    5410:	30 e0       	ldi	r19, 0x00	; 0
    5412:	40 e0       	ldi	r20, 0x00	; 0
    5414:	50 e0       	ldi	r21, 0x00	; 0
    5416:	60 e0       	ldi	r22, 0x00	; 0
    5418:	70 e0       	ldi	r23, 0x00	; 0
    541a:	8f e0       	ldi	r24, 0x0F	; 15
    541c:	25 db       	rcall	.-2486   	; 0x4a68 <checkJoystickDown>
		}
		else{
			checkJoystickUp(JOY4_R_LKUP_INDEX, JOY4_R_MASK);
    541e:	0a c0       	rjmp	.+20     	; 0x5434 <user_callback_sof_action+0x54e>
    5420:	00 e0       	ldi	r16, 0x00	; 0
    5422:	10 e8       	ldi	r17, 0x80	; 128
    5424:	20 e0       	ldi	r18, 0x00	; 0
    5426:	30 e0       	ldi	r19, 0x00	; 0
    5428:	40 e0       	ldi	r20, 0x00	; 0
    542a:	50 e0       	ldi	r21, 0x00	; 0
    542c:	60 e0       	ldi	r22, 0x00	; 0
    542e:	70 e0       	ldi	r23, 0x00	; 0
    5430:	8f e0       	ldi	r24, 0x0F	; 15
    5432:	97 d8       	rcall	.-3794   	; 0x4562 <checkJoystickUp>
		}
	}

	//check JOY4_U and JOY4_D buttons
	if(ioport_pin_is_low(JOY4_U)){
    5434:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
		checkJoystickDown(JOY4_U_LKUP_INDEX, JOY4_U_MASK);
    5438:	80 fd       	sbrc	r24, 0
    543a:	0b c0       	rjmp	.+22     	; 0x5452 <user_callback_sof_action+0x56c>
    543c:	00 e0       	ldi	r16, 0x00	; 0
    543e:	10 e1       	ldi	r17, 0x10	; 16
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e0       	ldi	r20, 0x00	; 0
    5446:	50 e0       	ldi	r21, 0x00	; 0
    5448:	60 e0       	ldi	r22, 0x00	; 0
    544a:	70 e0       	ldi	r23, 0x00	; 0
    544c:	8c e0       	ldi	r24, 0x0C	; 12
	}
	else{
		checkJoystickUp(JOY4_U_LKUP_INDEX, JOY4_U_MASK);
    544e:	0c db       	rcall	.-2536   	; 0x4a68 <checkJoystickDown>
    5450:	0a c0       	rjmp	.+20     	; 0x5466 <user_callback_sof_action+0x580>
    5452:	00 e0       	ldi	r16, 0x00	; 0
    5454:	10 e1       	ldi	r17, 0x10	; 16
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	30 e0       	ldi	r19, 0x00	; 0
    545a:	40 e0       	ldi	r20, 0x00	; 0
    545c:	50 e0       	ldi	r21, 0x00	; 0
    545e:	60 e0       	ldi	r22, 0x00	; 0
    5460:	70 e0       	ldi	r23, 0x00	; 0
    5462:	8c e0       	ldi	r24, 0x0C	; 12
    5464:	7e d8       	rcall	.-3844   	; 0x4562 <checkJoystickUp>
	}
	if(ioport_pin_is_low(JOY4_D)){
    5466:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
		checkJoystickDown(JOY4_D_LKUP_INDEX, JOY4_D_MASK);
    546a:	81 fd       	sbrc	r24, 1
    546c:	0b c0       	rjmp	.+22     	; 0x5484 <user_callback_sof_action+0x59e>
    546e:	00 e0       	ldi	r16, 0x00	; 0
    5470:	10 e2       	ldi	r17, 0x20	; 32
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	40 e0       	ldi	r20, 0x00	; 0
    5478:	50 e0       	ldi	r21, 0x00	; 0
    547a:	60 e0       	ldi	r22, 0x00	; 0
    547c:	70 e0       	ldi	r23, 0x00	; 0
    547e:	8d e0       	ldi	r24, 0x0D	; 13
	}
	else{
		checkJoystickUp(JOY4_D_LKUP_INDEX, JOY4_D_MASK);
    5480:	f3 da       	rcall	.-2586   	; 0x4a68 <checkJoystickDown>
    5482:	0a c0       	rjmp	.+20     	; 0x5498 <user_callback_sof_action+0x5b2>
    5484:	00 e0       	ldi	r16, 0x00	; 0
    5486:	10 e2       	ldi	r17, 0x20	; 32
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	40 e0       	ldi	r20, 0x00	; 0
    548e:	50 e0       	ldi	r21, 0x00	; 0
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	70 e0       	ldi	r23, 0x00	; 0
    5494:	8d e0       	ldi	r24, 0x0D	; 13
    5496:	65 d8       	rcall	.-3894   	; 0x4562 <checkJoystickUp>
	}
	
	//Check Button inputs
	if(ioport_pin_is_low(BUTT1)){
    5498:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
		checkButtonDown(BUTT1_LKUP_INDEX, BUTT1_MASK);
    549c:	80 fd       	sbrc	r24, 0
    549e:	0b c0       	rjmp	.+22     	; 0x54b6 <user_callback_sof_action+0x5d0>
    54a0:	00 e0       	ldi	r16, 0x00	; 0
    54a2:	10 e0       	ldi	r17, 0x00	; 0
    54a4:	21 e0       	ldi	r18, 0x01	; 1
    54a6:	30 e0       	ldi	r19, 0x00	; 0
    54a8:	40 e0       	ldi	r20, 0x00	; 0
    54aa:	50 e0       	ldi	r21, 0x00	; 0
    54ac:	60 e0       	ldi	r22, 0x00	; 0
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	80 e1       	ldi	r24, 0x10	; 16
	}
	else{
		checkButtonUp(BUTT1_LKUP_INDEX, BUTT1_MASK);
    54b2:	08 dc       	rcall	.-2032   	; 0x4cc4 <checkButtonDown>
    54b4:	0a c0       	rjmp	.+20     	; 0x54ca <user_callback_sof_action+0x5e4>
    54b6:	00 e0       	ldi	r16, 0x00	; 0
    54b8:	10 e0       	ldi	r17, 0x00	; 0
    54ba:	21 e0       	ldi	r18, 0x01	; 1
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	50 e0       	ldi	r21, 0x00	; 0
    54c2:	60 e0       	ldi	r22, 0x00	; 0
    54c4:	70 e0       	ldi	r23, 0x00	; 0
    54c6:	80 e1       	ldi	r24, 0x10	; 16
    54c8:	4d d9       	rcall	.-3430   	; 0x4764 <checkButtonUp>
	}	
	if(ioport_pin_is_low(BUTT2)){
    54ca:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
		checkButtonDown(BUTT2_LKUP_INDEX, BUTT2_MASK);
    54ce:	81 fd       	sbrc	r24, 1
    54d0:	0b c0       	rjmp	.+22     	; 0x54e8 <user_callback_sof_action+0x602>
    54d2:	00 e0       	ldi	r16, 0x00	; 0
    54d4:	10 e0       	ldi	r17, 0x00	; 0
    54d6:	22 e0       	ldi	r18, 0x02	; 2
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	40 e0       	ldi	r20, 0x00	; 0
    54dc:	50 e0       	ldi	r21, 0x00	; 0
    54de:	60 e0       	ldi	r22, 0x00	; 0
    54e0:	70 e0       	ldi	r23, 0x00	; 0
    54e2:	81 e1       	ldi	r24, 0x11	; 17
	}
	else{
		checkButtonUp(BUTT2_LKUP_INDEX, BUTT2_MASK);
    54e4:	ef db       	rcall	.-2082   	; 0x4cc4 <checkButtonDown>
    54e6:	0a c0       	rjmp	.+20     	; 0x54fc <user_callback_sof_action+0x616>
    54e8:	00 e0       	ldi	r16, 0x00	; 0
    54ea:	10 e0       	ldi	r17, 0x00	; 0
    54ec:	22 e0       	ldi	r18, 0x02	; 2
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	40 e0       	ldi	r20, 0x00	; 0
    54f2:	50 e0       	ldi	r21, 0x00	; 0
    54f4:	60 e0       	ldi	r22, 0x00	; 0
    54f6:	70 e0       	ldi	r23, 0x00	; 0
    54f8:	81 e1       	ldi	r24, 0x11	; 17
    54fa:	34 d9       	rcall	.-3480   	; 0x4764 <checkButtonUp>
    54fc:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	}
	
	if(ioport_pin_is_low(BUTT3)){
    5500:	83 fd       	sbrc	r24, 3
		checkButtonDown(BUTT3_LKUP_INDEX, BUTT3_MASK);
    5502:	0b c0       	rjmp	.+22     	; 0x551a <user_callback_sof_action+0x634>
    5504:	00 e0       	ldi	r16, 0x00	; 0
    5506:	10 e0       	ldi	r17, 0x00	; 0
    5508:	24 e0       	ldi	r18, 0x04	; 4
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	40 e0       	ldi	r20, 0x00	; 0
    550e:	50 e0       	ldi	r21, 0x00	; 0
    5510:	60 e0       	ldi	r22, 0x00	; 0
    5512:	70 e0       	ldi	r23, 0x00	; 0
    5514:	82 e1       	ldi	r24, 0x12	; 18
	}
	else{
		checkButtonUp(BUTT3_LKUP_INDEX, BUTT3_MASK);
    5516:	d6 db       	rcall	.-2132   	; 0x4cc4 <checkButtonDown>
    5518:	0a c0       	rjmp	.+20     	; 0x552e <user_callback_sof_action+0x648>
    551a:	00 e0       	ldi	r16, 0x00	; 0
    551c:	10 e0       	ldi	r17, 0x00	; 0
    551e:	24 e0       	ldi	r18, 0x04	; 4
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	40 e0       	ldi	r20, 0x00	; 0
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	60 e0       	ldi	r22, 0x00	; 0
    5528:	70 e0       	ldi	r23, 0x00	; 0
    552a:	82 e1       	ldi	r24, 0x12	; 18
    552c:	1b d9       	rcall	.-3530   	; 0x4764 <checkButtonUp>
    552e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	}
	
	if(ioport_pin_is_low(BUTT4)){
    5532:	84 fd       	sbrc	r24, 4
		checkButtonDown(BUTT4_LKUP_INDEX, BUTT4_MASK);
    5534:	0b c0       	rjmp	.+22     	; 0x554c <user_callback_sof_action+0x666>
    5536:	00 e0       	ldi	r16, 0x00	; 0
    5538:	10 e0       	ldi	r17, 0x00	; 0
    553a:	28 e0       	ldi	r18, 0x08	; 8
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	40 e0       	ldi	r20, 0x00	; 0
    5540:	50 e0       	ldi	r21, 0x00	; 0
    5542:	60 e0       	ldi	r22, 0x00	; 0
    5544:	70 e0       	ldi	r23, 0x00	; 0
    5546:	83 e1       	ldi	r24, 0x13	; 19
	}
	else{
		checkButtonUp(BUTT4_LKUP_INDEX, BUTT4_MASK);
    5548:	bd db       	rcall	.-2182   	; 0x4cc4 <checkButtonDown>
    554a:	0a c0       	rjmp	.+20     	; 0x5560 <user_callback_sof_action+0x67a>
    554c:	00 e0       	ldi	r16, 0x00	; 0
    554e:	10 e0       	ldi	r17, 0x00	; 0
    5550:	28 e0       	ldi	r18, 0x08	; 8
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	40 e0       	ldi	r20, 0x00	; 0
    5556:	50 e0       	ldi	r21, 0x00	; 0
    5558:	60 e0       	ldi	r22, 0x00	; 0
    555a:	70 e0       	ldi	r23, 0x00	; 0
    555c:	83 e1       	ldi	r24, 0x13	; 19
    555e:	02 d9       	rcall	.-3580   	; 0x4764 <checkButtonUp>
    5560:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	}
	
	if(ioport_pin_is_low(BUTT5)){
    5564:	85 fd       	sbrc	r24, 5
		checkButtonDown(BUTT5_LKUP_INDEX, BUTT5_MASK);
    5566:	0b c0       	rjmp	.+22     	; 0x557e <user_callback_sof_action+0x698>
    5568:	00 e0       	ldi	r16, 0x00	; 0
    556a:	10 e0       	ldi	r17, 0x00	; 0
    556c:	20 e1       	ldi	r18, 0x10	; 16
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	40 e0       	ldi	r20, 0x00	; 0
    5572:	50 e0       	ldi	r21, 0x00	; 0
    5574:	60 e0       	ldi	r22, 0x00	; 0
    5576:	70 e0       	ldi	r23, 0x00	; 0
    5578:	84 e1       	ldi	r24, 0x14	; 20
	}
	else{
		checkButtonUp(BUTT5_LKUP_INDEX, BUTT5_MASK);
    557a:	a4 db       	rcall	.-2232   	; 0x4cc4 <checkButtonDown>
    557c:	0a c0       	rjmp	.+20     	; 0x5592 <user_callback_sof_action+0x6ac>
    557e:	00 e0       	ldi	r16, 0x00	; 0
    5580:	10 e0       	ldi	r17, 0x00	; 0
    5582:	20 e1       	ldi	r18, 0x10	; 16
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e0       	ldi	r20, 0x00	; 0
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	60 e0       	ldi	r22, 0x00	; 0
    558c:	70 e0       	ldi	r23, 0x00	; 0
    558e:	84 e1       	ldi	r24, 0x14	; 20
    5590:	e9 d8       	rcall	.-3630   	; 0x4764 <checkButtonUp>
    5592:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	}
	
	if(ioport_pin_is_low(BUTT6)){
    5596:	86 fd       	sbrc	r24, 6
		checkButtonDown(BUTT6_LKUP_INDEX, BUTT6_MASK);
    5598:	0b c0       	rjmp	.+22     	; 0x55b0 <user_callback_sof_action+0x6ca>
    559a:	00 e0       	ldi	r16, 0x00	; 0
    559c:	10 e0       	ldi	r17, 0x00	; 0
    559e:	20 e2       	ldi	r18, 0x20	; 32
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e0       	ldi	r20, 0x00	; 0
    55a4:	50 e0       	ldi	r21, 0x00	; 0
    55a6:	60 e0       	ldi	r22, 0x00	; 0
    55a8:	70 e0       	ldi	r23, 0x00	; 0
    55aa:	85 e1       	ldi	r24, 0x15	; 21
	}
	else{
		checkButtonUp(BUTT6_LKUP_INDEX, BUTT6_MASK);
    55ac:	8b db       	rcall	.-2282   	; 0x4cc4 <checkButtonDown>
    55ae:	0a c0       	rjmp	.+20     	; 0x55c4 <user_callback_sof_action+0x6de>
    55b0:	00 e0       	ldi	r16, 0x00	; 0
    55b2:	10 e0       	ldi	r17, 0x00	; 0
    55b4:	20 e2       	ldi	r18, 0x20	; 32
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	40 e0       	ldi	r20, 0x00	; 0
    55ba:	50 e0       	ldi	r21, 0x00	; 0
    55bc:	60 e0       	ldi	r22, 0x00	; 0
    55be:	70 e0       	ldi	r23, 0x00	; 0
    55c0:	85 e1       	ldi	r24, 0x15	; 21
    55c2:	d0 d8       	rcall	.-3680   	; 0x4764 <checkButtonUp>
    55c4:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
	}
	
	if(ioport_pin_is_low(BUTT7)){
    55c8:	88 23       	and	r24, r24
		checkButtonDown(BUTT7_LKUP_INDEX, BUTT7_MASK);
    55ca:	5c f0       	brlt	.+22     	; 0x55e2 <user_callback_sof_action+0x6fc>
    55cc:	00 e0       	ldi	r16, 0x00	; 0
    55ce:	10 e0       	ldi	r17, 0x00	; 0
    55d0:	20 e4       	ldi	r18, 0x40	; 64
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	40 e0       	ldi	r20, 0x00	; 0
    55d6:	50 e0       	ldi	r21, 0x00	; 0
    55d8:	60 e0       	ldi	r22, 0x00	; 0
    55da:	70 e0       	ldi	r23, 0x00	; 0
    55dc:	86 e1       	ldi	r24, 0x16	; 22
	}
	else{
		checkButtonUp(BUTT7_LKUP_INDEX, BUTT7_MASK);
    55de:	72 db       	rcall	.-2332   	; 0x4cc4 <checkButtonDown>
    55e0:	0a c0       	rjmp	.+20     	; 0x55f6 <user_callback_sof_action+0x710>
    55e2:	00 e0       	ldi	r16, 0x00	; 0
    55e4:	10 e0       	ldi	r17, 0x00	; 0
    55e6:	20 e4       	ldi	r18, 0x40	; 64
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	40 e0       	ldi	r20, 0x00	; 0
    55ec:	50 e0       	ldi	r21, 0x00	; 0
    55ee:	60 e0       	ldi	r22, 0x00	; 0
    55f0:	70 e0       	ldi	r23, 0x00	; 0
    55f2:	86 e1       	ldi	r24, 0x16	; 22
    55f4:	b7 d8       	rcall	.-3730   	; 0x4764 <checkButtonUp>
    55f6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	}
	
	if(ioport_pin_is_low(BUTT8)){
		checkButtonDown(BUTT8_LKUP_INDEX, BUTT8_MASK);
    55fa:	82 fd       	sbrc	r24, 2
    55fc:	0b c0       	rjmp	.+22     	; 0x5614 <user_callback_sof_action+0x72e>
    55fe:	00 e0       	ldi	r16, 0x00	; 0
    5600:	10 e0       	ldi	r17, 0x00	; 0
    5602:	20 e8       	ldi	r18, 0x80	; 128
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e0       	ldi	r20, 0x00	; 0
    5608:	50 e0       	ldi	r21, 0x00	; 0
    560a:	60 e0       	ldi	r22, 0x00	; 0
    560c:	70 e0       	ldi	r23, 0x00	; 0
    560e:	87 e1       	ldi	r24, 0x17	; 23
	}
	else{
		checkButtonUp(BUTT8_LKUP_INDEX, BUTT8_MASK);
    5610:	59 db       	rcall	.-2382   	; 0x4cc4 <checkButtonDown>
    5612:	0a c0       	rjmp	.+20     	; 0x5628 <user_callback_sof_action+0x742>
    5614:	00 e0       	ldi	r16, 0x00	; 0
    5616:	10 e0       	ldi	r17, 0x00	; 0
    5618:	20 e8       	ldi	r18, 0x80	; 128
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	40 e0       	ldi	r20, 0x00	; 0
    561e:	50 e0       	ldi	r21, 0x00	; 0
    5620:	60 e0       	ldi	r22, 0x00	; 0
    5622:	70 e0       	ldi	r23, 0x00	; 0
    5624:	87 e1       	ldi	r24, 0x17	; 23
    5626:	9e d8       	rcall	.-3780   	; 0x4764 <checkButtonUp>
	}
	
	if(ioport_pin_is_low(BUTT9)){
    5628:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
		checkButtonDown(BUTT9_LKUP_INDEX, BUTT9_MASK);
    562c:	83 fd       	sbrc	r24, 3
    562e:	0b c0       	rjmp	.+22     	; 0x5646 <user_callback_sof_action+0x760>
    5630:	00 e0       	ldi	r16, 0x00	; 0
    5632:	10 e0       	ldi	r17, 0x00	; 0
    5634:	20 e0       	ldi	r18, 0x00	; 0
    5636:	31 e0       	ldi	r19, 0x01	; 1
    5638:	40 e0       	ldi	r20, 0x00	; 0
    563a:	50 e0       	ldi	r21, 0x00	; 0
    563c:	60 e0       	ldi	r22, 0x00	; 0
    563e:	70 e0       	ldi	r23, 0x00	; 0
    5640:	88 e1       	ldi	r24, 0x18	; 24
	}
	else{
		checkButtonUp(BUTT9_LKUP_INDEX, BUTT9_MASK);
    5642:	40 db       	rcall	.-2432   	; 0x4cc4 <checkButtonDown>
    5644:	0a c0       	rjmp	.+20     	; 0x565a <user_callback_sof_action+0x774>
    5646:	00 e0       	ldi	r16, 0x00	; 0
    5648:	10 e0       	ldi	r17, 0x00	; 0
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	31 e0       	ldi	r19, 0x01	; 1
    564e:	40 e0       	ldi	r20, 0x00	; 0
    5650:	50 e0       	ldi	r21, 0x00	; 0
    5652:	60 e0       	ldi	r22, 0x00	; 0
    5654:	70 e0       	ldi	r23, 0x00	; 0
    5656:	88 e1       	ldi	r24, 0x18	; 24
    5658:	85 d8       	rcall	.-3830   	; 0x4764 <checkButtonUp>
	}
	
	if(ioport_pin_is_low(BUTT10)){
    565a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
		checkButtonDown(BUTT10_LKUP_INDEX, BUTT10_MASK);
    565e:	84 fd       	sbrc	r24, 4
    5660:	0b c0       	rjmp	.+22     	; 0x5678 <user_callback_sof_action+0x792>
    5662:	00 e0       	ldi	r16, 0x00	; 0
    5664:	10 e0       	ldi	r17, 0x00	; 0
    5666:	20 e0       	ldi	r18, 0x00	; 0
    5668:	32 e0       	ldi	r19, 0x02	; 2
    566a:	40 e0       	ldi	r20, 0x00	; 0
    566c:	50 e0       	ldi	r21, 0x00	; 0
    566e:	60 e0       	ldi	r22, 0x00	; 0
    5670:	70 e0       	ldi	r23, 0x00	; 0
    5672:	89 e1       	ldi	r24, 0x19	; 25
	}
	else{
		checkButtonUp(BUTT10_LKUP_INDEX, BUTT10_MASK);
    5674:	27 db       	rcall	.-2482   	; 0x4cc4 <checkButtonDown>
    5676:	0a c0       	rjmp	.+20     	; 0x568c <user_callback_sof_action+0x7a6>
    5678:	00 e0       	ldi	r16, 0x00	; 0
    567a:	10 e0       	ldi	r17, 0x00	; 0
    567c:	20 e0       	ldi	r18, 0x00	; 0
    567e:	32 e0       	ldi	r19, 0x02	; 2
    5680:	40 e0       	ldi	r20, 0x00	; 0
    5682:	50 e0       	ldi	r21, 0x00	; 0
    5684:	60 e0       	ldi	r22, 0x00	; 0
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	89 e1       	ldi	r24, 0x19	; 25
    568a:	6c d8       	rcall	.-3880   	; 0x4764 <checkButtonUp>
	}
	
	if(ioport_pin_is_low(BUTT11)){
    568c:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
		checkButtonDown(BUTT11_LKUP_INDEX, BUTT11_MASK);
    5690:	85 fd       	sbrc	r24, 5
    5692:	0b c0       	rjmp	.+22     	; 0x56aa <user_callback_sof_action+0x7c4>
    5694:	00 e0       	ldi	r16, 0x00	; 0
    5696:	10 e0       	ldi	r17, 0x00	; 0
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	34 e0       	ldi	r19, 0x04	; 4
    569c:	40 e0       	ldi	r20, 0x00	; 0
    569e:	50 e0       	ldi	r21, 0x00	; 0
    56a0:	60 e0       	ldi	r22, 0x00	; 0
    56a2:	70 e0       	ldi	r23, 0x00	; 0
    56a4:	8a e1       	ldi	r24, 0x1A	; 26
	}
	else{
		checkButtonUp(BUTT11_LKUP_INDEX, BUTT11_MASK);
    56a6:	0e db       	rcall	.-2532   	; 0x4cc4 <checkButtonDown>
    56a8:	0a c0       	rjmp	.+20     	; 0x56be <user_callback_sof_action+0x7d8>
    56aa:	00 e0       	ldi	r16, 0x00	; 0
    56ac:	10 e0       	ldi	r17, 0x00	; 0
    56ae:	20 e0       	ldi	r18, 0x00	; 0
    56b0:	34 e0       	ldi	r19, 0x04	; 4
    56b2:	40 e0       	ldi	r20, 0x00	; 0
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	60 e0       	ldi	r22, 0x00	; 0
    56b8:	70 e0       	ldi	r23, 0x00	; 0
    56ba:	8a e1       	ldi	r24, 0x1A	; 26
    56bc:	53 d8       	rcall	.-3930   	; 0x4764 <checkButtonUp>
	}
	
	if(ioport_pin_is_low(BUTT12)){
    56be:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
		checkButtonDown(BUTT12_LKUP_INDEX, BUTT12_MASK);
    56c2:	86 fd       	sbrc	r24, 6
    56c4:	0b c0       	rjmp	.+22     	; 0x56dc <user_callback_sof_action+0x7f6>
    56c6:	00 e0       	ldi	r16, 0x00	; 0
    56c8:	10 e0       	ldi	r17, 0x00	; 0
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	38 e0       	ldi	r19, 0x08	; 8
    56ce:	40 e0       	ldi	r20, 0x00	; 0
    56d0:	50 e0       	ldi	r21, 0x00	; 0
    56d2:	60 e0       	ldi	r22, 0x00	; 0
    56d4:	70 e0       	ldi	r23, 0x00	; 0
    56d6:	8b e1       	ldi	r24, 0x1B	; 27
	}
	else{
		checkButtonUp(BUTT12_LKUP_INDEX, BUTT12_MASK);
    56d8:	f5 da       	rcall	.-2582   	; 0x4cc4 <checkButtonDown>
    56da:	0a c0       	rjmp	.+20     	; 0x56f0 <user_callback_sof_action+0x80a>
    56dc:	00 e0       	ldi	r16, 0x00	; 0
    56de:	10 e0       	ldi	r17, 0x00	; 0
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	38 e0       	ldi	r19, 0x08	; 8
    56e4:	40 e0       	ldi	r20, 0x00	; 0
    56e6:	50 e0       	ldi	r21, 0x00	; 0
    56e8:	60 e0       	ldi	r22, 0x00	; 0
    56ea:	70 e0       	ldi	r23, 0x00	; 0
    56ec:	8b e1       	ldi	r24, 0x1B	; 27
	}
	
	if(ioport_pin_is_low(BUTT13)){
    56ee:	3a d8       	rcall	.-3980   	; 0x4764 <checkButtonUp>
    56f0:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
		checkButtonDown(BUTT13_LKUP_INDEX, BUTT13_MASK);
    56f4:	88 23       	and	r24, r24
    56f6:	5c f0       	brlt	.+22     	; 0x570e <user_callback_sof_action+0x828>
    56f8:	00 e0       	ldi	r16, 0x00	; 0
    56fa:	10 e0       	ldi	r17, 0x00	; 0
    56fc:	20 e0       	ldi	r18, 0x00	; 0
    56fe:	30 e1       	ldi	r19, 0x10	; 16
    5700:	40 e0       	ldi	r20, 0x00	; 0
    5702:	50 e0       	ldi	r21, 0x00	; 0
    5704:	60 e0       	ldi	r22, 0x00	; 0
    5706:	70 e0       	ldi	r23, 0x00	; 0
    5708:	8c e1       	ldi	r24, 0x1C	; 28
	}
	else{
		checkButtonUp(BUTT13_LKUP_INDEX, BUTT13_MASK);
    570a:	dc da       	rcall	.-2632   	; 0x4cc4 <checkButtonDown>
    570c:	0a c0       	rjmp	.+20     	; 0x5722 <user_callback_sof_action+0x83c>
    570e:	00 e0       	ldi	r16, 0x00	; 0
    5710:	10 e0       	ldi	r17, 0x00	; 0
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e1       	ldi	r19, 0x10	; 16
    5716:	40 e0       	ldi	r20, 0x00	; 0
    5718:	50 e0       	ldi	r21, 0x00	; 0
    571a:	60 e0       	ldi	r22, 0x00	; 0
    571c:	70 e0       	ldi	r23, 0x00	; 0
    571e:	8c e1       	ldi	r24, 0x1C	; 28
    5720:	21 d8       	rcall	.-4030   	; 0x4764 <checkButtonUp>
	}
	
	if(ioport_pin_is_low(BUTT14)){
    5722:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
		checkButtonDown(BUTT14_LKUP_INDEX, BUTT14_MASK);
    5726:	88 23       	and	r24, r24
    5728:	5c f0       	brlt	.+22     	; 0x5740 <user_callback_sof_action+0x85a>
    572a:	00 e0       	ldi	r16, 0x00	; 0
    572c:	10 e0       	ldi	r17, 0x00	; 0
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e2       	ldi	r19, 0x20	; 32
    5732:	40 e0       	ldi	r20, 0x00	; 0
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	60 e0       	ldi	r22, 0x00	; 0
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	8d e1       	ldi	r24, 0x1D	; 29
    573c:	c3 da       	rcall	.-2682   	; 0x4cc4 <checkButtonDown>
	}
	else{
		checkButtonUp(BUTT14_LKUP_INDEX, BUTT14_MASK);
    573e:	0a c0       	rjmp	.+20     	; 0x5754 <user_callback_sof_action+0x86e>
    5740:	00 e0       	ldi	r16, 0x00	; 0
    5742:	10 e0       	ldi	r17, 0x00	; 0
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	30 e2       	ldi	r19, 0x20	; 32
    5748:	40 e0       	ldi	r20, 0x00	; 0
    574a:	50 e0       	ldi	r21, 0x00	; 0
    574c:	60 e0       	ldi	r22, 0x00	; 0
    574e:	70 e0       	ldi	r23, 0x00	; 0
    5750:	8d e1       	ldi	r24, 0x1D	; 29
    5752:	08 d8       	rcall	.-4080   	; 0x4764 <checkButtonUp>
    5754:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT15)){
    5758:	86 fd       	sbrc	r24, 6
		checkButtonDown(BUTT15_LKUP_INDEX, BUTT15_MASK);
    575a:	0b c0       	rjmp	.+22     	; 0x5772 <user_callback_sof_action+0x88c>
    575c:	00 e0       	ldi	r16, 0x00	; 0
    575e:	10 e0       	ldi	r17, 0x00	; 0
    5760:	20 e0       	ldi	r18, 0x00	; 0
    5762:	30 e4       	ldi	r19, 0x40	; 64
    5764:	40 e0       	ldi	r20, 0x00	; 0
    5766:	50 e0       	ldi	r21, 0x00	; 0
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	70 e0       	ldi	r23, 0x00	; 0
    576c:	8e e1       	ldi	r24, 0x1E	; 30
    576e:	aa da       	rcall	.-2732   	; 0x4cc4 <checkButtonDown>
    5770:	0b c0       	rjmp	.+22     	; 0x5788 <user_callback_sof_action+0x8a2>
	}
	else{
		checkButtonUp(BUTT15_LKUP_INDEX, BUTT15_MASK);
    5772:	00 e0       	ldi	r16, 0x00	; 0
    5774:	10 e0       	ldi	r17, 0x00	; 0
    5776:	20 e0       	ldi	r18, 0x00	; 0
    5778:	30 e4       	ldi	r19, 0x40	; 64
    577a:	40 e0       	ldi	r20, 0x00	; 0
    577c:	50 e0       	ldi	r21, 0x00	; 0
    577e:	60 e0       	ldi	r22, 0x00	; 0
    5780:	70 e0       	ldi	r23, 0x00	; 0
    5782:	8e e1       	ldi	r24, 0x1E	; 30
    5784:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    5788:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT16)){
    578c:	85 fd       	sbrc	r24, 5
		checkButtonDown(BUTT16_LKUP_INDEX, BUTT16_MASK);
    578e:	0b c0       	rjmp	.+22     	; 0x57a6 <user_callback_sof_action+0x8c0>
    5790:	00 e0       	ldi	r16, 0x00	; 0
    5792:	10 e0       	ldi	r17, 0x00	; 0
    5794:	20 e0       	ldi	r18, 0x00	; 0
    5796:	30 e8       	ldi	r19, 0x80	; 128
    5798:	40 e0       	ldi	r20, 0x00	; 0
    579a:	50 e0       	ldi	r21, 0x00	; 0
    579c:	60 e0       	ldi	r22, 0x00	; 0
    579e:	70 e0       	ldi	r23, 0x00	; 0
    57a0:	8f e1       	ldi	r24, 0x1F	; 31
    57a2:	90 da       	rcall	.-2784   	; 0x4cc4 <checkButtonDown>
    57a4:	0b c0       	rjmp	.+22     	; 0x57bc <user_callback_sof_action+0x8d6>
	}
	else{
		checkButtonUp(BUTT16_LKUP_INDEX, BUTT16_MASK);
    57a6:	00 e0       	ldi	r16, 0x00	; 0
    57a8:	10 e0       	ldi	r17, 0x00	; 0
    57aa:	20 e0       	ldi	r18, 0x00	; 0
    57ac:	30 e8       	ldi	r19, 0x80	; 128
    57ae:	40 e0       	ldi	r20, 0x00	; 0
    57b0:	50 e0       	ldi	r21, 0x00	; 0
    57b2:	60 e0       	ldi	r22, 0x00	; 0
    57b4:	70 e0       	ldi	r23, 0x00	; 0
    57b6:	8f e1       	ldi	r24, 0x1F	; 31
    57b8:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    57bc:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT17)){
    57c0:	84 fd       	sbrc	r24, 4
		checkButtonDown(BUTT17_LKUP_INDEX, BUTT17_MASK);
    57c2:	0b c0       	rjmp	.+22     	; 0x57da <user_callback_sof_action+0x8f4>
    57c4:	00 e0       	ldi	r16, 0x00	; 0
    57c6:	10 e0       	ldi	r17, 0x00	; 0
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	41 e0       	ldi	r20, 0x01	; 1
    57ce:	50 e0       	ldi	r21, 0x00	; 0
    57d0:	60 e0       	ldi	r22, 0x00	; 0
    57d2:	70 e0       	ldi	r23, 0x00	; 0
    57d4:	80 e2       	ldi	r24, 0x20	; 32
    57d6:	76 da       	rcall	.-2836   	; 0x4cc4 <checkButtonDown>
    57d8:	0b c0       	rjmp	.+22     	; 0x57f0 <user_callback_sof_action+0x90a>
	}
	else{
		checkButtonUp(BUTT17_LKUP_INDEX, BUTT17_MASK);
    57da:	00 e0       	ldi	r16, 0x00	; 0
    57dc:	10 e0       	ldi	r17, 0x00	; 0
    57de:	20 e0       	ldi	r18, 0x00	; 0
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	41 e0       	ldi	r20, 0x01	; 1
    57e4:	50 e0       	ldi	r21, 0x00	; 0
    57e6:	60 e0       	ldi	r22, 0x00	; 0
    57e8:	70 e0       	ldi	r23, 0x00	; 0
    57ea:	80 e2       	ldi	r24, 0x20	; 32
    57ec:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    57f0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT18)){
    57f4:	83 fd       	sbrc	r24, 3
		checkButtonDown(BUTT18_LKUP_INDEX, BUTT18_MASK);
    57f6:	0b c0       	rjmp	.+22     	; 0x580e <user_callback_sof_action+0x928>
    57f8:	00 e0       	ldi	r16, 0x00	; 0
    57fa:	10 e0       	ldi	r17, 0x00	; 0
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	42 e0       	ldi	r20, 0x02	; 2
    5802:	50 e0       	ldi	r21, 0x00	; 0
    5804:	60 e0       	ldi	r22, 0x00	; 0
    5806:	70 e0       	ldi	r23, 0x00	; 0
    5808:	81 e2       	ldi	r24, 0x21	; 33
    580a:	5c da       	rcall	.-2888   	; 0x4cc4 <checkButtonDown>
    580c:	0b c0       	rjmp	.+22     	; 0x5824 <user_callback_sof_action+0x93e>
	}
	else{
		checkButtonUp(BUTT18_LKUP_INDEX, BUTT18_MASK);
    580e:	00 e0       	ldi	r16, 0x00	; 0
    5810:	10 e0       	ldi	r17, 0x00	; 0
    5812:	20 e0       	ldi	r18, 0x00	; 0
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	42 e0       	ldi	r20, 0x02	; 2
    5818:	50 e0       	ldi	r21, 0x00	; 0
    581a:	60 e0       	ldi	r22, 0x00	; 0
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	81 e2       	ldi	r24, 0x21	; 33
    5820:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    5824:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT19)){
    5828:	82 fd       	sbrc	r24, 2
		checkButtonDown(BUTT19_LKUP_INDEX, BUTT19_MASK);
    582a:	0b c0       	rjmp	.+22     	; 0x5842 <user_callback_sof_action+0x95c>
    582c:	00 e0       	ldi	r16, 0x00	; 0
    582e:	10 e0       	ldi	r17, 0x00	; 0
    5830:	20 e0       	ldi	r18, 0x00	; 0
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	44 e0       	ldi	r20, 0x04	; 4
    5836:	50 e0       	ldi	r21, 0x00	; 0
    5838:	60 e0       	ldi	r22, 0x00	; 0
    583a:	70 e0       	ldi	r23, 0x00	; 0
    583c:	82 e2       	ldi	r24, 0x22	; 34
    583e:	42 da       	rcall	.-2940   	; 0x4cc4 <checkButtonDown>
    5840:	0b c0       	rjmp	.+22     	; 0x5858 <user_callback_sof_action+0x972>
	}
	else{
		checkButtonUp(BUTT19_LKUP_INDEX, BUTT19_MASK);
    5842:	00 e0       	ldi	r16, 0x00	; 0
    5844:	10 e0       	ldi	r17, 0x00	; 0
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	44 e0       	ldi	r20, 0x04	; 4
    584c:	50 e0       	ldi	r21, 0x00	; 0
    584e:	60 e0       	ldi	r22, 0x00	; 0
    5850:	70 e0       	ldi	r23, 0x00	; 0
    5852:	82 e2       	ldi	r24, 0x22	; 34
    5854:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    5858:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT20)){
    585c:	81 fd       	sbrc	r24, 1
		checkButtonDown(BUTT20_LKUP_INDEX, BUTT20_MASK);
    585e:	0b c0       	rjmp	.+22     	; 0x5876 <user_callback_sof_action+0x990>
    5860:	00 e0       	ldi	r16, 0x00	; 0
    5862:	10 e0       	ldi	r17, 0x00	; 0
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	48 e0       	ldi	r20, 0x08	; 8
    586a:	50 e0       	ldi	r21, 0x00	; 0
    586c:	60 e0       	ldi	r22, 0x00	; 0
    586e:	70 e0       	ldi	r23, 0x00	; 0
    5870:	83 e2       	ldi	r24, 0x23	; 35
    5872:	28 da       	rcall	.-2992   	; 0x4cc4 <checkButtonDown>
    5874:	0b c0       	rjmp	.+22     	; 0x588c <user_callback_sof_action+0x9a6>
	}
	else{
		checkButtonUp(BUTT20_LKUP_INDEX, BUTT20_MASK);
    5876:	00 e0       	ldi	r16, 0x00	; 0
    5878:	10 e0       	ldi	r17, 0x00	; 0
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	48 e0       	ldi	r20, 0x08	; 8
    5880:	50 e0       	ldi	r21, 0x00	; 0
    5882:	60 e0       	ldi	r22, 0x00	; 0
    5884:	70 e0       	ldi	r23, 0x00	; 0
    5886:	83 e2       	ldi	r24, 0x23	; 35
    5888:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    588c:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	if(ioport_pin_is_low(BUTT21)){
    5890:	80 fd       	sbrc	r24, 0
		checkButtonDown(BUTT21_LKUP_INDEX, BUTT21_MASK);
    5892:	0b c0       	rjmp	.+22     	; 0x58aa <user_callback_sof_action+0x9c4>
    5894:	00 e0       	ldi	r16, 0x00	; 0
    5896:	10 e0       	ldi	r17, 0x00	; 0
    5898:	20 e0       	ldi	r18, 0x00	; 0
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	40 e1       	ldi	r20, 0x10	; 16
    589e:	50 e0       	ldi	r21, 0x00	; 0
    58a0:	60 e0       	ldi	r22, 0x00	; 0
    58a2:	70 e0       	ldi	r23, 0x00	; 0
    58a4:	84 e2       	ldi	r24, 0x24	; 36
    58a6:	0e da       	rcall	.-3044   	; 0x4cc4 <checkButtonDown>
    58a8:	0b c0       	rjmp	.+22     	; 0x58c0 <user_callback_sof_action+0x9da>
	}
	else{
		checkButtonUp(BUTT21_LKUP_INDEX, BUTT21_MASK);
    58aa:	00 e0       	ldi	r16, 0x00	; 0
    58ac:	10 e0       	ldi	r17, 0x00	; 0
    58ae:	20 e0       	ldi	r18, 0x00	; 0
    58b0:	30 e0       	ldi	r19, 0x00	; 0
    58b2:	40 e1       	ldi	r20, 0x10	; 16
    58b4:	50 e0       	ldi	r21, 0x00	; 0
    58b6:	60 e0       	ldi	r22, 0x00	; 0
    58b8:	70 e0       	ldi	r23, 0x00	; 0
    58ba:	84 e2       	ldi	r24, 0x24	; 36
    58bc:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    58c0:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	}
	
	if(ioport_pin_is_low(BUTT22)){
    58c4:	88 23       	and	r24, r24
		checkButtonDown(BUTT22_LKUP_INDEX, BUTT22_MASK);
    58c6:	5c f0       	brlt	.+22     	; 0x58de <user_callback_sof_action+0x9f8>
    58c8:	00 e0       	ldi	r16, 0x00	; 0
    58ca:	10 e0       	ldi	r17, 0x00	; 0
    58cc:	20 e0       	ldi	r18, 0x00	; 0
    58ce:	30 e0       	ldi	r19, 0x00	; 0
    58d0:	40 e2       	ldi	r20, 0x20	; 32
    58d2:	50 e0       	ldi	r21, 0x00	; 0
    58d4:	60 e0       	ldi	r22, 0x00	; 0
    58d6:	70 e0       	ldi	r23, 0x00	; 0
    58d8:	85 e2       	ldi	r24, 0x25	; 37
    58da:	f4 d9       	rcall	.-3096   	; 0x4cc4 <checkButtonDown>
    58dc:	0b c0       	rjmp	.+22     	; 0x58f4 <user_callback_sof_action+0xa0e>
	}
	else{
		checkButtonUp(BUTT22_LKUP_INDEX, BUTT22_MASK);
    58de:	00 e0       	ldi	r16, 0x00	; 0
    58e0:	10 e0       	ldi	r17, 0x00	; 0
    58e2:	20 e0       	ldi	r18, 0x00	; 0
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	40 e2       	ldi	r20, 0x20	; 32
    58e8:	50 e0       	ldi	r21, 0x00	; 0
    58ea:	60 e0       	ldi	r22, 0x00	; 0
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	85 e2       	ldi	r24, 0x25	; 37
    58f0:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    58f4:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	}
	
	if(ioport_pin_is_low(BUTT23)){
    58f8:	86 fd       	sbrc	r24, 6
		checkButtonDown(BUTT23_LKUP_INDEX, BUTT23_MASK);
    58fa:	0b c0       	rjmp	.+22     	; 0x5912 <user_callback_sof_action+0xa2c>
    58fc:	00 e0       	ldi	r16, 0x00	; 0
    58fe:	10 e0       	ldi	r17, 0x00	; 0
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	40 e4       	ldi	r20, 0x40	; 64
    5906:	50 e0       	ldi	r21, 0x00	; 0
    5908:	60 e0       	ldi	r22, 0x00	; 0
    590a:	70 e0       	ldi	r23, 0x00	; 0
    590c:	86 e2       	ldi	r24, 0x26	; 38
    590e:	da d9       	rcall	.-3148   	; 0x4cc4 <checkButtonDown>
    5910:	0b c0       	rjmp	.+22     	; 0x5928 <user_callback_sof_action+0xa42>
	}
	else{
		checkButtonUp(BUTT23_LKUP_INDEX, BUTT23_MASK);
    5912:	00 e0       	ldi	r16, 0x00	; 0
    5914:	10 e0       	ldi	r17, 0x00	; 0
    5916:	20 e0       	ldi	r18, 0x00	; 0
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	40 e4       	ldi	r20, 0x40	; 64
    591c:	50 e0       	ldi	r21, 0x00	; 0
    591e:	60 e0       	ldi	r22, 0x00	; 0
    5920:	70 e0       	ldi	r23, 0x00	; 0
    5922:	86 e2       	ldi	r24, 0x26	; 38
    5924:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    5928:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	}
	
	if(ioport_pin_is_low(BUTT24)){
    592c:	84 fd       	sbrc	r24, 4
		checkButtonDown(BUTT24_LKUP_INDEX, BUTT24_MASK);
    592e:	0b c0       	rjmp	.+22     	; 0x5946 <user_callback_sof_action+0xa60>
    5930:	00 e0       	ldi	r16, 0x00	; 0
    5932:	10 e0       	ldi	r17, 0x00	; 0
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	40 e8       	ldi	r20, 0x80	; 128
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	87 e2       	ldi	r24, 0x27	; 39
    5942:	c0 d9       	rcall	.-3200   	; 0x4cc4 <checkButtonDown>
    5944:	0b c0       	rjmp	.+22     	; 0x595c <user_callback_sof_action+0xa76>
	}
	else{
		checkButtonUp(BUTT24_LKUP_INDEX, BUTT24_MASK);
    5946:	00 e0       	ldi	r16, 0x00	; 0
    5948:	10 e0       	ldi	r17, 0x00	; 0
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	40 e8       	ldi	r20, 0x80	; 128
    5950:	50 e0       	ldi	r21, 0x00	; 0
    5952:	60 e0       	ldi	r22, 0x00	; 0
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	87 e2       	ldi	r24, 0x27	; 39
    5958:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    595c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	}
	
	if(ioport_pin_is_low(BUTT25)){
    5960:	83 fd       	sbrc	r24, 3
		checkButtonDown(BUTT25_LKUP_INDEX, BUTT25_MASK);
    5962:	0b c0       	rjmp	.+22     	; 0x597a <user_callback_sof_action+0xa94>
    5964:	00 e0       	ldi	r16, 0x00	; 0
    5966:	10 e0       	ldi	r17, 0x00	; 0
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	40 e0       	ldi	r20, 0x00	; 0
    596e:	51 e0       	ldi	r21, 0x01	; 1
    5970:	60 e0       	ldi	r22, 0x00	; 0
    5972:	70 e0       	ldi	r23, 0x00	; 0
    5974:	88 e2       	ldi	r24, 0x28	; 40
    5976:	a6 d9       	rcall	.-3252   	; 0x4cc4 <checkButtonDown>
    5978:	0b c0       	rjmp	.+22     	; 0x5990 <user_callback_sof_action+0xaaa>
	}
	else{
		checkButtonUp(BUTT25_LKUP_INDEX, BUTT25_MASK);
    597a:	00 e0       	ldi	r16, 0x00	; 0
    597c:	10 e0       	ldi	r17, 0x00	; 0
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	40 e0       	ldi	r20, 0x00	; 0
    5984:	51 e0       	ldi	r21, 0x01	; 1
    5986:	60 e0       	ldi	r22, 0x00	; 0
    5988:	70 e0       	ldi	r23, 0x00	; 0
    598a:	88 e2       	ldi	r24, 0x28	; 40
    598c:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    5990:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	}
	
	if(ioport_pin_is_low(BUTT26)){
    5994:	82 fd       	sbrc	r24, 2
		checkButtonDown(BUTT26_LKUP_INDEX, BUTT26_MASK);
    5996:	0b c0       	rjmp	.+22     	; 0x59ae <user_callback_sof_action+0xac8>
    5998:	00 e0       	ldi	r16, 0x00	; 0
    599a:	10 e0       	ldi	r17, 0x00	; 0
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	40 e0       	ldi	r20, 0x00	; 0
    59a2:	52 e0       	ldi	r21, 0x02	; 2
    59a4:	60 e0       	ldi	r22, 0x00	; 0
    59a6:	70 e0       	ldi	r23, 0x00	; 0
    59a8:	89 e2       	ldi	r24, 0x29	; 41
    59aa:	8c d9       	rcall	.-3304   	; 0x4cc4 <checkButtonDown>
    59ac:	0b c0       	rjmp	.+22     	; 0x59c4 <user_callback_sof_action+0xade>
	}
	else{
		checkButtonUp(BUTT26_LKUP_INDEX, BUTT26_MASK);
    59ae:	00 e0       	ldi	r16, 0x00	; 0
    59b0:	10 e0       	ldi	r17, 0x00	; 0
    59b2:	20 e0       	ldi	r18, 0x00	; 0
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	40 e0       	ldi	r20, 0x00	; 0
    59b8:	52 e0       	ldi	r21, 0x02	; 2
    59ba:	60 e0       	ldi	r22, 0x00	; 0
    59bc:	70 e0       	ldi	r23, 0x00	; 0
    59be:	89 e2       	ldi	r24, 0x29	; 41
    59c0:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
	}
	
	//Accelerometer code here:
	if((input_type_lookup[ACCEL_XAXIS_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    59c4:	e0 91 fa 29 	lds	r30, 0x29FA	; 0x8029fa <input_type_lookup+0x2a>
    59c8:	e5 ff       	sbrs	r30, 5
    59ca:	07 c0       	rjmp	.+14     	; 0x59da <user_callback_sof_action+0xaf4>
		//ACCEL_XAXIS is an analog input
		gJoy1Buf[input_type_lookup[ACCEL_XAXIS_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = gAccelData[0];
    59cc:	f0 e0       	ldi	r31, 0x00	; 0
    59ce:	e7 51       	subi	r30, 0x17	; 23
    59d0:	f6 4d       	sbci	r31, 0xD6	; 214
    59d2:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <gAccelData>
    59d6:	80 83       	st	Z, r24
    59d8:	29 c0       	rjmp	.+82     	; 0x5a2c <user_callback_sof_action+0xb46>
	}
	else if((input_type_lookup[ACCEL_XAXIS_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    59da:	ee 23       	and	r30, r30
    59dc:	3c f4       	brge	.+14     	; 0x59ec <user_callback_sof_action+0xb06>
		//ACCEL_XAXIS is an analog input
		gJoy2Buf[input_type_lookup[ACCEL_XAXIS_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = gAccelData[0];
    59de:	f0 e0       	ldi	r31, 0x00	; 0
    59e0:	e3 58       	subi	r30, 0x83	; 131
    59e2:	f6 4d       	sbci	r31, 0xD6	; 214
    59e4:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <gAccelData>
    59e8:	80 83       	st	Z, r24
	}
	else{
		//ACCEL_XAXIS is a digital input
		if((gAccelData[0] >= gAccelMinTrig[0]) &&(gAccelData[0] <= gAccelMaxTrig[0])){
    59ea:	20 c0       	rjmp	.+64     	; 0x5a2c <user_callback_sof_action+0xb46>
    59ec:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <gAccelData>
    59f0:	90 91 45 29 	lds	r25, 0x2945	; 0x802945 <gAccelMinTrig>
    59f4:	89 17       	cp	r24, r25
    59f6:	78 f0       	brcs	.+30     	; 0x5a16 <user_callback_sof_action+0xb30>
    59f8:	90 91 42 29 	lds	r25, 0x2942	; 0x802942 <gAccelMaxTrig>
    59fc:	98 17       	cp	r25, r24
			checkButtonDown(ACCEL_XAXIS_LKUP_INDEX, ACCEL_XAXIS_MASK);
    59fe:	58 f0       	brcs	.+22     	; 0x5a16 <user_callback_sof_action+0xb30>
    5a00:	00 e0       	ldi	r16, 0x00	; 0
    5a02:	10 e0       	ldi	r17, 0x00	; 0
    5a04:	20 e0       	ldi	r18, 0x00	; 0
    5a06:	30 e0       	ldi	r19, 0x00	; 0
    5a08:	40 e0       	ldi	r20, 0x00	; 0
    5a0a:	54 e0       	ldi	r21, 0x04	; 4
    5a0c:	60 e0       	ldi	r22, 0x00	; 0
    5a0e:	70 e0       	ldi	r23, 0x00	; 0
    5a10:	8a e2       	ldi	r24, 0x2A	; 42
    5a12:	58 d9       	rcall	.-3408   	; 0x4cc4 <checkButtonDown>
    5a14:	0b c0       	rjmp	.+22     	; 0x5a2c <user_callback_sof_action+0xb46>
		}
		else{
			checkButtonUp(ACCEL_XAXIS_LKUP_INDEX, ACCEL_XAXIS_MASK);
    5a16:	00 e0       	ldi	r16, 0x00	; 0
    5a18:	10 e0       	ldi	r17, 0x00	; 0
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	40 e0       	ldi	r20, 0x00	; 0
    5a20:	54 e0       	ldi	r21, 0x04	; 4
    5a22:	60 e0       	ldi	r22, 0x00	; 0
    5a24:	70 e0       	ldi	r23, 0x00	; 0
    5a26:	8a e2       	ldi	r24, 0x2A	; 42
    5a28:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
		}
	}
	
	if((input_type_lookup[ACCEL_YAXIS_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    5a2c:	e0 91 fb 29 	lds	r30, 0x29FB	; 0x8029fb <input_type_lookup+0x2b>
    5a30:	e5 ff       	sbrs	r30, 5
    5a32:	07 c0       	rjmp	.+14     	; 0x5a42 <user_callback_sof_action+0xb5c>
		//ACCEL_YAXIS is an analog input
		gJoy1Buf[input_type_lookup[ACCEL_YAXIS_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = gAccelData[1];
    5a34:	f0 e0       	ldi	r31, 0x00	; 0
    5a36:	e7 51       	subi	r30, 0x17	; 23
    5a38:	f6 4d       	sbci	r31, 0xD6	; 214
    5a3a:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <gAccelData+0x1>
    5a3e:	80 83       	st	Z, r24
    5a40:	29 c0       	rjmp	.+82     	; 0x5a94 <user_callback_sof_action+0xbae>
	}
	else if((input_type_lookup[ACCEL_YAXIS_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    5a42:	ee 23       	and	r30, r30
    5a44:	3c f4       	brge	.+14     	; 0x5a54 <user_callback_sof_action+0xb6e>
		//ACCEL_YAXIS is an analog input
		gJoy2Buf[input_type_lookup[ACCEL_YAXIS_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = gAccelData[1];
    5a46:	f0 e0       	ldi	r31, 0x00	; 0
    5a48:	e3 58       	subi	r30, 0x83	; 131
    5a4a:	f6 4d       	sbci	r31, 0xD6	; 214
    5a4c:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <gAccelData+0x1>
    5a50:	80 83       	st	Z, r24
	}
	else{
		//ACCEL_YAXIS is a digital input
		if((gAccelData[1] >= gAccelMinTrig[1]) &&(gAccelData[1] <= gAccelMaxTrig[1])){
    5a52:	20 c0       	rjmp	.+64     	; 0x5a94 <user_callback_sof_action+0xbae>
    5a54:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <gAccelData+0x1>
    5a58:	90 91 46 29 	lds	r25, 0x2946	; 0x802946 <gAccelMinTrig+0x1>
    5a5c:	89 17       	cp	r24, r25
    5a5e:	78 f0       	brcs	.+30     	; 0x5a7e <user_callback_sof_action+0xb98>
    5a60:	90 91 43 29 	lds	r25, 0x2943	; 0x802943 <gAccelMaxTrig+0x1>
    5a64:	98 17       	cp	r25, r24
			checkButtonDown(ACCEL_YAXIS_LKUP_INDEX, ACCEL_YAXIS_MASK);
    5a66:	58 f0       	brcs	.+22     	; 0x5a7e <user_callback_sof_action+0xb98>
    5a68:	00 e0       	ldi	r16, 0x00	; 0
    5a6a:	10 e0       	ldi	r17, 0x00	; 0
    5a6c:	20 e0       	ldi	r18, 0x00	; 0
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	40 e0       	ldi	r20, 0x00	; 0
    5a72:	58 e0       	ldi	r21, 0x08	; 8
    5a74:	60 e0       	ldi	r22, 0x00	; 0
    5a76:	70 e0       	ldi	r23, 0x00	; 0
    5a78:	8b e2       	ldi	r24, 0x2B	; 43
    5a7a:	24 d9       	rcall	.-3512   	; 0x4cc4 <checkButtonDown>
    5a7c:	0b c0       	rjmp	.+22     	; 0x5a94 <user_callback_sof_action+0xbae>
		}
		else{
			checkButtonUp(ACCEL_YAXIS_LKUP_INDEX, ACCEL_YAXIS_MASK);
    5a7e:	00 e0       	ldi	r16, 0x00	; 0
    5a80:	10 e0       	ldi	r17, 0x00	; 0
    5a82:	20 e0       	ldi	r18, 0x00	; 0
    5a84:	30 e0       	ldi	r19, 0x00	; 0
    5a86:	40 e0       	ldi	r20, 0x00	; 0
    5a88:	58 e0       	ldi	r21, 0x08	; 8
    5a8a:	60 e0       	ldi	r22, 0x00	; 0
    5a8c:	70 e0       	ldi	r23, 0x00	; 0
    5a8e:	8b e2       	ldi	r24, 0x2B	; 43
    5a90:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
		}
	}
	if((input_type_lookup[ACCEL_ZAXIS_LKUP_INDEX] & IT_JOY1_ANA_OFFSET) == IT_JOY1_ANA_OFFSET){
    5a94:	e0 91 fc 29 	lds	r30, 0x29FC	; 0x8029fc <input_type_lookup+0x2c>
    5a98:	e5 ff       	sbrs	r30, 5
    5a9a:	07 c0       	rjmp	.+14     	; 0x5aaa <user_callback_sof_action+0xbc4>
		//ACCEL_ZAXIS is an analog input
		gJoy1Buf[input_type_lookup[ACCEL_ZAXIS_LKUP_INDEX] - IT_JOY1_ANA_OFFSET] = gAccelData[2];
    5a9c:	f0 e0       	ldi	r31, 0x00	; 0
    5a9e:	e7 51       	subi	r30, 0x17	; 23
    5aa0:	f6 4d       	sbci	r31, 0xD6	; 214
    5aa2:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <gAccelData+0x2>
    5aa6:	80 83       	st	Z, r24
    5aa8:	29 c0       	rjmp	.+82     	; 0x5afc <user_callback_sof_action+0xc16>
	}
	else if((input_type_lookup[ACCEL_ZAXIS_LKUP_INDEX] & IT_JOY2_ANA_OFFSET) == IT_JOY2_ANA_OFFSET){
    5aaa:	ee 23       	and	r30, r30
    5aac:	3c f4       	brge	.+14     	; 0x5abc <user_callback_sof_action+0xbd6>
		//ACCEL_ZAXIS is an analog input
		gJoy2Buf[input_type_lookup[ACCEL_ZAXIS_LKUP_INDEX] - IT_JOY2_ANA_OFFSET] = gAccelData[2];
    5aae:	f0 e0       	ldi	r31, 0x00	; 0
    5ab0:	e3 58       	subi	r30, 0x83	; 131
    5ab2:	f6 4d       	sbci	r31, 0xD6	; 214
    5ab4:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <gAccelData+0x2>
    5ab8:	80 83       	st	Z, r24
    5aba:	20 c0       	rjmp	.+64     	; 0x5afc <user_callback_sof_action+0xc16>
	}
	else{
		//ACCEL_ZAXIS is a digital input
		if((gAccelData[2] >= gAccelMinTrig[2]) &&(gAccelData[2] <= gAccelMaxTrig[2])){
    5abc:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <gAccelData+0x2>
    5ac0:	90 91 47 29 	lds	r25, 0x2947	; 0x802947 <gAccelMinTrig+0x2>
    5ac4:	89 17       	cp	r24, r25
    5ac6:	78 f0       	brcs	.+30     	; 0x5ae6 <user_callback_sof_action+0xc00>
    5ac8:	90 91 44 29 	lds	r25, 0x2944	; 0x802944 <gAccelMaxTrig+0x2>
    5acc:	98 17       	cp	r25, r24
    5ace:	58 f0       	brcs	.+22     	; 0x5ae6 <user_callback_sof_action+0xc00>
			checkButtonDown(ACCEL_ZAXIS_LKUP_INDEX, ACCEL_ZAXIS_MASK);
    5ad0:	00 e0       	ldi	r16, 0x00	; 0
    5ad2:	10 e0       	ldi	r17, 0x00	; 0
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	40 e0       	ldi	r20, 0x00	; 0
    5ada:	50 e1       	ldi	r21, 0x10	; 16
    5adc:	60 e0       	ldi	r22, 0x00	; 0
    5ade:	70 e0       	ldi	r23, 0x00	; 0
    5ae0:	8c e2       	ldi	r24, 0x2C	; 44
    5ae2:	f0 d8       	rcall	.-3616   	; 0x4cc4 <checkButtonDown>
    5ae4:	0b c0       	rjmp	.+22     	; 0x5afc <user_callback_sof_action+0xc16>
    5ae6:	00 e0       	ldi	r16, 0x00	; 0
		}
		else{
			checkButtonUp(ACCEL_ZAXIS_LKUP_INDEX, ACCEL_ZAXIS_MASK);
    5ae8:	10 e0       	ldi	r17, 0x00	; 0
    5aea:	20 e0       	ldi	r18, 0x00	; 0
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	40 e0       	ldi	r20, 0x00	; 0
    5af0:	50 e1       	ldi	r21, 0x10	; 16
    5af2:	60 e0       	ldi	r22, 0x00	; 0
    5af4:	70 e0       	ldi	r23, 0x00	; 0
    5af6:	8c e2       	ldi	r24, 0x2C	; 44
    5af8:	0e 94 b2 23 	call	0x4764	; 0x4764 <checkButtonUp>
    5afc:	89 e0       	ldi	r24, 0x09	; 9
		}
	}
	
	send_joystick_report(gJoy1Buf);
    5afe:	9a e2       	ldi	r25, 0x2A	; 42
    5b00:	0e 94 20 20 	call	0x4040	; 0x4040 <send_joystick_report>
    5b04:	8d ef       	ldi	r24, 0xFD	; 253
	send_joystick2_report(gJoy2Buf);
    5b06:	99 e2       	ldi	r25, 0x29	; 41
    5b08:	0e 94 c1 18 	call	0x3182	; 0x3182 <send_joystick2_report>
    5b0c:	df 91       	pop	r29
	

}
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	08 95       	ret

00005b16 <setLeds>:
    5b16:	87 e8       	ldi	r24, 0x87	; 135
	}	
}


void setLeds(void){
	setLED(JOY1_LEDR, eeprom_read_byte(JOY1_LEDR_ADDR));
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b1e:	68 2f       	mov	r22, r24
    5b20:	82 e0       	ldi	r24, 0x02	; 2
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY1_LEDG, eeprom_read_byte(JOY1_LEDG_ADDR));
    5b28:	88 e8       	ldi	r24, 0x88	; 136
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b30:	68 2f       	mov	r22, r24
    5b32:	82 e0       	ldi	r24, 0x02	; 2
    5b34:	92 e0       	ldi	r25, 0x02	; 2
    5b36:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY1_LEDB, eeprom_read_byte(JOY1_LEDB_ADDR));	
    5b3a:	89 e8       	ldi	r24, 0x89	; 137
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b42:	68 2f       	mov	r22, r24
    5b44:	82 e0       	ldi	r24, 0x02	; 2
    5b46:	94 e0       	ldi	r25, 0x04	; 4
    5b48:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY2_LEDR, eeprom_read_byte(JOY2_LEDR_ADDR));
    5b4c:	8a e8       	ldi	r24, 0x8A	; 138
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b54:	68 2f       	mov	r22, r24
    5b56:	81 e1       	ldi	r24, 0x11	; 17
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY2_LEDG, eeprom_read_byte(JOY2_LEDG_ADDR));
    5b5e:	8b e8       	ldi	r24, 0x8B	; 139
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b66:	68 2f       	mov	r22, r24
    5b68:	81 e1       	ldi	r24, 0x11	; 17
    5b6a:	92 e0       	ldi	r25, 0x02	; 2
    5b6c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY2_LEDB, eeprom_read_byte(JOY2_LEDB_ADDR));	
    5b70:	8c e8       	ldi	r24, 0x8C	; 140
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b78:	68 2f       	mov	r22, r24
    5b7a:	81 e1       	ldi	r24, 0x11	; 17
    5b7c:	94 e0       	ldi	r25, 0x04	; 4
    5b7e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY3_LEDR, eeprom_read_byte(JOY3_LEDR_ADDR));
    5b82:	8d e8       	ldi	r24, 0x8D	; 141
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b8a:	68 2f       	mov	r22, r24
    5b8c:	88 e0       	ldi	r24, 0x08	; 8
    5b8e:	91 e0       	ldi	r25, 0x01	; 1
    5b90:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY3_LEDG, eeprom_read_byte(JOY3_LEDG_ADDR));
    5b94:	8e e8       	ldi	r24, 0x8E	; 142
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5b9c:	68 2f       	mov	r22, r24
    5b9e:	88 e0       	ldi	r24, 0x08	; 8
    5ba0:	97 e0       	ldi	r25, 0x07	; 7
    5ba2:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY3_LEDB, eeprom_read_byte(JOY3_LEDB_ADDR));	
    5ba6:	8f e8       	ldi	r24, 0x8F	; 143
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5bae:	68 2f       	mov	r22, r24
    5bb0:	88 e0       	ldi	r24, 0x08	; 8
    5bb2:	95 e0       	ldi	r25, 0x05	; 5
    5bb4:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY4_LEDR, eeprom_read_byte(JOY4_LEDR_ADDR));
    5bb8:	80 e9       	ldi	r24, 0x90	; 144
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5bc0:	68 2f       	mov	r22, r24
    5bc2:	8b e0       	ldi	r24, 0x0B	; 11
    5bc4:	91 e0       	ldi	r25, 0x01	; 1
    5bc6:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY4_LEDG, eeprom_read_byte(JOY4_LEDG_ADDR));
    5bca:	81 e9       	ldi	r24, 0x91	; 145
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5bd2:	68 2f       	mov	r22, r24
    5bd4:	8b e0       	ldi	r24, 0x0B	; 11
    5bd6:	97 e0       	ldi	r25, 0x07	; 7
    5bd8:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(JOY4_LEDB, eeprom_read_byte(JOY4_LEDB_ADDR));
    5bdc:	82 e9       	ldi	r24, 0x92	; 146
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5be4:	68 2f       	mov	r22, r24
    5be6:	8b e0       	ldi	r24, 0x0B	; 11
    5be8:	95 e0       	ldi	r25, 0x05	; 5
    5bea:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>

	setLED(BUTT1_LEDR, eeprom_read_byte(BUTT1_LEDR_ADDR));
    5bee:	83 e9       	ldi	r24, 0x93	; 147
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5bf6:	68 2f       	mov	r22, r24
    5bf8:	83 e0       	ldi	r24, 0x03	; 3
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT1_LEDG, eeprom_read_byte(BUTT1_LEDG_ADDR));
    5c00:	84 e9       	ldi	r24, 0x94	; 148
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c08:	68 2f       	mov	r22, r24
    5c0a:	83 e0       	ldi	r24, 0x03	; 3
    5c0c:	92 e0       	ldi	r25, 0x02	; 2
    5c0e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT1_LEDB, eeprom_read_byte(BUTT1_LEDB_ADDR));
    5c12:	85 e9       	ldi	r24, 0x95	; 149
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c1a:	68 2f       	mov	r22, r24
    5c1c:	83 e0       	ldi	r24, 0x03	; 3
    5c1e:	94 e0       	ldi	r25, 0x04	; 4
    5c20:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT2_LEDR, eeprom_read_byte(BUTT2_LEDR_ADDR));
    5c24:	86 e9       	ldi	r24, 0x96	; 150
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c2c:	68 2f       	mov	r22, r24
    5c2e:	84 e0       	ldi	r24, 0x04	; 4
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT2_LEDG, eeprom_read_byte(BUTT2_LEDG_ADDR));
    5c36:	87 e9       	ldi	r24, 0x97	; 151
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c3e:	68 2f       	mov	r22, r24
    5c40:	84 e0       	ldi	r24, 0x04	; 4
    5c42:	92 e0       	ldi	r25, 0x02	; 2
    5c44:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT2_LEDB, eeprom_read_byte(BUTT2_LEDB_ADDR));
    5c48:	88 e9       	ldi	r24, 0x98	; 152
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c50:	68 2f       	mov	r22, r24
    5c52:	84 e0       	ldi	r24, 0x04	; 4
    5c54:	94 e0       	ldi	r25, 0x04	; 4
    5c56:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT3_LEDR, eeprom_read_byte(BUTT3_LEDR_ADDR));
    5c5a:	89 e9       	ldi	r24, 0x99	; 153
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c62:	68 2f       	mov	r22, r24
    5c64:	85 e0       	ldi	r24, 0x05	; 5
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT3_LEDG, eeprom_read_byte(BUTT3_LEDG_ADDR));
    5c6c:	8a e9       	ldi	r24, 0x9A	; 154
    5c6e:	90 e0       	ldi	r25, 0x00	; 0
    5c70:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c74:	68 2f       	mov	r22, r24
    5c76:	85 e0       	ldi	r24, 0x05	; 5
    5c78:	92 e0       	ldi	r25, 0x02	; 2
    5c7a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT3_LEDB, eeprom_read_byte(BUTT3_LEDB_ADDR));
    5c7e:	8b e9       	ldi	r24, 0x9B	; 155
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c86:	68 2f       	mov	r22, r24
    5c88:	85 e0       	ldi	r24, 0x05	; 5
    5c8a:	94 e0       	ldi	r25, 0x04	; 4
    5c8c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT4_LEDR, eeprom_read_byte(BUTT4_LEDR_ADDR));
    5c90:	8c e9       	ldi	r24, 0x9C	; 156
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5c98:	68 2f       	mov	r22, r24
    5c9a:	86 e0       	ldi	r24, 0x06	; 6
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT4_LEDG, eeprom_read_byte(BUTT4_LEDG_ADDR));
    5ca2:	8d e9       	ldi	r24, 0x9D	; 157
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5caa:	68 2f       	mov	r22, r24
    5cac:	86 e0       	ldi	r24, 0x06	; 6
    5cae:	92 e0       	ldi	r25, 0x02	; 2
    5cb0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT4_LEDB, eeprom_read_byte(BUTT4_LEDB_ADDR));
    5cb4:	8e e9       	ldi	r24, 0x9E	; 158
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5cbc:	68 2f       	mov	r22, r24
    5cbe:	86 e0       	ldi	r24, 0x06	; 6
    5cc0:	94 e0       	ldi	r25, 0x04	; 4
    5cc2:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT5_LEDR, eeprom_read_byte(BUTT5_LEDR_ADDR));
    5cc6:	8f e9       	ldi	r24, 0x9F	; 159
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5cce:	68 2f       	mov	r22, r24
    5cd0:	87 e0       	ldi	r24, 0x07	; 7
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT5_LEDG, eeprom_read_byte(BUTT5_LEDG_ADDR));
    5cd8:	80 ea       	ldi	r24, 0xA0	; 160
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5ce0:	68 2f       	mov	r22, r24
    5ce2:	87 e0       	ldi	r24, 0x07	; 7
    5ce4:	92 e0       	ldi	r25, 0x02	; 2
    5ce6:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT5_LEDB, eeprom_read_byte(BUTT5_LEDB_ADDR));
    5cea:	81 ea       	ldi	r24, 0xA1	; 161
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5cf2:	68 2f       	mov	r22, r24
    5cf4:	87 e0       	ldi	r24, 0x07	; 7
    5cf6:	94 e0       	ldi	r25, 0x04	; 4
    5cf8:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT6_LEDR, eeprom_read_byte(BUTT6_LEDR_ADDR));
    5cfc:	82 ea       	ldi	r24, 0xA2	; 162
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d04:	68 2f       	mov	r22, r24
    5d06:	88 e0       	ldi	r24, 0x08	; 8
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT6_LEDG, eeprom_read_byte(BUTT6_LEDG_ADDR));
    5d0e:	83 ea       	ldi	r24, 0xA3	; 163
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d16:	68 2f       	mov	r22, r24
    5d18:	88 e0       	ldi	r24, 0x08	; 8
    5d1a:	92 e0       	ldi	r25, 0x02	; 2
    5d1c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT6_LEDB, eeprom_read_byte(BUTT6_LEDB_ADDR));
    5d20:	84 ea       	ldi	r24, 0xA4	; 164
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d28:	68 2f       	mov	r22, r24
    5d2a:	88 e0       	ldi	r24, 0x08	; 8
    5d2c:	94 e0       	ldi	r25, 0x04	; 4
    5d2e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT7_LEDR, eeprom_read_byte(BUTT7_LEDR_ADDR));
    5d32:	85 ea       	ldi	r24, 0xA5	; 165
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d3a:	68 2f       	mov	r22, r24
    5d3c:	89 e0       	ldi	r24, 0x09	; 9
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT7_LEDG, eeprom_read_byte(BUTT7_LEDG_ADDR));
    5d44:	86 ea       	ldi	r24, 0xA6	; 166
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d4c:	68 2f       	mov	r22, r24
    5d4e:	89 e0       	ldi	r24, 0x09	; 9
    5d50:	92 e0       	ldi	r25, 0x02	; 2
    5d52:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT7_LEDB, eeprom_read_byte(BUTT7_LEDB_ADDR));
    5d56:	87 ea       	ldi	r24, 0xA7	; 167
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d5e:	68 2f       	mov	r22, r24
    5d60:	89 e0       	ldi	r24, 0x09	; 9
    5d62:	94 e0       	ldi	r25, 0x04	; 4
    5d64:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT8_LEDR, eeprom_read_byte(BUTT8_LEDR_ADDR));
    5d68:	88 ea       	ldi	r24, 0xA8	; 168
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d70:	68 2f       	mov	r22, r24
    5d72:	82 e0       	ldi	r24, 0x02	; 2
    5d74:	91 e0       	ldi	r25, 0x01	; 1
    5d76:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT8_LEDG, eeprom_read_byte(BUTT8_LEDG_ADDR));
    5d7a:	89 ea       	ldi	r24, 0xA9	; 169
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d82:	68 2f       	mov	r22, r24
    5d84:	82 e0       	ldi	r24, 0x02	; 2
    5d86:	97 e0       	ldi	r25, 0x07	; 7
    5d88:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT8_LEDB, eeprom_read_byte(BUTT8_LEDB_ADDR));
    5d8c:	8a ea       	ldi	r24, 0xAA	; 170
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5d94:	68 2f       	mov	r22, r24
    5d96:	82 e0       	ldi	r24, 0x02	; 2
    5d98:	95 e0       	ldi	r25, 0x05	; 5
    5d9a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT9_LEDR, eeprom_read_byte(BUTT9_LEDR_ADDR));
    5d9e:	8b ea       	ldi	r24, 0xAB	; 171
    5da0:	90 e0       	ldi	r25, 0x00	; 0
    5da2:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5da6:	68 2f       	mov	r22, r24
    5da8:	83 e0       	ldi	r24, 0x03	; 3
    5daa:	91 e0       	ldi	r25, 0x01	; 1
    5dac:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT9_LEDG, eeprom_read_byte(BUTT9_LEDG_ADDR));
    5db0:	8c ea       	ldi	r24, 0xAC	; 172
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5db8:	68 2f       	mov	r22, r24
    5dba:	83 e0       	ldi	r24, 0x03	; 3
    5dbc:	97 e0       	ldi	r25, 0x07	; 7
    5dbe:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT9_LEDB, eeprom_read_byte(BUTT9_LEDB_ADDR));
    5dc2:	8d ea       	ldi	r24, 0xAD	; 173
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5dca:	68 2f       	mov	r22, r24
    5dcc:	83 e0       	ldi	r24, 0x03	; 3
    5dce:	95 e0       	ldi	r25, 0x05	; 5
    5dd0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT10_LEDR, eeprom_read_byte(BUTT10_LEDR_ADDR));
    5dd4:	8e ea       	ldi	r24, 0xAE	; 174
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5ddc:	68 2f       	mov	r22, r24
    5dde:	84 e0       	ldi	r24, 0x04	; 4
    5de0:	91 e0       	ldi	r25, 0x01	; 1
    5de2:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT10_LEDG, eeprom_read_byte(BUTT10_LEDG_ADDR));
    5de6:	8f ea       	ldi	r24, 0xAF	; 175
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5dee:	68 2f       	mov	r22, r24
    5df0:	84 e0       	ldi	r24, 0x04	; 4
    5df2:	97 e0       	ldi	r25, 0x07	; 7
    5df4:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT10_LEDB, eeprom_read_byte(BUTT10_LEDB_ADDR));
    5df8:	80 eb       	ldi	r24, 0xB0	; 176
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e00:	68 2f       	mov	r22, r24
    5e02:	84 e0       	ldi	r24, 0x04	; 4
    5e04:	95 e0       	ldi	r25, 0x05	; 5
    5e06:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT11_LEDR, eeprom_read_byte(BUTT11_LEDR_ADDR));
    5e0a:	81 eb       	ldi	r24, 0xB1	; 177
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e12:	68 2f       	mov	r22, r24
    5e14:	85 e0       	ldi	r24, 0x05	; 5
    5e16:	91 e0       	ldi	r25, 0x01	; 1
    5e18:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT11_LEDG, eeprom_read_byte(BUTT11_LEDG_ADDR));
    5e1c:	82 eb       	ldi	r24, 0xB2	; 178
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e24:	68 2f       	mov	r22, r24
    5e26:	85 e0       	ldi	r24, 0x05	; 5
    5e28:	97 e0       	ldi	r25, 0x07	; 7
    5e2a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT11_LEDB, eeprom_read_byte(BUTT11_LEDB_ADDR));
    5e2e:	83 eb       	ldi	r24, 0xB3	; 179
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e36:	68 2f       	mov	r22, r24
    5e38:	85 e0       	ldi	r24, 0x05	; 5
    5e3a:	95 e0       	ldi	r25, 0x05	; 5
    5e3c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT12_LEDR, eeprom_read_byte(BUTT12_LEDR_ADDR));
    5e40:	84 eb       	ldi	r24, 0xB4	; 180
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e48:	68 2f       	mov	r22, r24
    5e4a:	86 e0       	ldi	r24, 0x06	; 6
    5e4c:	91 e0       	ldi	r25, 0x01	; 1
    5e4e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT12_LEDG, eeprom_read_byte(BUTT12_LEDG_ADDR));
    5e52:	85 eb       	ldi	r24, 0xB5	; 181
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e5a:	68 2f       	mov	r22, r24
    5e5c:	86 e0       	ldi	r24, 0x06	; 6
    5e5e:	97 e0       	ldi	r25, 0x07	; 7
    5e60:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT12_LEDB, eeprom_read_byte(BUTT12_LEDB_ADDR));
    5e64:	86 eb       	ldi	r24, 0xB6	; 182
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e6c:	68 2f       	mov	r22, r24
    5e6e:	86 e0       	ldi	r24, 0x06	; 6
    5e70:	95 e0       	ldi	r25, 0x05	; 5
    5e72:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT13_LEDR, eeprom_read_byte(BUTT13_LEDR_ADDR));
    5e76:	87 eb       	ldi	r24, 0xB7	; 183
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e7e:	68 2f       	mov	r22, r24
    5e80:	87 e0       	ldi	r24, 0x07	; 7
    5e82:	91 e0       	ldi	r25, 0x01	; 1
    5e84:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT13_LEDG, eeprom_read_byte(BUTT13_LEDG_ADDR));
    5e88:	88 eb       	ldi	r24, 0xB8	; 184
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5e90:	68 2f       	mov	r22, r24
    5e92:	87 e0       	ldi	r24, 0x07	; 7
    5e94:	97 e0       	ldi	r25, 0x07	; 7
    5e96:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT13_LEDB, eeprom_read_byte(BUTT13_LEDB_ADDR));
    5e9a:	89 eb       	ldi	r24, 0xB9	; 185
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5ea2:	68 2f       	mov	r22, r24
    5ea4:	87 e0       	ldi	r24, 0x07	; 7
    5ea6:	95 e0       	ldi	r25, 0x05	; 5
    5ea8:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT14_LEDR, eeprom_read_byte(BUTT14_LEDR_ADDR));
    5eac:	8a eb       	ldi	r24, 0xBA	; 186
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5eb4:	68 2f       	mov	r22, r24
    5eb6:	80 e1       	ldi	r24, 0x10	; 16
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT14_LEDG, eeprom_read_byte(BUTT14_LEDG_ADDR));
    5ebe:	8b eb       	ldi	r24, 0xBB	; 187
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5ec6:	68 2f       	mov	r22, r24
    5ec8:	80 e1       	ldi	r24, 0x10	; 16
    5eca:	92 e0       	ldi	r25, 0x02	; 2
    5ecc:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT14_LEDB, eeprom_read_byte(BUTT14_LEDB_ADDR));
    5ed0:	8c eb       	ldi	r24, 0xBC	; 188
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5ed8:	68 2f       	mov	r22, r24
    5eda:	80 e1       	ldi	r24, 0x10	; 16
    5edc:	94 e0       	ldi	r25, 0x04	; 4
    5ede:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT15_LEDR, eeprom_read_byte(BUTT15_LEDR_ADDR));
    5ee2:	8d eb       	ldi	r24, 0xBD	; 189
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5eea:	68 2f       	mov	r22, r24
    5eec:	8f e0       	ldi	r24, 0x0F	; 15
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT15_LEDG, eeprom_read_byte(BUTT15_LEDG_ADDR));
    5ef4:	8e eb       	ldi	r24, 0xBE	; 190
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5efc:	68 2f       	mov	r22, r24
    5efe:	8f e0       	ldi	r24, 0x0F	; 15
    5f00:	92 e0       	ldi	r25, 0x02	; 2
    5f02:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT15_LEDB, eeprom_read_byte(BUTT15_LEDB_ADDR));
    5f06:	8f eb       	ldi	r24, 0xBF	; 191
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f0e:	68 2f       	mov	r22, r24
    5f10:	8f e0       	ldi	r24, 0x0F	; 15
    5f12:	94 e0       	ldi	r25, 0x04	; 4
    5f14:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT16_LEDR, eeprom_read_byte(BUTT16_LEDR_ADDR));
    5f18:	80 ec       	ldi	r24, 0xC0	; 192
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f20:	68 2f       	mov	r22, r24
    5f22:	8e e0       	ldi	r24, 0x0E	; 14
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT16_LEDG, eeprom_read_byte(BUTT16_LEDG_ADDR));
    5f2a:	81 ec       	ldi	r24, 0xC1	; 193
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f32:	68 2f       	mov	r22, r24
    5f34:	8e e0       	ldi	r24, 0x0E	; 14
    5f36:	92 e0       	ldi	r25, 0x02	; 2
    5f38:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT16_LEDB, eeprom_read_byte(BUTT16_LEDB_ADDR));
    5f3c:	82 ec       	ldi	r24, 0xC2	; 194
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f44:	68 2f       	mov	r22, r24
    5f46:	8e e0       	ldi	r24, 0x0E	; 14
    5f48:	94 e0       	ldi	r25, 0x04	; 4
    5f4a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT17_LEDR, eeprom_read_byte(BUTT17_LEDR_ADDR));
    5f4e:	83 ec       	ldi	r24, 0xC3	; 195
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f56:	68 2f       	mov	r22, r24
    5f58:	8d e0       	ldi	r24, 0x0D	; 13
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT17_LEDG, eeprom_read_byte(BUTT17_LEDG_ADDR));
    5f60:	84 ec       	ldi	r24, 0xC4	; 196
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f68:	68 2f       	mov	r22, r24
    5f6a:	8d e0       	ldi	r24, 0x0D	; 13
    5f6c:	92 e0       	ldi	r25, 0x02	; 2
    5f6e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT17_LEDB, eeprom_read_byte(BUTT17_LEDB_ADDR));
    5f72:	85 ec       	ldi	r24, 0xC5	; 197
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f7a:	68 2f       	mov	r22, r24
    5f7c:	8d e0       	ldi	r24, 0x0D	; 13
    5f7e:	94 e0       	ldi	r25, 0x04	; 4
    5f80:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT18_LEDR, eeprom_read_byte(BUTT18_LEDR_ADDR));
    5f84:	86 ec       	ldi	r24, 0xC6	; 198
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f8c:	68 2f       	mov	r22, r24
    5f8e:	8c e0       	ldi	r24, 0x0C	; 12
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT18_LEDG, eeprom_read_byte(BUTT18_LEDG_ADDR));
    5f96:	87 ec       	ldi	r24, 0xC7	; 199
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5f9e:	68 2f       	mov	r22, r24
    5fa0:	8c e0       	ldi	r24, 0x0C	; 12
    5fa2:	92 e0       	ldi	r25, 0x02	; 2
    5fa4:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT18_LEDB, eeprom_read_byte(BUTT18_LEDB_ADDR));
    5fa8:	88 ec       	ldi	r24, 0xC8	; 200
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5fb0:	68 2f       	mov	r22, r24
    5fb2:	8c e0       	ldi	r24, 0x0C	; 12
    5fb4:	94 e0       	ldi	r25, 0x04	; 4
    5fb6:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT19_LEDR, eeprom_read_byte(BUTT19_LEDR_ADDR));
    5fba:	89 ec       	ldi	r24, 0xC9	; 201
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5fc2:	68 2f       	mov	r22, r24
    5fc4:	8b e0       	ldi	r24, 0x0B	; 11
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT19_LEDG, eeprom_read_byte(BUTT19_LEDG_ADDR));
    5fcc:	8a ec       	ldi	r24, 0xCA	; 202
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5fd4:	68 2f       	mov	r22, r24
    5fd6:	8b e0       	ldi	r24, 0x0B	; 11
    5fd8:	92 e0       	ldi	r25, 0x02	; 2
    5fda:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT19_LEDB, eeprom_read_byte(BUTT19_LEDB_ADDR));
    5fde:	8b ec       	ldi	r24, 0xCB	; 203
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5fe6:	68 2f       	mov	r22, r24
    5fe8:	8b e0       	ldi	r24, 0x0B	; 11
    5fea:	94 e0       	ldi	r25, 0x04	; 4
    5fec:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT20_LEDR, eeprom_read_byte(BUTT20_LEDR_ADDR));
    5ff0:	8c ec       	ldi	r24, 0xCC	; 204
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    5ff8:	68 2f       	mov	r22, r24
    5ffa:	8a e0       	ldi	r24, 0x0A	; 10
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT20_LEDG, eeprom_read_byte(BUTT20_LEDG_ADDR));
    6002:	8d ec       	ldi	r24, 0xCD	; 205
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    600a:	68 2f       	mov	r22, r24
    600c:	8a e0       	ldi	r24, 0x0A	; 10
    600e:	92 e0       	ldi	r25, 0x02	; 2
    6010:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT20_LEDB, eeprom_read_byte(BUTT20_LEDB_ADDR));
    6014:	8e ec       	ldi	r24, 0xCE	; 206
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    601c:	68 2f       	mov	r22, r24
    601e:	8a e0       	ldi	r24, 0x0A	; 10
    6020:	94 e0       	ldi	r25, 0x04	; 4
    6022:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT21_LEDR, eeprom_read_byte(BUTT21_LEDR_ADDR));
    6026:	8f ec       	ldi	r24, 0xCF	; 207
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    602e:	68 2f       	mov	r22, r24
    6030:	81 e1       	ldi	r24, 0x11	; 17
    6032:	91 e0       	ldi	r25, 0x01	; 1
    6034:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT21_LEDG, eeprom_read_byte(BUTT21_LEDG_ADDR));
    6038:	80 ed       	ldi	r24, 0xD0	; 208
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6040:	68 2f       	mov	r22, r24
    6042:	81 e1       	ldi	r24, 0x11	; 17
    6044:	97 e0       	ldi	r25, 0x07	; 7
    6046:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT21_LEDB, eeprom_read_byte(BUTT21_LEDB_ADDR));
    604a:	81 ed       	ldi	r24, 0xD1	; 209
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6052:	68 2f       	mov	r22, r24
    6054:	81 e1       	ldi	r24, 0x11	; 17
    6056:	95 e0       	ldi	r25, 0x05	; 5
    6058:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT22_LEDR, eeprom_read_byte(BUTT22_LEDR_ADDR));
    605c:	82 ed       	ldi	r24, 0xD2	; 210
    605e:	90 e0       	ldi	r25, 0x00	; 0
    6060:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6064:	68 2f       	mov	r22, r24
    6066:	80 e1       	ldi	r24, 0x10	; 16
    6068:	91 e0       	ldi	r25, 0x01	; 1
    606a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT22_LEDG, eeprom_read_byte(BUTT22_LEDG_ADDR));
    606e:	83 ed       	ldi	r24, 0xD3	; 211
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6076:	68 2f       	mov	r22, r24
    6078:	80 e1       	ldi	r24, 0x10	; 16
    607a:	97 e0       	ldi	r25, 0x07	; 7
    607c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT22_LEDB, eeprom_read_byte(BUTT22_LEDB_ADDR));
    6080:	84 ed       	ldi	r24, 0xD4	; 212
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6088:	68 2f       	mov	r22, r24
    608a:	80 e1       	ldi	r24, 0x10	; 16
    608c:	95 e0       	ldi	r25, 0x05	; 5
    608e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT23_LEDR, eeprom_read_byte(BUTT23_LEDR_ADDR));
    6092:	85 ed       	ldi	r24, 0xD5	; 213
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    609a:	68 2f       	mov	r22, r24
    609c:	8f e0       	ldi	r24, 0x0F	; 15
    609e:	91 e0       	ldi	r25, 0x01	; 1
    60a0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT23_LEDG, eeprom_read_byte(BUTT23_LEDG_ADDR));
    60a4:	86 ed       	ldi	r24, 0xD6	; 214
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    60ac:	68 2f       	mov	r22, r24
    60ae:	8f e0       	ldi	r24, 0x0F	; 15
    60b0:	97 e0       	ldi	r25, 0x07	; 7
    60b2:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT23_LEDB, eeprom_read_byte(BUTT23_LEDB_ADDR));
    60b6:	87 ed       	ldi	r24, 0xD7	; 215
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    60be:	68 2f       	mov	r22, r24
    60c0:	8f e0       	ldi	r24, 0x0F	; 15
    60c2:	95 e0       	ldi	r25, 0x05	; 5
    60c4:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT24_LEDR, eeprom_read_byte(BUTT24_LEDR_ADDR));
    60c8:	88 ed       	ldi	r24, 0xD8	; 216
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    60d0:	68 2f       	mov	r22, r24
    60d2:	8e e0       	ldi	r24, 0x0E	; 14
    60d4:	91 e0       	ldi	r25, 0x01	; 1
    60d6:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT24_LEDG, eeprom_read_byte(BUTT24_LEDG_ADDR));
    60da:	89 ed       	ldi	r24, 0xD9	; 217
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    60e2:	68 2f       	mov	r22, r24
    60e4:	8e e0       	ldi	r24, 0x0E	; 14
    60e6:	97 e0       	ldi	r25, 0x07	; 7
    60e8:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT24_LEDB, eeprom_read_byte(BUTT24_LEDB_ADDR));
    60ec:	8a ed       	ldi	r24, 0xDA	; 218
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    60f4:	68 2f       	mov	r22, r24
    60f6:	8e e0       	ldi	r24, 0x0E	; 14
    60f8:	95 e0       	ldi	r25, 0x05	; 5
    60fa:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT25_LEDR, eeprom_read_byte(BUTT25_LEDR_ADDR));
    60fe:	8b ed       	ldi	r24, 0xDB	; 219
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6106:	68 2f       	mov	r22, r24
    6108:	8d e0       	ldi	r24, 0x0D	; 13
    610a:	91 e0       	ldi	r25, 0x01	; 1
    610c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT25_LEDG, eeprom_read_byte(BUTT25_LEDG_ADDR));
    6110:	8c ed       	ldi	r24, 0xDC	; 220
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6118:	68 2f       	mov	r22, r24
    611a:	8d e0       	ldi	r24, 0x0D	; 13
    611c:	97 e0       	ldi	r25, 0x07	; 7
    611e:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT25_LEDB, eeprom_read_byte(BUTT25_LEDB_ADDR));
    6122:	8d ed       	ldi	r24, 0xDD	; 221
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    612a:	68 2f       	mov	r22, r24
    612c:	8d e0       	ldi	r24, 0x0D	; 13
    612e:	95 e0       	ldi	r25, 0x05	; 5
    6130:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(BUTT26_LEDR, eeprom_read_byte(BUTT26_LEDR_ADDR));
    6134:	8e ed       	ldi	r24, 0xDE	; 222
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    613c:	68 2f       	mov	r22, r24
    613e:	8c e0       	ldi	r24, 0x0C	; 12
    6140:	91 e0       	ldi	r25, 0x01	; 1
    6142:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT26_LEDG, eeprom_read_byte(BUTT26_LEDG_ADDR));
    6146:	8f ed       	ldi	r24, 0xDF	; 223
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    614e:	68 2f       	mov	r22, r24
    6150:	8c e0       	ldi	r24, 0x0C	; 12
    6152:	97 e0       	ldi	r25, 0x07	; 7
    6154:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(BUTT26_LEDB, eeprom_read_byte(BUTT26_LEDB_ADDR));
    6158:	80 ee       	ldi	r24, 0xE0	; 224
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6160:	68 2f       	mov	r22, r24
    6162:	8c e0       	ldi	r24, 0x0C	; 12
    6164:	95 e0       	ldi	r25, 0x05	; 5
    6166:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(HP1_LEDR, eeprom_read_byte(HP1_LEDR_ADDR));
    616a:	81 ee       	ldi	r24, 0xE1	; 225
    616c:	90 e0       	ldi	r25, 0x00	; 0
    616e:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6172:	68 2f       	mov	r22, r24
    6174:	89 e0       	ldi	r24, 0x09	; 9
    6176:	91 e0       	ldi	r25, 0x01	; 1
    6178:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(HP1_LEDG, eeprom_read_byte(HP1_LEDG_ADDR));
    617c:	82 ee       	ldi	r24, 0xE2	; 226
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6184:	68 2f       	mov	r22, r24
    6186:	89 e0       	ldi	r24, 0x09	; 9
    6188:	97 e0       	ldi	r25, 0x07	; 7
    618a:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(HP1_LEDB, eeprom_read_byte(HP1_LEDB_ADDR));
    618e:	83 ee       	ldi	r24, 0xE3	; 227
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    6196:	68 2f       	mov	r22, r24
    6198:	89 e0       	ldi	r24, 0x09	; 9
    619a:	95 e0       	ldi	r25, 0x05	; 5
    619c:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	
	setLED(HP2_LEDR, eeprom_read_byte(HP2_LEDR_ADDR));
    61a0:	84 ee       	ldi	r24, 0xE4	; 228
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    61a8:	68 2f       	mov	r22, r24
    61aa:	8a e0       	ldi	r24, 0x0A	; 10
    61ac:	91 e0       	ldi	r25, 0x01	; 1
    61ae:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(HP2_LEDG, eeprom_read_byte(HP2_LEDG_ADDR));
    61b2:	85 ee       	ldi	r24, 0xE5	; 229
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    61ba:	68 2f       	mov	r22, r24
    61bc:	8a e0       	ldi	r24, 0x0A	; 10
    61be:	97 e0       	ldi	r25, 0x07	; 7
    61c0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
	setLED(HP2_LEDB, eeprom_read_byte(HP2_LEDB_ADDR));
    61c4:	86 ee       	ldi	r24, 0xE6	; 230
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	0e 94 43 44 	call	0x8886	; 0x8886 <eeprom_read_byte>
    61cc:	68 2f       	mov	r22, r24
    61ce:	8a e0       	ldi	r24, 0x0A	; 10
    61d0:	95 e0       	ldi	r25, 0x05	; 5
    61d2:	0c 94 1d 22 	jmp	0x443a	; 0x443a <setLED>
    61d6:	08 95       	ret

000061d8 <setLedDefaults>:
}

void setLedDefaults(void){


	eeprom_write_byte(JOY1_LEDR_ADDR, JOY1_LEDR_DEFAULT);
    61d8:	6e ef       	ldi	r22, 0xFE	; 254
    61da:	87 e8       	ldi	r24, 0x87	; 135
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY1_LEDG_ADDR, JOY1_LEDG_DEFAULT);
    61e2:	60 e0       	ldi	r22, 0x00	; 0
    61e4:	88 e8       	ldi	r24, 0x88	; 136
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY1_LEDB_ADDR, JOY1_LEDB_DEFAULT);	
    61ec:	60 e0       	ldi	r22, 0x00	; 0
    61ee:	89 e8       	ldi	r24, 0x89	; 137
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY2_LEDR_ADDR, JOY2_LEDR_DEFAULT);
    61f6:	60 e0       	ldi	r22, 0x00	; 0
    61f8:	8a e8       	ldi	r24, 0x8A	; 138
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY2_LEDG_ADDR, JOY2_LEDG_DEFAULT);
    6200:	6e ef       	ldi	r22, 0xFE	; 254
    6202:	8b e8       	ldi	r24, 0x8B	; 139
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY2_LEDB_ADDR, JOY2_LEDB_DEFAULT);	
    620a:	60 e0       	ldi	r22, 0x00	; 0
    620c:	8c e8       	ldi	r24, 0x8C	; 140
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY3_LEDR_ADDR, JOY3_LEDR_DEFAULT);
    6214:	60 e0       	ldi	r22, 0x00	; 0
    6216:	8d e8       	ldi	r24, 0x8D	; 141
    6218:	90 e0       	ldi	r25, 0x00	; 0
    621a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY3_LEDG_ADDR, JOY3_LEDG_DEFAULT);
    621e:	60 e0       	ldi	r22, 0x00	; 0
    6220:	8e e8       	ldi	r24, 0x8E	; 142
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY3_LEDB_ADDR, JOY3_LEDB_DEFAULT);	
    6228:	6e ef       	ldi	r22, 0xFE	; 254
    622a:	8f e8       	ldi	r24, 0x8F	; 143
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY4_LEDR_ADDR, JOY4_LEDR_DEFAULT);
    6232:	6e ef       	ldi	r22, 0xFE	; 254
    6234:	80 e9       	ldi	r24, 0x90	; 144
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY4_LEDG_ADDR, JOY4_LEDG_DEFAULT);
    623c:	6e ef       	ldi	r22, 0xFE	; 254
    623e:	81 e9       	ldi	r24, 0x91	; 145
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(JOY4_LEDB_ADDR, JOY4_LEDB_DEFAULT);	
    6246:	6e ef       	ldi	r22, 0xFE	; 254
    6248:	82 e9       	ldi	r24, 0x92	; 146
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT1_LEDR_ADDR, BUTT1_LEDR_DEFAULT);
    6250:	6e ef       	ldi	r22, 0xFE	; 254
    6252:	83 e9       	ldi	r24, 0x93	; 147
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT1_LEDG_ADDR, BUTT1_LEDG_DEFAULT);
    625a:	60 e0       	ldi	r22, 0x00	; 0
    625c:	84 e9       	ldi	r24, 0x94	; 148
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT1_LEDB_ADDR, BUTT1_LEDB_DEFAULT);	
    6264:	60 e0       	ldi	r22, 0x00	; 0
    6266:	85 e9       	ldi	r24, 0x95	; 149
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT2_LEDR_ADDR, BUTT2_LEDR_DEFAULT);
    626e:	60 e0       	ldi	r22, 0x00	; 0
    6270:	86 e9       	ldi	r24, 0x96	; 150
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT2_LEDG_ADDR, BUTT2_LEDG_DEFAULT);
    6278:	6e ef       	ldi	r22, 0xFE	; 254
    627a:	87 e9       	ldi	r24, 0x97	; 151
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT2_LEDB_ADDR, BUTT2_LEDB_DEFAULT);	
    6282:	60 e0       	ldi	r22, 0x00	; 0
    6284:	88 e9       	ldi	r24, 0x98	; 152
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT3_LEDR_ADDR, BUTT3_LEDR_DEFAULT);
    628c:	60 e0       	ldi	r22, 0x00	; 0
    628e:	89 e9       	ldi	r24, 0x99	; 153
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT3_LEDG_ADDR, BUTT3_LEDG_DEFAULT);
    6296:	60 e0       	ldi	r22, 0x00	; 0
    6298:	8a e9       	ldi	r24, 0x9A	; 154
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT3_LEDB_ADDR, BUTT3_LEDB_DEFAULT);	
    62a0:	6e ef       	ldi	r22, 0xFE	; 254
    62a2:	8b e9       	ldi	r24, 0x9B	; 155
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT4_LEDR_ADDR, BUTT4_LEDR_DEFAULT);
    62aa:	6e ef       	ldi	r22, 0xFE	; 254
    62ac:	8c e9       	ldi	r24, 0x9C	; 156
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT4_LEDG_ADDR, BUTT4_LEDG_DEFAULT);
    62b4:	6e ef       	ldi	r22, 0xFE	; 254
    62b6:	8d e9       	ldi	r24, 0x9D	; 157
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT4_LEDB_ADDR, BUTT4_LEDB_DEFAULT);	
    62be:	6e ef       	ldi	r22, 0xFE	; 254
    62c0:	8e e9       	ldi	r24, 0x9E	; 158
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT5_LEDR_ADDR, BUTT5_LEDR_DEFAULT);
    62c8:	6e ef       	ldi	r22, 0xFE	; 254
    62ca:	8f e9       	ldi	r24, 0x9F	; 159
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT5_LEDG_ADDR, BUTT5_LEDG_DEFAULT);
    62d2:	60 e0       	ldi	r22, 0x00	; 0
    62d4:	80 ea       	ldi	r24, 0xA0	; 160
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT5_LEDB_ADDR, BUTT5_LEDB_DEFAULT);	
    62dc:	60 e0       	ldi	r22, 0x00	; 0
    62de:	81 ea       	ldi	r24, 0xA1	; 161
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT6_LEDR_ADDR, BUTT6_LEDR_DEFAULT);
    62e6:	60 e0       	ldi	r22, 0x00	; 0
    62e8:	82 ea       	ldi	r24, 0xA2	; 162
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT6_LEDG_ADDR, BUTT6_LEDG_DEFAULT);
    62f0:	6e ef       	ldi	r22, 0xFE	; 254
    62f2:	83 ea       	ldi	r24, 0xA3	; 163
    62f4:	90 e0       	ldi	r25, 0x00	; 0
    62f6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT6_LEDB_ADDR, BUTT6_LEDB_DEFAULT);	
    62fa:	60 e0       	ldi	r22, 0x00	; 0
    62fc:	84 ea       	ldi	r24, 0xA4	; 164
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT7_LEDR_ADDR, BUTT7_LEDR_DEFAULT);
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	85 ea       	ldi	r24, 0xA5	; 165
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT7_LEDG_ADDR, BUTT7_LEDG_DEFAULT);
    630e:	60 e0       	ldi	r22, 0x00	; 0
    6310:	86 ea       	ldi	r24, 0xA6	; 166
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT7_LEDB_ADDR, BUTT7_LEDB_DEFAULT);	
    6318:	6e ef       	ldi	r22, 0xFE	; 254
    631a:	87 ea       	ldi	r24, 0xA7	; 167
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT8_LEDR_ADDR, BUTT8_LEDR_DEFAULT);
    6322:	6e ef       	ldi	r22, 0xFE	; 254
    6324:	88 ea       	ldi	r24, 0xA8	; 168
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT8_LEDG_ADDR, BUTT8_LEDG_DEFAULT);
    632c:	6e ef       	ldi	r22, 0xFE	; 254
    632e:	89 ea       	ldi	r24, 0xA9	; 169
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT8_LEDB_ADDR, BUTT8_LEDB_DEFAULT);	
    6336:	6e ef       	ldi	r22, 0xFE	; 254
    6338:	8a ea       	ldi	r24, 0xAA	; 170
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT9_LEDR_ADDR, BUTT9_LEDR_DEFAULT);
    6340:	6e ef       	ldi	r22, 0xFE	; 254
    6342:	8b ea       	ldi	r24, 0xAB	; 171
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT9_LEDG_ADDR, BUTT9_LEDG_DEFAULT);
    634a:	60 e0       	ldi	r22, 0x00	; 0
    634c:	8c ea       	ldi	r24, 0xAC	; 172
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT9_LEDB_ADDR, BUTT9_LEDB_DEFAULT);	
    6354:	60 e0       	ldi	r22, 0x00	; 0
    6356:	8d ea       	ldi	r24, 0xAD	; 173
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT10_LEDR_ADDR, BUTT10_LEDR_DEFAULT);
    635e:	60 e0       	ldi	r22, 0x00	; 0
    6360:	8e ea       	ldi	r24, 0xAE	; 174
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT10_LEDG_ADDR, BUTT10_LEDG_DEFAULT);
    6368:	6e ef       	ldi	r22, 0xFE	; 254
    636a:	8f ea       	ldi	r24, 0xAF	; 175
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT10_LEDB_ADDR, BUTT10_LEDB_DEFAULT);	
    6372:	60 e0       	ldi	r22, 0x00	; 0
    6374:	80 eb       	ldi	r24, 0xB0	; 176
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT11_LEDR_ADDR, BUTT11_LEDR_DEFAULT);
    637c:	60 e0       	ldi	r22, 0x00	; 0
    637e:	81 eb       	ldi	r24, 0xB1	; 177
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT11_LEDG_ADDR, BUTT11_LEDG_DEFAULT);
    6386:	60 e0       	ldi	r22, 0x00	; 0
    6388:	82 eb       	ldi	r24, 0xB2	; 178
    638a:	90 e0       	ldi	r25, 0x00	; 0
    638c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT11_LEDB_ADDR, BUTT11_LEDB_DEFAULT);	
    6390:	6e ef       	ldi	r22, 0xFE	; 254
    6392:	83 eb       	ldi	r24, 0xB3	; 179
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT12_LEDR_ADDR, BUTT12_LEDR_DEFAULT);
    639a:	6e ef       	ldi	r22, 0xFE	; 254
    639c:	84 eb       	ldi	r24, 0xB4	; 180
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT12_LEDG_ADDR, BUTT12_LEDG_DEFAULT);
    63a4:	6e ef       	ldi	r22, 0xFE	; 254
    63a6:	85 eb       	ldi	r24, 0xB5	; 181
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT12_LEDB_ADDR, BUTT12_LEDB_DEFAULT);	
    63ae:	6e ef       	ldi	r22, 0xFE	; 254
    63b0:	86 eb       	ldi	r24, 0xB6	; 182
    63b2:	90 e0       	ldi	r25, 0x00	; 0
    63b4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT13_LEDR_ADDR, BUTT13_LEDR_DEFAULT);
    63b8:	6e ef       	ldi	r22, 0xFE	; 254
    63ba:	87 eb       	ldi	r24, 0xB7	; 183
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT13_LEDG_ADDR, BUTT13_LEDG_DEFAULT);
    63c2:	60 e0       	ldi	r22, 0x00	; 0
    63c4:	88 eb       	ldi	r24, 0xB8	; 184
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT13_LEDB_ADDR, BUTT13_LEDB_DEFAULT);	
    63cc:	60 e0       	ldi	r22, 0x00	; 0
    63ce:	89 eb       	ldi	r24, 0xB9	; 185
    63d0:	90 e0       	ldi	r25, 0x00	; 0
    63d2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT14_LEDR_ADDR, BUTT14_LEDR_DEFAULT);
    63d6:	6e ef       	ldi	r22, 0xFE	; 254
    63d8:	8a eb       	ldi	r24, 0xBA	; 186
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT14_LEDG_ADDR, BUTT14_LEDG_DEFAULT);
    63e0:	60 e0       	ldi	r22, 0x00	; 0
    63e2:	8b eb       	ldi	r24, 0xBB	; 187
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT14_LEDB_ADDR, BUTT14_LEDB_DEFAULT);	
    63ea:	60 e0       	ldi	r22, 0x00	; 0
    63ec:	8c eb       	ldi	r24, 0xBC	; 188
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT15_LEDR_ADDR, BUTT15_LEDR_DEFAULT);
    63f4:	60 e0       	ldi	r22, 0x00	; 0
    63f6:	8d eb       	ldi	r24, 0xBD	; 189
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT15_LEDG_ADDR, BUTT15_LEDG_DEFAULT);
    63fe:	6e ef       	ldi	r22, 0xFE	; 254
    6400:	8e eb       	ldi	r24, 0xBE	; 190
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT15_LEDB_ADDR, BUTT15_LEDB_DEFAULT);	
    6408:	60 e0       	ldi	r22, 0x00	; 0
    640a:	8f eb       	ldi	r24, 0xBF	; 191
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT16_LEDR_ADDR, BUTT16_LEDR_DEFAULT);
    6412:	60 e0       	ldi	r22, 0x00	; 0
    6414:	80 ec       	ldi	r24, 0xC0	; 192
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT16_LEDG_ADDR, BUTT16_LEDG_DEFAULT);
    641c:	60 e0       	ldi	r22, 0x00	; 0
    641e:	81 ec       	ldi	r24, 0xC1	; 193
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT16_LEDB_ADDR, BUTT16_LEDB_DEFAULT);	
    6426:	6e ef       	ldi	r22, 0xFE	; 254
    6428:	82 ec       	ldi	r24, 0xC2	; 194
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT17_LEDR_ADDR, BUTT17_LEDR_DEFAULT);
    6430:	6e ef       	ldi	r22, 0xFE	; 254
    6432:	83 ec       	ldi	r24, 0xC3	; 195
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT17_LEDG_ADDR, BUTT17_LEDG_DEFAULT);
    643a:	6e ef       	ldi	r22, 0xFE	; 254
    643c:	84 ec       	ldi	r24, 0xC4	; 196
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT17_LEDB_ADDR, BUTT17_LEDB_DEFAULT);	
    6444:	6e ef       	ldi	r22, 0xFE	; 254
    6446:	85 ec       	ldi	r24, 0xC5	; 197
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT18_LEDR_ADDR, BUTT18_LEDR_DEFAULT);
    644e:	6e ef       	ldi	r22, 0xFE	; 254
    6450:	86 ec       	ldi	r24, 0xC6	; 198
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT18_LEDG_ADDR, BUTT18_LEDG_DEFAULT);
    6458:	60 e0       	ldi	r22, 0x00	; 0
    645a:	87 ec       	ldi	r24, 0xC7	; 199
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT18_LEDB_ADDR, BUTT18_LEDB_DEFAULT);	
    6462:	60 e0       	ldi	r22, 0x00	; 0
    6464:	88 ec       	ldi	r24, 0xC8	; 200
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT19_LEDR_ADDR, BUTT19_LEDR_DEFAULT);
    646c:	60 e0       	ldi	r22, 0x00	; 0
    646e:	89 ec       	ldi	r24, 0xC9	; 201
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT19_LEDG_ADDR, BUTT19_LEDG_DEFAULT);
    6476:	6e ef       	ldi	r22, 0xFE	; 254
    6478:	8a ec       	ldi	r24, 0xCA	; 202
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT19_LEDB_ADDR, BUTT19_LEDB_DEFAULT);	
    6480:	60 e0       	ldi	r22, 0x00	; 0
    6482:	8b ec       	ldi	r24, 0xCB	; 203
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT20_LEDR_ADDR, BUTT20_LEDR_DEFAULT);
    648a:	60 e0       	ldi	r22, 0x00	; 0
    648c:	8c ec       	ldi	r24, 0xCC	; 204
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT20_LEDG_ADDR, BUTT20_LEDG_DEFAULT);
    6494:	60 e0       	ldi	r22, 0x00	; 0
    6496:	8d ec       	ldi	r24, 0xCD	; 205
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT20_LEDB_ADDR, BUTT20_LEDB_DEFAULT);	
    649e:	6e ef       	ldi	r22, 0xFE	; 254
    64a0:	8e ec       	ldi	r24, 0xCE	; 206
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT21_LEDR_ADDR, BUTT21_LEDR_DEFAULT);
    64a8:	6e ef       	ldi	r22, 0xFE	; 254
    64aa:	8f ec       	ldi	r24, 0xCF	; 207
    64ac:	90 e0       	ldi	r25, 0x00	; 0
    64ae:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT21_LEDG_ADDR, BUTT21_LEDG_DEFAULT);
    64b2:	6e ef       	ldi	r22, 0xFE	; 254
    64b4:	80 ed       	ldi	r24, 0xD0	; 208
    64b6:	90 e0       	ldi	r25, 0x00	; 0
    64b8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT21_LEDB_ADDR, BUTT21_LEDB_DEFAULT);	
    64bc:	6e ef       	ldi	r22, 0xFE	; 254
    64be:	81 ed       	ldi	r24, 0xD1	; 209
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT22_LEDR_ADDR, BUTT22_LEDR_DEFAULT);
    64c6:	6e ef       	ldi	r22, 0xFE	; 254
    64c8:	82 ed       	ldi	r24, 0xD2	; 210
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT22_LEDG_ADDR, BUTT22_LEDG_DEFAULT);
    64d0:	60 e0       	ldi	r22, 0x00	; 0
    64d2:	83 ed       	ldi	r24, 0xD3	; 211
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT22_LEDB_ADDR, BUTT22_LEDB_DEFAULT);	
    64da:	60 e0       	ldi	r22, 0x00	; 0
    64dc:	84 ed       	ldi	r24, 0xD4	; 212
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT23_LEDR_ADDR, BUTT23_LEDR_DEFAULT);
    64e4:	60 e0       	ldi	r22, 0x00	; 0
    64e6:	85 ed       	ldi	r24, 0xD5	; 213
    64e8:	90 e0       	ldi	r25, 0x00	; 0
    64ea:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT23_LEDG_ADDR, BUTT23_LEDG_DEFAULT);
    64ee:	6e ef       	ldi	r22, 0xFE	; 254
    64f0:	86 ed       	ldi	r24, 0xD6	; 214
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT23_LEDB_ADDR, BUTT23_LEDB_DEFAULT);	
    64f8:	60 e0       	ldi	r22, 0x00	; 0
    64fa:	87 ed       	ldi	r24, 0xD7	; 215
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT24_LEDR_ADDR, BUTT24_LEDR_DEFAULT);
    6502:	60 e0       	ldi	r22, 0x00	; 0
    6504:	88 ed       	ldi	r24, 0xD8	; 216
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT24_LEDG_ADDR, BUTT24_LEDG_DEFAULT);
    650c:	60 e0       	ldi	r22, 0x00	; 0
    650e:	89 ed       	ldi	r24, 0xD9	; 217
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT24_LEDB_ADDR, BUTT24_LEDB_DEFAULT);	
    6516:	6e ef       	ldi	r22, 0xFE	; 254
    6518:	8a ed       	ldi	r24, 0xDA	; 218
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT25_LEDR_ADDR, BUTT25_LEDR_DEFAULT);
    6520:	6e ef       	ldi	r22, 0xFE	; 254
    6522:	8b ed       	ldi	r24, 0xDB	; 219
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT25_LEDG_ADDR, BUTT25_LEDG_DEFAULT);
    652a:	6e ef       	ldi	r22, 0xFE	; 254
    652c:	8c ed       	ldi	r24, 0xDC	; 220
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT25_LEDB_ADDR, BUTT25_LEDB_DEFAULT);	
    6534:	6e ef       	ldi	r22, 0xFE	; 254
    6536:	8d ed       	ldi	r24, 0xDD	; 221
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT26_LEDR_ADDR, BUTT26_LEDR_DEFAULT);
    653e:	6e ef       	ldi	r22, 0xFE	; 254
    6540:	8e ed       	ldi	r24, 0xDE	; 222
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT26_LEDG_ADDR, BUTT26_LEDG_DEFAULT);
    6548:	60 e0       	ldi	r22, 0x00	; 0
    654a:	8f ed       	ldi	r24, 0xDF	; 223
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(BUTT26_LEDB_ADDR, BUTT26_LEDB_DEFAULT);	
    6552:	60 e0       	ldi	r22, 0x00	; 0
    6554:	80 ee       	ldi	r24, 0xE0	; 224
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(HP1_LEDR_ADDR, HP1_LEDR_DEFAULT);
    655c:	60 e0       	ldi	r22, 0x00	; 0
    655e:	81 ee       	ldi	r24, 0xE1	; 225
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(HP1_LEDG_ADDR, HP1_LEDG_DEFAULT);
    6566:	6e ef       	ldi	r22, 0xFE	; 254
    6568:	82 ee       	ldi	r24, 0xE2	; 226
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(HP1_LEDB_ADDR, HP1_LEDB_DEFAULT);		
    6570:	60 e0       	ldi	r22, 0x00	; 0
    6572:	83 ee       	ldi	r24, 0xE3	; 227
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(HP2_LEDR_ADDR, HP2_LEDR_DEFAULT);
    657a:	60 e0       	ldi	r22, 0x00	; 0
    657c:	84 ee       	ldi	r24, 0xE4	; 228
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(HP2_LEDG_ADDR, HP2_LEDG_DEFAULT);
    6584:	6e ef       	ldi	r22, 0xFE	; 254
    6586:	85 ee       	ldi	r24, 0xE5	; 229
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(HP2_LEDB_ADDR, HP2_LEDB_DEFAULT);
    658e:	60 e0       	ldi	r22, 0x00	; 0
    6590:	86 ee       	ldi	r24, 0xE6	; 230
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	0c 94 5c 44 	jmp	0x88b8	; 0x88b8 <eeprom_write_byte>
    6598:	08 95       	ret

0000659a <setInputDefaults>:

}
void setInputDefaults(void){
    659a:	cf 93       	push	r28
    659c:	df 93       	push	r29
		
	//set input type defaults
	eeprom_write_byte(eeprom_input_type_look_up[JOY1_U_LKUP_INDEX], JOY1_U_TYPE_DEFAULT);
    659e:	c4 e2       	ldi	r28, 0x24	; 36
    65a0:	d3 e2       	ldi	r29, 0x23	; 35
    65a2:	62 e1       	ldi	r22, 0x12	; 18
    65a4:	88 81       	ld	r24, Y
    65a6:	99 81       	ldd	r25, Y+1	; 0x01
    65a8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY1_D_LKUP_INDEX], JOY1_D_TYPE_DEFAULT);
    65ac:	62 e1       	ldi	r22, 0x12	; 18
    65ae:	8a 81       	ldd	r24, Y+2	; 0x02
    65b0:	9b 81       	ldd	r25, Y+3	; 0x03
    65b2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY1_L_LKUP_INDEX], JOY1_L_TYPE_DEFAULT);
    65b6:	61 e1       	ldi	r22, 0x11	; 17
    65b8:	8c 81       	ldd	r24, Y+4	; 0x04
    65ba:	9d 81       	ldd	r25, Y+5	; 0x05
    65bc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY1_R_LKUP_INDEX], JOY1_R_TYPE_DEFAULT);
    65c0:	61 e1       	ldi	r22, 0x11	; 17
    65c2:	8e 81       	ldd	r24, Y+6	; 0x06
    65c4:	9f 81       	ldd	r25, Y+7	; 0x07
    65c6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY2_U_LKUP_INDEX], JOY2_U_TYPE_DEFAULT);
    65ca:	62 e4       	ldi	r22, 0x42	; 66
    65cc:	88 85       	ldd	r24, Y+8	; 0x08
    65ce:	99 85       	ldd	r25, Y+9	; 0x09
    65d0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY2_D_LKUP_INDEX], JOY2_D_TYPE_DEFAULT);
    65d4:	62 e4       	ldi	r22, 0x42	; 66
    65d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    65d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    65da:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY2_L_LKUP_INDEX], JOY2_L_TYPE_DEFAULT);
    65de:	61 e4       	ldi	r22, 0x41	; 65
    65e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    65e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    65e4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY2_R_LKUP_INDEX], JOY2_R_TYPE_DEFAULT);
    65e8:	61 e4       	ldi	r22, 0x41	; 65
    65ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    65ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    65ee:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY3_U_LKUP_INDEX], JOY3_U_TYPE_DEFAULT);
    65f2:	63 e1       	ldi	r22, 0x13	; 19
    65f4:	88 89       	ldd	r24, Y+16	; 0x10
    65f6:	99 89       	ldd	r25, Y+17	; 0x11
    65f8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY3_D_LKUP_INDEX], JOY3_D_TYPE_DEFAULT);
    65fc:	63 e1       	ldi	r22, 0x13	; 19
    65fe:	8a 89       	ldd	r24, Y+18	; 0x12
    6600:	9b 89       	ldd	r25, Y+19	; 0x13
    6602:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY3_L_LKUP_INDEX], JOY3_L_TYPE_DEFAULT);
    6606:	60 e1       	ldi	r22, 0x10	; 16
    6608:	8c 89       	ldd	r24, Y+20	; 0x14
    660a:	9d 89       	ldd	r25, Y+21	; 0x15
    660c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY3_R_LKUP_INDEX], JOY3_R_TYPE_DEFAULT);
    6610:	60 e1       	ldi	r22, 0x10	; 16
    6612:	8e 89       	ldd	r24, Y+22	; 0x16
    6614:	9f 89       	ldd	r25, Y+23	; 0x17
    6616:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY4_U_LKUP_INDEX], JOY4_U_TYPE_DEFAULT);
    661a:	63 e4       	ldi	r22, 0x43	; 67
    661c:	88 8d       	ldd	r24, Y+24	; 0x18
    661e:	99 8d       	ldd	r25, Y+25	; 0x19
    6620:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY4_D_LKUP_INDEX], JOY4_D_TYPE_DEFAULT);
    6624:	63 e4       	ldi	r22, 0x43	; 67
    6626:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6628:	9b 8d       	ldd	r25, Y+27	; 0x1b
    662a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY4_L_LKUP_INDEX], JOY4_L_TYPE_DEFAULT);
    662e:	60 e4       	ldi	r22, 0x40	; 64
    6630:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6632:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6634:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[JOY4_R_LKUP_INDEX], JOY4_R_TYPE_DEFAULT);
    6638:	60 e4       	ldi	r22, 0x40	; 64
    663a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    663c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    663e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
		
	eeprom_write_byte(eeprom_input_type_look_up[BUTT1_LKUP_INDEX], BUTT1_TYPE_DEFAULT);
    6642:	61 e0       	ldi	r22, 0x01	; 1
    6644:	88 a1       	ldd	r24, Y+32	; 0x20
    6646:	99 a1       	ldd	r25, Y+33	; 0x21
    6648:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT2_LKUP_INDEX], BUTT2_TYPE_DEFAULT);
    664c:	61 e0       	ldi	r22, 0x01	; 1
    664e:	8a a1       	ldd	r24, Y+34	; 0x22
    6650:	9b a1       	ldd	r25, Y+35	; 0x23
    6652:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT3_LKUP_INDEX], BUTT3_TYPE_DEFAULT);
    6656:	61 e0       	ldi	r22, 0x01	; 1
    6658:	8c a1       	ldd	r24, Y+36	; 0x24
    665a:	9d a1       	ldd	r25, Y+37	; 0x25
    665c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT4_LKUP_INDEX], BUTT4_TYPE_DEFAULT);
    6660:	61 e0       	ldi	r22, 0x01	; 1
    6662:	8e a1       	ldd	r24, Y+38	; 0x26
    6664:	9f a1       	ldd	r25, Y+39	; 0x27
    6666:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT5_LKUP_INDEX], BUTT5_TYPE_DEFAULT);
    666a:	61 e0       	ldi	r22, 0x01	; 1
    666c:	88 a5       	ldd	r24, Y+40	; 0x28
    666e:	99 a5       	ldd	r25, Y+41	; 0x29
    6670:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT6_LKUP_INDEX], BUTT6_TYPE_DEFAULT);
    6674:	61 e0       	ldi	r22, 0x01	; 1
    6676:	8a a5       	ldd	r24, Y+42	; 0x2a
    6678:	9b a5       	ldd	r25, Y+43	; 0x2b
    667a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT7_LKUP_INDEX], BUTT7_TYPE_DEFAULT);
    667e:	61 e0       	ldi	r22, 0x01	; 1
    6680:	8c a5       	ldd	r24, Y+44	; 0x2c
    6682:	9d a5       	ldd	r25, Y+45	; 0x2d
    6684:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT8_LKUP_INDEX], BUTT8_TYPE_DEFAULT);
    6688:	61 e0       	ldi	r22, 0x01	; 1
    668a:	8e a5       	ldd	r24, Y+46	; 0x2e
    668c:	9f a5       	ldd	r25, Y+47	; 0x2f
    668e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT9_LKUP_INDEX], BUTT9_TYPE_DEFAULT);
    6692:	61 e0       	ldi	r22, 0x01	; 1
    6694:	88 a9       	ldd	r24, Y+48	; 0x30
    6696:	99 a9       	ldd	r25, Y+49	; 0x31
    6698:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT10_LKUP_INDEX], BUTT10_TYPE_DEFAULT);
    669c:	61 e0       	ldi	r22, 0x01	; 1
    669e:	8a a9       	ldd	r24, Y+50	; 0x32
    66a0:	9b a9       	ldd	r25, Y+51	; 0x33
    66a2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT11_LKUP_INDEX], BUTT11_TYPE_DEFAULT);
    66a6:	61 e0       	ldi	r22, 0x01	; 1
    66a8:	8c a9       	ldd	r24, Y+52	; 0x34
    66aa:	9d a9       	ldd	r25, Y+53	; 0x35
    66ac:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT12_LKUP_INDEX], BUTT12_TYPE_DEFAULT);
    66b0:	61 e0       	ldi	r22, 0x01	; 1
    66b2:	8e a9       	ldd	r24, Y+54	; 0x36
    66b4:	9f a9       	ldd	r25, Y+55	; 0x37
    66b6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT13_LKUP_INDEX], BUTT13_TYPE_DEFAULT);
    66ba:	61 e0       	ldi	r22, 0x01	; 1
    66bc:	88 ad       	ldd	r24, Y+56	; 0x38
    66be:	99 ad       	ldd	r25, Y+57	; 0x39
    66c0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT14_LKUP_INDEX], BUTT14_TYPE_DEFAULT);
    66c4:	62 e0       	ldi	r22, 0x02	; 2
    66c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    66c8:	9b ad       	ldd	r25, Y+59	; 0x3b
    66ca:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT15_LKUP_INDEX], BUTT15_TYPE_DEFAULT);
    66ce:	62 e0       	ldi	r22, 0x02	; 2
    66d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    66d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    66d4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT16_LKUP_INDEX], BUTT16_TYPE_DEFAULT);
    66d8:	62 e0       	ldi	r22, 0x02	; 2
    66da:	8e ad       	ldd	r24, Y+62	; 0x3e
    66dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    66de:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT17_LKUP_INDEX], BUTT17_TYPE_DEFAULT);
    66e2:	62 e0       	ldi	r22, 0x02	; 2
    66e4:	80 91 64 23 	lds	r24, 0x2364	; 0x802364 <eeprom_input_type_look_up+0x40>
    66e8:	90 91 65 23 	lds	r25, 0x2365	; 0x802365 <eeprom_input_type_look_up+0x41>
    66ec:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT18_LKUP_INDEX], BUTT18_TYPE_DEFAULT);
    66f0:	62 e0       	ldi	r22, 0x02	; 2
    66f2:	80 91 66 23 	lds	r24, 0x2366	; 0x802366 <eeprom_input_type_look_up+0x42>
    66f6:	90 91 67 23 	lds	r25, 0x2367	; 0x802367 <eeprom_input_type_look_up+0x43>
    66fa:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT19_LKUP_INDEX], BUTT19_TYPE_DEFAULT);
    66fe:	62 e0       	ldi	r22, 0x02	; 2
    6700:	80 91 68 23 	lds	r24, 0x2368	; 0x802368 <eeprom_input_type_look_up+0x44>
    6704:	90 91 69 23 	lds	r25, 0x2369	; 0x802369 <eeprom_input_type_look_up+0x45>
    6708:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT20_LKUP_INDEX], BUTT20_TYPE_DEFAULT);
    670c:	62 e0       	ldi	r22, 0x02	; 2
    670e:	80 91 6a 23 	lds	r24, 0x236A	; 0x80236a <eeprom_input_type_look_up+0x46>
    6712:	90 91 6b 23 	lds	r25, 0x236B	; 0x80236b <eeprom_input_type_look_up+0x47>
    6716:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT21_LKUP_INDEX], BUTT21_TYPE_DEFAULT);
    671a:	62 e0       	ldi	r22, 0x02	; 2
    671c:	80 91 6c 23 	lds	r24, 0x236C	; 0x80236c <eeprom_input_type_look_up+0x48>
    6720:	90 91 6d 23 	lds	r25, 0x236D	; 0x80236d <eeprom_input_type_look_up+0x49>
    6724:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT22_LKUP_INDEX], BUTT22_TYPE_DEFAULT);
    6728:	62 e0       	ldi	r22, 0x02	; 2
    672a:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <eeprom_input_type_look_up+0x4a>
    672e:	90 91 6f 23 	lds	r25, 0x236F	; 0x80236f <eeprom_input_type_look_up+0x4b>
    6732:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT23_LKUP_INDEX], BUTT23_TYPE_DEFAULT);
    6736:	62 e0       	ldi	r22, 0x02	; 2
    6738:	80 91 70 23 	lds	r24, 0x2370	; 0x802370 <eeprom_input_type_look_up+0x4c>
    673c:	90 91 71 23 	lds	r25, 0x2371	; 0x802371 <eeprom_input_type_look_up+0x4d>
    6740:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT24_LKUP_INDEX], BUTT24_TYPE_DEFAULT);
    6744:	62 e0       	ldi	r22, 0x02	; 2
    6746:	80 91 72 23 	lds	r24, 0x2372	; 0x802372 <eeprom_input_type_look_up+0x4e>
    674a:	90 91 73 23 	lds	r25, 0x2373	; 0x802373 <eeprom_input_type_look_up+0x4f>
    674e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT25_LKUP_INDEX], BUTT25_TYPE_DEFAULT);
    6752:	62 e0       	ldi	r22, 0x02	; 2
    6754:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <eeprom_input_type_look_up+0x50>
    6758:	90 91 75 23 	lds	r25, 0x2375	; 0x802375 <eeprom_input_type_look_up+0x51>
    675c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[BUTT26_LKUP_INDEX], BUTT26_TYPE_DEFAULT);
    6760:	62 e0       	ldi	r22, 0x02	; 2
    6762:	80 91 76 23 	lds	r24, 0x2376	; 0x802376 <eeprom_input_type_look_up+0x52>
    6766:	90 91 77 23 	lds	r25, 0x2377	; 0x802377 <eeprom_input_type_look_up+0x53>
    676a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	eeprom_write_byte(eeprom_input_type_look_up[ACCEL_XAXIS_LKUP_INDEX], ACCEL_XAXIS_TYPE_DEFAULT);
    676e:	64 e2       	ldi	r22, 0x24	; 36
    6770:	80 91 78 23 	lds	r24, 0x2378	; 0x802378 <eeprom_input_type_look_up+0x54>
    6774:	90 91 79 23 	lds	r25, 0x2379	; 0x802379 <eeprom_input_type_look_up+0x55>
    6778:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[ACCEL_YAXIS_LKUP_INDEX], ACCEL_YAXIS_TYPE_DEFAULT);
    677c:	65 e2       	ldi	r22, 0x25	; 37
    677e:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <eeprom_input_type_look_up+0x56>
    6782:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <eeprom_input_type_look_up+0x57>
    6786:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_type_look_up[ACCEL_ZAXIS_LKUP_INDEX], ACCEL_ZAXIS_TYPE_DEFAULT);
    678a:	66 e2       	ldi	r22, 0x26	; 38
    678c:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <eeprom_input_type_look_up+0x58>
    6790:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <eeprom_input_type_look_up+0x59>
    6794:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
		
	//set input value defaults
	eeprom_write_byte(eeprom_input_value_look_up[JOY1_U_LKUP_INDEX], JOY1_U_VALUE_DEFAULT);
    6798:	c8 ed       	ldi	r28, 0xD8	; 216
    679a:	d3 e2       	ldi	r29, 0x23	; 35
    679c:	61 e8       	ldi	r22, 0x81	; 129
    679e:	88 81       	ld	r24, Y
    67a0:	99 81       	ldd	r25, Y+1	; 0x01
    67a2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY1_D_LKUP_INDEX], JOY1_D_VALUE_DEFAULT);
    67a6:	6f e7       	ldi	r22, 0x7F	; 127
    67a8:	8a 81       	ldd	r24, Y+2	; 0x02
    67aa:	9b 81       	ldd	r25, Y+3	; 0x03
    67ac:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY1_L_LKUP_INDEX], JOY1_L_VALUE_DEFAULT);
    67b0:	61 e8       	ldi	r22, 0x81	; 129
    67b2:	8c 81       	ldd	r24, Y+4	; 0x04
    67b4:	9d 81       	ldd	r25, Y+5	; 0x05
    67b6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY1_R_LKUP_INDEX], JOY1_R_VALUE_DEFAULT);
    67ba:	6f e7       	ldi	r22, 0x7F	; 127
    67bc:	8e 81       	ldd	r24, Y+6	; 0x06
    67be:	9f 81       	ldd	r25, Y+7	; 0x07
    67c0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY2_U_LKUP_INDEX], JOY2_U_VALUE_DEFAULT);
    67c4:	61 e8       	ldi	r22, 0x81	; 129
    67c6:	88 85       	ldd	r24, Y+8	; 0x08
    67c8:	99 85       	ldd	r25, Y+9	; 0x09
    67ca:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY2_D_LKUP_INDEX], JOY2_D_VALUE_DEFAULT);
    67ce:	6f e7       	ldi	r22, 0x7F	; 127
    67d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    67d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    67d4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY2_L_LKUP_INDEX], JOY2_L_VALUE_DEFAULT);
    67d8:	61 e8       	ldi	r22, 0x81	; 129
    67da:	8c 85       	ldd	r24, Y+12	; 0x0c
    67dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    67de:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY2_R_LKUP_INDEX], JOY2_R_VALUE_DEFAULT);
    67e2:	6f e7       	ldi	r22, 0x7F	; 127
    67e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    67e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    67e8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY3_U_LKUP_INDEX], JOY3_U_VALUE_DEFAULT);
    67ec:	61 e8       	ldi	r22, 0x81	; 129
    67ee:	88 89       	ldd	r24, Y+16	; 0x10
    67f0:	99 89       	ldd	r25, Y+17	; 0x11
    67f2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY3_D_LKUP_INDEX], JOY3_D_VALUE_DEFAULT);
    67f6:	6f e7       	ldi	r22, 0x7F	; 127
    67f8:	8a 89       	ldd	r24, Y+18	; 0x12
    67fa:	9b 89       	ldd	r25, Y+19	; 0x13
    67fc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY3_L_LKUP_INDEX], JOY3_L_VALUE_DEFAULT);
    6800:	61 e8       	ldi	r22, 0x81	; 129
    6802:	8c 89       	ldd	r24, Y+20	; 0x14
    6804:	9d 89       	ldd	r25, Y+21	; 0x15
    6806:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY3_R_LKUP_INDEX], JOY3_R_VALUE_DEFAULT);
    680a:	6f e7       	ldi	r22, 0x7F	; 127
    680c:	8e 89       	ldd	r24, Y+22	; 0x16
    680e:	9f 89       	ldd	r25, Y+23	; 0x17
    6810:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY4_U_LKUP_INDEX], JOY4_U_VALUE_DEFAULT);
    6814:	61 e8       	ldi	r22, 0x81	; 129
    6816:	88 8d       	ldd	r24, Y+24	; 0x18
    6818:	99 8d       	ldd	r25, Y+25	; 0x19
    681a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY4_D_LKUP_INDEX], JOY4_D_VALUE_DEFAULT);
    681e:	6f e7       	ldi	r22, 0x7F	; 127
    6820:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6822:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6824:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY4_L_LKUP_INDEX], JOY4_L_VALUE_DEFAULT);
    6828:	61 e8       	ldi	r22, 0x81	; 129
    682a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    682c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    682e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[JOY4_R_LKUP_INDEX], JOY4_R_VALUE_DEFAULT);
    6832:	6f e7       	ldi	r22, 0x7F	; 127
    6834:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6836:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6838:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
		
	eeprom_write_byte(eeprom_input_value_look_up[BUTT1_LKUP_INDEX], BUTT1_VALUE_DEFAULT);
    683c:	61 e0       	ldi	r22, 0x01	; 1
    683e:	88 a1       	ldd	r24, Y+32	; 0x20
    6840:	99 a1       	ldd	r25, Y+33	; 0x21
    6842:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT2_LKUP_INDEX], BUTT2_VALUE_DEFAULT);
    6846:	62 e0       	ldi	r22, 0x02	; 2
    6848:	8a a1       	ldd	r24, Y+34	; 0x22
    684a:	9b a1       	ldd	r25, Y+35	; 0x23
    684c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT3_LKUP_INDEX], BUTT3_VALUE_DEFAULT);
    6850:	63 e0       	ldi	r22, 0x03	; 3
    6852:	8c a1       	ldd	r24, Y+36	; 0x24
    6854:	9d a1       	ldd	r25, Y+37	; 0x25
    6856:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT4_LKUP_INDEX], BUTT4_VALUE_DEFAULT);
    685a:	64 e0       	ldi	r22, 0x04	; 4
    685c:	8e a1       	ldd	r24, Y+38	; 0x26
    685e:	9f a1       	ldd	r25, Y+39	; 0x27
    6860:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT5_LKUP_INDEX], BUTT5_VALUE_DEFAULT);
    6864:	65 e0       	ldi	r22, 0x05	; 5
    6866:	88 a5       	ldd	r24, Y+40	; 0x28
    6868:	99 a5       	ldd	r25, Y+41	; 0x29
    686a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT6_LKUP_INDEX], BUTT6_VALUE_DEFAULT);
    686e:	66 e0       	ldi	r22, 0x06	; 6
    6870:	8a a5       	ldd	r24, Y+42	; 0x2a
    6872:	9b a5       	ldd	r25, Y+43	; 0x2b
    6874:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT7_LKUP_INDEX], BUTT7_VALUE_DEFAULT);
    6878:	67 e0       	ldi	r22, 0x07	; 7
    687a:	8c a5       	ldd	r24, Y+44	; 0x2c
    687c:	9d a5       	ldd	r25, Y+45	; 0x2d
    687e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT8_LKUP_INDEX], BUTT8_VALUE_DEFAULT);
    6882:	68 e0       	ldi	r22, 0x08	; 8
    6884:	8e a5       	ldd	r24, Y+46	; 0x2e
    6886:	9f a5       	ldd	r25, Y+47	; 0x2f
    6888:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT9_LKUP_INDEX], BUTT9_VALUE_DEFAULT);
    688c:	69 e0       	ldi	r22, 0x09	; 9
    688e:	88 a9       	ldd	r24, Y+48	; 0x30
    6890:	99 a9       	ldd	r25, Y+49	; 0x31
    6892:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT10_LKUP_INDEX], BUTT10_VALUE_DEFAULT);
    6896:	6a e0       	ldi	r22, 0x0A	; 10
    6898:	8a a9       	ldd	r24, Y+50	; 0x32
    689a:	9b a9       	ldd	r25, Y+51	; 0x33
    689c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT11_LKUP_INDEX], BUTT11_VALUE_DEFAULT);
    68a0:	6b e0       	ldi	r22, 0x0B	; 11
    68a2:	8c a9       	ldd	r24, Y+52	; 0x34
    68a4:	9d a9       	ldd	r25, Y+53	; 0x35
    68a6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT12_LKUP_INDEX], BUTT12_VALUE_DEFAULT);
    68aa:	6c e0       	ldi	r22, 0x0C	; 12
    68ac:	8e a9       	ldd	r24, Y+54	; 0x36
    68ae:	9f a9       	ldd	r25, Y+55	; 0x37
    68b0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT13_LKUP_INDEX], BUTT13_VALUE_DEFAULT);
    68b4:	6d e0       	ldi	r22, 0x0D	; 13
    68b6:	88 ad       	ldd	r24, Y+56	; 0x38
    68b8:	99 ad       	ldd	r25, Y+57	; 0x39
    68ba:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT14_LKUP_INDEX], BUTT14_VALUE_DEFAULT);
    68be:	61 e0       	ldi	r22, 0x01	; 1
    68c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    68c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    68c4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT15_LKUP_INDEX], BUTT15_VALUE_DEFAULT);
    68c8:	62 e0       	ldi	r22, 0x02	; 2
    68ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    68cc:	9d ad       	ldd	r25, Y+61	; 0x3d
    68ce:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT16_LKUP_INDEX], BUTT16_VALUE_DEFAULT);
    68d2:	63 e0       	ldi	r22, 0x03	; 3
    68d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    68d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    68d8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT17_LKUP_INDEX], BUTT17_VALUE_DEFAULT);
    68dc:	64 e0       	ldi	r22, 0x04	; 4
    68de:	80 91 18 24 	lds	r24, 0x2418	; 0x802418 <eeprom_input_value_look_up+0x40>
    68e2:	90 91 19 24 	lds	r25, 0x2419	; 0x802419 <eeprom_input_value_look_up+0x41>
    68e6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT18_LKUP_INDEX], BUTT18_VALUE_DEFAULT);
    68ea:	65 e0       	ldi	r22, 0x05	; 5
    68ec:	80 91 1a 24 	lds	r24, 0x241A	; 0x80241a <eeprom_input_value_look_up+0x42>
    68f0:	90 91 1b 24 	lds	r25, 0x241B	; 0x80241b <eeprom_input_value_look_up+0x43>
    68f4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT19_LKUP_INDEX], BUTT19_VALUE_DEFAULT);
    68f8:	66 e0       	ldi	r22, 0x06	; 6
    68fa:	80 91 1c 24 	lds	r24, 0x241C	; 0x80241c <eeprom_input_value_look_up+0x44>
    68fe:	90 91 1d 24 	lds	r25, 0x241D	; 0x80241d <eeprom_input_value_look_up+0x45>
    6902:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT20_LKUP_INDEX], BUTT20_VALUE_DEFAULT);
    6906:	67 e0       	ldi	r22, 0x07	; 7
    6908:	80 91 1e 24 	lds	r24, 0x241E	; 0x80241e <eeprom_input_value_look_up+0x46>
    690c:	90 91 1f 24 	lds	r25, 0x241F	; 0x80241f <eeprom_input_value_look_up+0x47>
    6910:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT21_LKUP_INDEX], BUTT21_VALUE_DEFAULT);
    6914:	68 e0       	ldi	r22, 0x08	; 8
    6916:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <eeprom_input_value_look_up+0x48>
    691a:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <eeprom_input_value_look_up+0x49>
    691e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT22_LKUP_INDEX], BUTT22_VALUE_DEFAULT);
    6922:	69 e0       	ldi	r22, 0x09	; 9
    6924:	80 91 22 24 	lds	r24, 0x2422	; 0x802422 <eeprom_input_value_look_up+0x4a>
    6928:	90 91 23 24 	lds	r25, 0x2423	; 0x802423 <eeprom_input_value_look_up+0x4b>
    692c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT23_LKUP_INDEX], BUTT23_VALUE_DEFAULT);
    6930:	6a e0       	ldi	r22, 0x0A	; 10
    6932:	80 91 24 24 	lds	r24, 0x2424	; 0x802424 <eeprom_input_value_look_up+0x4c>
    6936:	90 91 25 24 	lds	r25, 0x2425	; 0x802425 <eeprom_input_value_look_up+0x4d>
    693a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT24_LKUP_INDEX], BUTT24_VALUE_DEFAULT);
    693e:	6b e0       	ldi	r22, 0x0B	; 11
    6940:	80 91 26 24 	lds	r24, 0x2426	; 0x802426 <eeprom_input_value_look_up+0x4e>
    6944:	90 91 27 24 	lds	r25, 0x2427	; 0x802427 <eeprom_input_value_look_up+0x4f>
    6948:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT25_LKUP_INDEX], BUTT25_VALUE_DEFAULT);
    694c:	6c e0       	ldi	r22, 0x0C	; 12
    694e:	80 91 28 24 	lds	r24, 0x2428	; 0x802428 <eeprom_input_value_look_up+0x50>
    6952:	90 91 29 24 	lds	r25, 0x2429	; 0x802429 <eeprom_input_value_look_up+0x51>
    6956:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[BUTT26_LKUP_INDEX], BUTT26_VALUE_DEFAULT);
    695a:	6d e0       	ldi	r22, 0x0D	; 13
    695c:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <eeprom_input_value_look_up+0x52>
    6960:	90 91 2b 24 	lds	r25, 0x242B	; 0x80242b <eeprom_input_value_look_up+0x53>
    6964:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	eeprom_write_byte(eeprom_input_value_look_up[ACCEL_XAXIS_LKUP_INDEX], ACCEL_XAXIS_VALUE_DEFAULT);
    6968:	60 e0       	ldi	r22, 0x00	; 0
    696a:	80 91 2c 24 	lds	r24, 0x242C	; 0x80242c <eeprom_input_value_look_up+0x54>
    696e:	90 91 2d 24 	lds	r25, 0x242D	; 0x80242d <eeprom_input_value_look_up+0x55>
    6972:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[ACCEL_YAXIS_LKUP_INDEX], ACCEL_YAXIS_VALUE_DEFAULT);
    6976:	60 e0       	ldi	r22, 0x00	; 0
    6978:	80 91 2e 24 	lds	r24, 0x242E	; 0x80242e <eeprom_input_value_look_up+0x56>
    697c:	90 91 2f 24 	lds	r25, 0x242F	; 0x80242f <eeprom_input_value_look_up+0x57>
    6980:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value_look_up[ACCEL_ZAXIS_LKUP_INDEX], ACCEL_ZAXIS_VALUE_DEFAULT);
    6984:	60 e0       	ldi	r22, 0x00	; 0
    6986:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <eeprom_input_value_look_up+0x58>
    698a:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <eeprom_input_value_look_up+0x59>
    698e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	//set input value2
	eeprom_write_byte(eeprom_input_value2_look_up[JOY1_U_LKUP_INDEX], JOY1_U_VALUE2_DEFAULT);
    6992:	ce e7       	ldi	r28, 0x7E	; 126
    6994:	d3 e2       	ldi	r29, 0x23	; 35
    6996:	60 e0       	ldi	r22, 0x00	; 0
    6998:	88 81       	ld	r24, Y
    699a:	99 81       	ldd	r25, Y+1	; 0x01
    699c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY1_D_LKUP_INDEX], JOY1_D_VALUE2_DEFAULT);
    69a0:	60 e0       	ldi	r22, 0x00	; 0
    69a2:	8a 81       	ldd	r24, Y+2	; 0x02
    69a4:	9b 81       	ldd	r25, Y+3	; 0x03
    69a6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY1_L_LKUP_INDEX], JOY1_L_VALUE2_DEFAULT);
    69aa:	60 e0       	ldi	r22, 0x00	; 0
    69ac:	8c 81       	ldd	r24, Y+4	; 0x04
    69ae:	9d 81       	ldd	r25, Y+5	; 0x05
    69b0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY1_R_LKUP_INDEX], JOY1_R_VALUE2_DEFAULT);
    69b4:	60 e0       	ldi	r22, 0x00	; 0
    69b6:	8e 81       	ldd	r24, Y+6	; 0x06
    69b8:	9f 81       	ldd	r25, Y+7	; 0x07
    69ba:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY2_U_LKUP_INDEX], JOY2_U_VALUE2_DEFAULT);
    69be:	60 e0       	ldi	r22, 0x00	; 0
    69c0:	88 85       	ldd	r24, Y+8	; 0x08
    69c2:	99 85       	ldd	r25, Y+9	; 0x09
    69c4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY2_D_LKUP_INDEX], JOY2_D_VALUE2_DEFAULT);
    69c8:	60 e0       	ldi	r22, 0x00	; 0
    69ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    69cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    69ce:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY2_L_LKUP_INDEX], JOY2_L_VALUE2_DEFAULT);
    69d2:	60 e0       	ldi	r22, 0x00	; 0
    69d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    69d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    69d8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY2_R_LKUP_INDEX], JOY2_R_VALUE2_DEFAULT);
    69dc:	60 e0       	ldi	r22, 0x00	; 0
    69de:	8e 85       	ldd	r24, Y+14	; 0x0e
    69e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    69e2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY3_U_LKUP_INDEX], JOY3_U_VALUE2_DEFAULT);
    69e6:	60 e0       	ldi	r22, 0x00	; 0
    69e8:	88 89       	ldd	r24, Y+16	; 0x10
    69ea:	99 89       	ldd	r25, Y+17	; 0x11
    69ec:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY3_D_LKUP_INDEX], JOY3_D_VALUE2_DEFAULT);
    69f0:	60 e0       	ldi	r22, 0x00	; 0
    69f2:	8a 89       	ldd	r24, Y+18	; 0x12
    69f4:	9b 89       	ldd	r25, Y+19	; 0x13
    69f6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY3_L_LKUP_INDEX], JOY3_L_VALUE2_DEFAULT);
    69fa:	60 e0       	ldi	r22, 0x00	; 0
    69fc:	8c 89       	ldd	r24, Y+20	; 0x14
    69fe:	9d 89       	ldd	r25, Y+21	; 0x15
    6a00:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY3_R_LKUP_INDEX], JOY3_R_VALUE2_DEFAULT);
    6a04:	60 e0       	ldi	r22, 0x00	; 0
    6a06:	8e 89       	ldd	r24, Y+22	; 0x16
    6a08:	9f 89       	ldd	r25, Y+23	; 0x17
    6a0a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY4_U_LKUP_INDEX], JOY4_U_VALUE2_DEFAULT);
    6a0e:	60 e0       	ldi	r22, 0x00	; 0
    6a10:	88 8d       	ldd	r24, Y+24	; 0x18
    6a12:	99 8d       	ldd	r25, Y+25	; 0x19
    6a14:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY4_D_LKUP_INDEX], JOY4_D_VALUE2_DEFAULT);
    6a18:	60 e0       	ldi	r22, 0x00	; 0
    6a1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6a1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6a1e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY4_L_LKUP_INDEX], JOY4_L_VALUE2_DEFAULT);
    6a22:	60 e0       	ldi	r22, 0x00	; 0
    6a24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6a28:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[JOY4_R_LKUP_INDEX], JOY4_R_VALUE2_DEFAULT);
    6a2c:	60 e0       	ldi	r22, 0x00	; 0
    6a2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6a30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6a32:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT1_LKUP_INDEX], BUTT1_VALUE2_DEFAULT);
    6a36:	60 e0       	ldi	r22, 0x00	; 0
    6a38:	88 a1       	ldd	r24, Y+32	; 0x20
    6a3a:	99 a1       	ldd	r25, Y+33	; 0x21
    6a3c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT2_LKUP_INDEX], BUTT2_VALUE2_DEFAULT);
    6a40:	60 e0       	ldi	r22, 0x00	; 0
    6a42:	8a a1       	ldd	r24, Y+34	; 0x22
    6a44:	9b a1       	ldd	r25, Y+35	; 0x23
    6a46:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT3_LKUP_INDEX], BUTT3_VALUE2_DEFAULT);
    6a4a:	60 e0       	ldi	r22, 0x00	; 0
    6a4c:	8c a1       	ldd	r24, Y+36	; 0x24
    6a4e:	9d a1       	ldd	r25, Y+37	; 0x25
    6a50:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT4_LKUP_INDEX], BUTT4_VALUE2_DEFAULT);
    6a54:	60 e0       	ldi	r22, 0x00	; 0
    6a56:	8e a1       	ldd	r24, Y+38	; 0x26
    6a58:	9f a1       	ldd	r25, Y+39	; 0x27
    6a5a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT5_LKUP_INDEX], BUTT5_VALUE2_DEFAULT);
    6a5e:	60 e0       	ldi	r22, 0x00	; 0
    6a60:	88 a5       	ldd	r24, Y+40	; 0x28
    6a62:	99 a5       	ldd	r25, Y+41	; 0x29
    6a64:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT6_LKUP_INDEX], BUTT6_VALUE2_DEFAULT);
    6a68:	60 e0       	ldi	r22, 0x00	; 0
    6a6a:	8a a5       	ldd	r24, Y+42	; 0x2a
    6a6c:	9b a5       	ldd	r25, Y+43	; 0x2b
    6a6e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT7_LKUP_INDEX], BUTT7_VALUE2_DEFAULT);
    6a72:	60 e0       	ldi	r22, 0x00	; 0
    6a74:	8c a5       	ldd	r24, Y+44	; 0x2c
    6a76:	9d a5       	ldd	r25, Y+45	; 0x2d
    6a78:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT8_LKUP_INDEX], BUTT8_VALUE2_DEFAULT);
    6a7c:	60 e0       	ldi	r22, 0x00	; 0
    6a7e:	8e a5       	ldd	r24, Y+46	; 0x2e
    6a80:	9f a5       	ldd	r25, Y+47	; 0x2f
    6a82:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT9_LKUP_INDEX], BUTT9_VALUE2_DEFAULT);
    6a86:	60 e0       	ldi	r22, 0x00	; 0
    6a88:	88 a9       	ldd	r24, Y+48	; 0x30
    6a8a:	99 a9       	ldd	r25, Y+49	; 0x31
    6a8c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT10_LKUP_INDEX], BUTT10_VALUE2_DEFAULT);
    6a90:	60 e0       	ldi	r22, 0x00	; 0
    6a92:	8a a9       	ldd	r24, Y+50	; 0x32
    6a94:	9b a9       	ldd	r25, Y+51	; 0x33
    6a96:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT11_LKUP_INDEX], BUTT11_VALUE2_DEFAULT);
    6a9a:	60 e0       	ldi	r22, 0x00	; 0
    6a9c:	8c a9       	ldd	r24, Y+52	; 0x34
    6a9e:	9d a9       	ldd	r25, Y+53	; 0x35
    6aa0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT12_LKUP_INDEX], BUTT12_VALUE2_DEFAULT);
    6aa4:	60 e0       	ldi	r22, 0x00	; 0
    6aa6:	8e a9       	ldd	r24, Y+54	; 0x36
    6aa8:	9f a9       	ldd	r25, Y+55	; 0x37
    6aaa:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT13_LKUP_INDEX], BUTT13_VALUE2_DEFAULT);
    6aae:	60 e0       	ldi	r22, 0x00	; 0
    6ab0:	88 ad       	ldd	r24, Y+56	; 0x38
    6ab2:	99 ad       	ldd	r25, Y+57	; 0x39
    6ab4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT14_LKUP_INDEX], BUTT14_VALUE2_DEFAULT);
    6ab8:	60 e0       	ldi	r22, 0x00	; 0
    6aba:	8a ad       	ldd	r24, Y+58	; 0x3a
    6abc:	9b ad       	ldd	r25, Y+59	; 0x3b
    6abe:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT15_LKUP_INDEX], BUTT15_VALUE2_DEFAULT);
    6ac2:	60 e0       	ldi	r22, 0x00	; 0
    6ac4:	8c ad       	ldd	r24, Y+60	; 0x3c
    6ac6:	9d ad       	ldd	r25, Y+61	; 0x3d
    6ac8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT16_LKUP_INDEX], BUTT16_VALUE2_DEFAULT);
    6acc:	60 e0       	ldi	r22, 0x00	; 0
    6ace:	8e ad       	ldd	r24, Y+62	; 0x3e
    6ad0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ad2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT17_LKUP_INDEX], BUTT17_VALUE2_DEFAULT);
    6ad6:	60 e0       	ldi	r22, 0x00	; 0
    6ad8:	80 91 be 23 	lds	r24, 0x23BE	; 0x8023be <eeprom_input_value2_look_up+0x40>
    6adc:	90 91 bf 23 	lds	r25, 0x23BF	; 0x8023bf <eeprom_input_value2_look_up+0x41>
    6ae0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT18_LKUP_INDEX], BUTT18_VALUE2_DEFAULT);
    6ae4:	60 e0       	ldi	r22, 0x00	; 0
    6ae6:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <eeprom_input_value2_look_up+0x42>
    6aea:	90 91 c1 23 	lds	r25, 0x23C1	; 0x8023c1 <eeprom_input_value2_look_up+0x43>
    6aee:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT19_LKUP_INDEX], BUTT19_VALUE2_DEFAULT);
    6af2:	60 e0       	ldi	r22, 0x00	; 0
    6af4:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <eeprom_input_value2_look_up+0x44>
    6af8:	90 91 c3 23 	lds	r25, 0x23C3	; 0x8023c3 <eeprom_input_value2_look_up+0x45>
    6afc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT20_LKUP_INDEX], BUTT20_VALUE2_DEFAULT);
    6b00:	60 e0       	ldi	r22, 0x00	; 0
    6b02:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <eeprom_input_value2_look_up+0x46>
    6b06:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <eeprom_input_value2_look_up+0x47>
    6b0a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT21_LKUP_INDEX], BUTT21_VALUE2_DEFAULT);
    6b0e:	60 e0       	ldi	r22, 0x00	; 0
    6b10:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <eeprom_input_value2_look_up+0x48>
    6b14:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <eeprom_input_value2_look_up+0x49>
    6b18:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT22_LKUP_INDEX], BUTT22_VALUE2_DEFAULT);
    6b1c:	60 e0       	ldi	r22, 0x00	; 0
    6b1e:	80 91 c8 23 	lds	r24, 0x23C8	; 0x8023c8 <eeprom_input_value2_look_up+0x4a>
    6b22:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <eeprom_input_value2_look_up+0x4b>
    6b26:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT23_LKUP_INDEX], BUTT23_VALUE2_DEFAULT);
    6b2a:	60 e0       	ldi	r22, 0x00	; 0
    6b2c:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <eeprom_input_value2_look_up+0x4c>
    6b30:	90 91 cb 23 	lds	r25, 0x23CB	; 0x8023cb <eeprom_input_value2_look_up+0x4d>
    6b34:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT24_LKUP_INDEX], BUTT24_VALUE2_DEFAULT);
    6b38:	60 e0       	ldi	r22, 0x00	; 0
    6b3a:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <eeprom_input_value2_look_up+0x4e>
    6b3e:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <eeprom_input_value2_look_up+0x4f>
    6b42:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT25_LKUP_INDEX], BUTT25_VALUE2_DEFAULT);
    6b46:	60 e0       	ldi	r22, 0x00	; 0
    6b48:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <eeprom_input_value2_look_up+0x50>
    6b4c:	90 91 cf 23 	lds	r25, 0x23CF	; 0x8023cf <eeprom_input_value2_look_up+0x51>
    6b50:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[BUTT26_LKUP_INDEX], BUTT26_VALUE2_DEFAULT);
    6b54:	60 e0       	ldi	r22, 0x00	; 0
    6b56:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <eeprom_input_value2_look_up+0x52>
    6b5a:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <eeprom_input_value2_look_up+0x53>
    6b5e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	eeprom_write_byte(eeprom_input_value2_look_up[ACCEL_XAXIS_LKUP_INDEX], ACCEL_XAXIS_VALUE2_DEFAULT);
    6b62:	60 e0       	ldi	r22, 0x00	; 0
    6b64:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <eeprom_input_value2_look_up+0x54>
    6b68:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <eeprom_input_value2_look_up+0x55>
    6b6c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[ACCEL_YAXIS_LKUP_INDEX], ACCEL_YAXIS_VALUE2_DEFAULT);
    6b70:	60 e0       	ldi	r22, 0x00	; 0
    6b72:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <eeprom_input_value2_look_up+0x56>
    6b76:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <eeprom_input_value2_look_up+0x57>
    6b7a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(eeprom_input_value2_look_up[ACCEL_ZAXIS_LKUP_INDEX], ACCEL_ZAXIS_VALUE2_DEFAULT);
    6b7e:	60 e0       	ldi	r22, 0x00	; 0
    6b80:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <eeprom_input_value2_look_up+0x58>
    6b84:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <eeprom_input_value2_look_up+0x59>
    6b88:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	eeprom_write_byte(ACCEL_XAXIS_MIN_TRIG_ADDR, ACCEL_XAXIS_MIN_TRIG_DEFAULT);
    6b8c:	64 e6       	ldi	r22, 0x64	; 100
    6b8e:	87 ee       	ldi	r24, 0xE7	; 231
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(ACCEL_YAXIS_MIN_TRIG_ADDR, ACCEL_YAXIS_MIN_TRIG_DEFAULT);
    6b96:	64 e6       	ldi	r22, 0x64	; 100
    6b98:	88 ee       	ldi	r24, 0xE8	; 232
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(ACCEL_ZAXIS_MIN_TRIG_ADDR, ACCEL_ZAXIS_MIN_TRIG_DEFAULT);
    6ba0:	64 e6       	ldi	r22, 0x64	; 100
    6ba2:	89 ee       	ldi	r24, 0xE9	; 233
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(ACCEL_XAXIS_MAX_TRIG_ADDR, ACCEL_XAXIS_MAX_TRIG_DEFAULT);
    6baa:	6d e7       	ldi	r22, 0x7D	; 125
    6bac:	8a ee       	ldi	r24, 0xEA	; 234
    6bae:	90 e0       	ldi	r25, 0x00	; 0
    6bb0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(ACCEL_YAXIS_MAX_TRIG_ADDR, ACCEL_YAXIS_MAX_TRIG_DEFAULT);
    6bb4:	6d e7       	ldi	r22, 0x7D	; 125
    6bb6:	8b ee       	ldi	r24, 0xEB	; 235
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	eeprom_write_byte(ACCEL_ZAXIS_MAX_TRIG_ADDR, ACCEL_ZAXIS_MAX_TRIG_DEFAULT);
    6bbe:	6d e7       	ldi	r22, 0x7D	; 125
    6bc0:	8c ee       	ldi	r24, 0xEC	; 236
    6bc2:	90 e0       	ldi	r25, 0x00	; 0
    6bc4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
	
	
}
    6bc8:	df 91       	pop	r29
    6bca:	cf 91       	pop	r28
    6bcc:	08 95       	ret

00006bce <parseHidReport>:
	else if(joystick == 2){
		gJoy2Buf[index] |= value;
	}
}

void parseHidReport(void){
    6bce:	8f 92       	push	r8
    6bd0:	9f 92       	push	r9
    6bd2:	af 92       	push	r10
    6bd4:	bf 92       	push	r11
    6bd6:	cf 92       	push	r12
    6bd8:	df 92       	push	r13
    6bda:	ef 92       	push	r14
    6bdc:	ff 92       	push	r15
    6bde:	0f 93       	push	r16
    6be0:	1f 93       	push	r17
    6be2:	cf 93       	push	r28
    6be4:	df 93       	push	r29
    6be6:	cd b7       	in	r28, 0x3d	; 61
    6be8:	de b7       	in	r29, 0x3e	; 62
    6bea:	63 97       	sbiw	r28, 0x13	; 19
    6bec:	cd bf       	out	0x3d, r28	; 61
    6bee:	de bf       	out	0x3e, r29	; 62
	uint16_t positionY = 0;
	uint16_t freqY = 0;
	bool qdec_dirY = 0;
	uint8_t controlSet = 0xAF;
	uint16_t accelReadingX = 0;
	uint8_t ledRed = 0;
    6bf0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t ledGreen = 0;
    6bf2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t ledBlue = 0;
    6bf4:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t bankValues[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    6bf6:	fe 01       	movw	r30, r28
    6bf8:	34 96       	adiw	r30, 0x04	; 4
    6bfa:	80 e1       	ldi	r24, 0x10	; 16
    6bfc:	df 01       	movw	r26, r30
    6bfe:	1d 92       	st	X+, r1
    6c00:	8a 95       	dec	r24
    6c02:	e9 f7       	brne	.-6      	; 0x6bfe <parseHidReport+0x30>
		
	memset(howler_hid_report, 0x00, UDI_HID_REPORT_IN_SIZE);
    6c04:	88 e1       	ldi	r24, 0x18	; 24
    6c06:	ed e1       	ldi	r30, 0x1D	; 29
    6c08:	fa e2       	ldi	r31, 0x2A	; 42
    6c0a:	df 01       	movw	r26, r30
    6c0c:	1d 92       	st	X+, r1
    6c0e:	8a 95       	dec	r24
    6c10:	e9 f7       	brne	.-6      	; 0x6c0c <parseHidReport+0x3e>
	
	if(gReport[0] == HOWLER_ID){ //eventually make this the HowlerID
    6c12:	80 91 50 29 	lds	r24, 0x2950	; 0x802950 <gReport>
    6c16:	8e 3c       	cpi	r24, 0xCE	; 206
    6c18:	11 f0       	breq	.+4      	; 0x6c1e <parseHidReport+0x50>
    6c1a:	0c 94 5b 41 	jmp	0x82b6	; 0x82b6 <parseHidReport+0x16e8>
		switch(gReport[1]){
    6c1e:	80 91 51 29 	lds	r24, 0x2951	; 0x802951 <gReport+0x1>
    6c22:	87 30       	cpi	r24, 0x07	; 7
    6c24:	11 f4       	brne	.+4      	; 0x6c2a <parseHidReport+0x5c>
    6c26:	0c 94 48 40 	jmp	0x8090	; 0x8090 <parseHidReport+0x14c2>
    6c2a:	a0 f4       	brcc	.+40     	; 0x6c54 <parseHidReport+0x86>
    6c2c:	83 30       	cpi	r24, 0x03	; 3
    6c2e:	09 f4       	brne	.+2      	; 0x6c32 <parseHidReport+0x64>
    6c30:	d7 c0       	rjmp	.+430    	; 0x6de0 <parseHidReport+0x212>
    6c32:	38 f4       	brcc	.+14     	; 0x6c42 <parseHidReport+0x74>
    6c34:	81 30       	cpi	r24, 0x01	; 1
    6c36:	61 f1       	breq	.+88     	; 0x6c90 <parseHidReport+0xc2>
    6c38:	82 30       	cpi	r24, 0x02	; 2
    6c3a:	09 f4       	brne	.+2      	; 0x6c3e <parseHidReport+0x70>
    6c3c:	be c0       	rjmp	.+380    	; 0x6dba <parseHidReport+0x1ec>
    6c3e:	0c 94 30 41 	jmp	0x8260	; 0x8260 <parseHidReport+0x1692>
    6c42:	85 30       	cpi	r24, 0x05	; 5
    6c44:	11 f4       	brne	.+4      	; 0x6c4a <parseHidReport+0x7c>
    6c46:	0c 94 fc 3f 	jmp	0x7ff8	; 0x7ff8 <parseHidReport+0x142a>
    6c4a:	10 f4       	brcc	.+4      	; 0x6c50 <parseHidReport+0x82>
    6c4c:	0c 94 96 3f 	jmp	0x7f2c	; 0x7f2c <parseHidReport+0x135e>
    6c50:	0c 94 f7 3f 	jmp	0x7fee	; 0x7fee <parseHidReport+0x1420>
    6c54:	8c 3a       	cpi	r24, 0xAC	; 172
    6c56:	11 f4       	brne	.+4      	; 0x6c5c <parseHidReport+0x8e>
    6c58:	0c 94 c3 40 	jmp	0x8186	; 0x8186 <parseHidReport+0x15b8>
    6c5c:	58 f4       	brcc	.+22     	; 0x6c74 <parseHidReport+0xa6>
    6c5e:	89 30       	cpi	r24, 0x09	; 9
    6c60:	09 f4       	brne	.+2      	; 0x6c64 <parseHidReport+0x96>
    6c62:	90 c0       	rjmp	.+288    	; 0x6d84 <parseHidReport+0x1b6>
    6c64:	08 f4       	brcc	.+2      	; 0x6c68 <parseHidReport+0x9a>
    6c66:	48 c0       	rjmp	.+144    	; 0x6cf8 <parseHidReport+0x12a>
    6c68:	80 3a       	cpi	r24, 0xA0	; 160
    6c6a:	11 f4       	brne	.+4      	; 0x6c70 <parseHidReport+0xa2>
    6c6c:	0c 94 3c 40 	jmp	0x8078	; 0x8078 <parseHidReport+0x14aa>
    6c70:	0c 94 30 41 	jmp	0x8260	; 0x8260 <parseHidReport+0x1692>
    6c74:	80 3b       	cpi	r24, 0xB0	; 176
    6c76:	11 f4       	brne	.+4      	; 0x6c7c <parseHidReport+0xae>
    6c78:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
    6c7c:	8d 3d       	cpi	r24, 0xDD	; 221
    6c7e:	11 f4       	brne	.+4      	; 0x6c84 <parseHidReport+0xb6>
    6c80:	0c 94 e8 40 	jmp	0x81d0	; 0x81d0 <parseHidReport+0x1602>
    6c84:	8d 3a       	cpi	r24, 0xAD	; 173
    6c86:	11 f0       	breq	.+4      	; 0x6c8c <parseHidReport+0xbe>
    6c88:	0c 94 30 41 	jmp	0x8260	; 0x8260 <parseHidReport+0x1692>
    6c8c:	0c 94 0c 41 	jmp	0x8218	; 0x8218 <parseHidReport+0x164a>
			case CMD_SET_RGB_LED:
				//set RGB Led				
				if(gReport[2] >= 0 && gReport[2] <= (NUM_RGB_LEDS-1)){
    6c90:	e0 91 52 29 	lds	r30, 0x2952	; 0x802952 <gReport+0x2>
    6c94:	e0 32       	cpi	r30, 0x20	; 32
    6c96:	10 f0       	brcs	.+4      	; 0x6c9c <parseHidReport+0xce>
    6c98:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
					setLED(ledr_look_up[gReport[2]] ,gReport[3]);
    6c9c:	00 e5       	ldi	r16, 0x50	; 80
    6c9e:	19 e2       	ldi	r17, 0x29	; 41
    6ca0:	f0 e0       	ldi	r31, 0x00	; 0
    6ca2:	ee 0f       	add	r30, r30
    6ca4:	ff 1f       	adc	r31, r31
    6ca6:	ee 58       	subi	r30, 0x8E	; 142
    6ca8:	fa 4d       	sbci	r31, 0xDA	; 218
    6caa:	d8 01       	movw	r26, r16
    6cac:	13 96       	adiw	r26, 0x03	; 3
    6cae:	6c 91       	ld	r22, X
    6cb0:	80 81       	ld	r24, Z
    6cb2:	91 81       	ldd	r25, Z+1	; 0x01
    6cb4:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
					setLED(ledg_look_up[gReport[2]] ,gReport[4]);
    6cb8:	d8 01       	movw	r26, r16
    6cba:	12 96       	adiw	r26, 0x02	; 2
    6cbc:	ec 91       	ld	r30, X
    6cbe:	12 97       	sbiw	r26, 0x02	; 2
    6cc0:	f0 e0       	ldi	r31, 0x00	; 0
    6cc2:	ee 0f       	add	r30, r30
    6cc4:	ff 1f       	adc	r31, r31
    6cc6:	ee 5c       	subi	r30, 0xCE	; 206
    6cc8:	fa 4d       	sbci	r31, 0xDA	; 218
    6cca:	14 96       	adiw	r26, 0x04	; 4
    6ccc:	6c 91       	ld	r22, X
    6cce:	80 81       	ld	r24, Z
    6cd0:	91 81       	ldd	r25, Z+1	; 0x01
    6cd2:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
					setLED(ledb_look_up[gReport[2]] ,gReport[5]);
    6cd6:	d8 01       	movw	r26, r16
    6cd8:	12 96       	adiw	r26, 0x02	; 2
    6cda:	ec 91       	ld	r30, X
    6cdc:	12 97       	sbiw	r26, 0x02	; 2
    6cde:	f0 e0       	ldi	r31, 0x00	; 0
    6ce0:	ee 0f       	add	r30, r30
    6ce2:	ff 1f       	adc	r31, r31
    6ce4:	ee 50       	subi	r30, 0x0E	; 14
    6ce6:	fb 4d       	sbci	r31, 0xDB	; 219
    6ce8:	15 96       	adiw	r26, 0x05	; 5
    6cea:	6c 91       	ld	r22, X
    6cec:	80 81       	ld	r24, Z
    6cee:	91 81       	ldd	r25, Z+1	; 0x01
    6cf0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
    6cf4:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
				}	
				break;
			case CMD_GET_RGB_LED:
				//get RGB Led
				if(gReport[2] >= 0 && gReport[2] <= (NUM_RGB_LEDS-1)){
    6cf8:	e0 91 52 29 	lds	r30, 0x2952	; 0x802952 <gReport+0x2>
    6cfc:	e0 32       	cpi	r30, 0x20	; 32
    6cfe:	10 f0       	brcs	.+4      	; 0x6d04 <parseHidReport+0x136>
    6d00:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
					getLED(ledr_look_up[gReport[2]] ,&ledRed);
    6d04:	f0 e0       	ldi	r31, 0x00	; 0
    6d06:	ee 0f       	add	r30, r30
    6d08:	ff 1f       	adc	r31, r31
    6d0a:	ee 58       	subi	r30, 0x8E	; 142
    6d0c:	fa 4d       	sbci	r31, 0xDA	; 218
    6d0e:	be 01       	movw	r22, r28
    6d10:	6f 5f       	subi	r22, 0xFF	; 255
    6d12:	7f 4f       	sbci	r23, 0xFF	; 255
    6d14:	80 81       	ld	r24, Z
    6d16:	91 81       	ldd	r25, Z+1	; 0x01
    6d18:	0e 94 46 22 	call	0x448c	; 0x448c <getLED>
					getLED(ledg_look_up[gReport[2]] ,&ledGreen);
    6d1c:	00 e5       	ldi	r16, 0x50	; 80
    6d1e:	19 e2       	ldi	r17, 0x29	; 41
    6d20:	d8 01       	movw	r26, r16
    6d22:	12 96       	adiw	r26, 0x02	; 2
    6d24:	ec 91       	ld	r30, X
    6d26:	f0 e0       	ldi	r31, 0x00	; 0
    6d28:	ee 0f       	add	r30, r30
    6d2a:	ff 1f       	adc	r31, r31
    6d2c:	ee 5c       	subi	r30, 0xCE	; 206
    6d2e:	fa 4d       	sbci	r31, 0xDA	; 218
    6d30:	be 01       	movw	r22, r28
    6d32:	6e 5f       	subi	r22, 0xFE	; 254
    6d34:	7f 4f       	sbci	r23, 0xFF	; 255
    6d36:	80 81       	ld	r24, Z
    6d38:	91 81       	ldd	r25, Z+1	; 0x01
    6d3a:	0e 94 46 22 	call	0x448c	; 0x448c <getLED>
					getLED(ledb_look_up[gReport[2]] ,&ledBlue);
    6d3e:	d8 01       	movw	r26, r16
    6d40:	12 96       	adiw	r26, 0x02	; 2
    6d42:	ec 91       	ld	r30, X
    6d44:	f0 e0       	ldi	r31, 0x00	; 0
    6d46:	ee 0f       	add	r30, r30
    6d48:	ff 1f       	adc	r31, r31
    6d4a:	ee 50       	subi	r30, 0x0E	; 14
    6d4c:	fb 4d       	sbci	r31, 0xDB	; 219
    6d4e:	be 01       	movw	r22, r28
    6d50:	6d 5f       	subi	r22, 0xFD	; 253
    6d52:	7f 4f       	sbci	r23, 0xFF	; 255
    6d54:	80 81       	ld	r24, Z
    6d56:	91 81       	ldd	r25, Z+1	; 0x01
    6d58:	0e 94 46 22 	call	0x448c	; 0x448c <getLED>
					
					howler_hid_report[0] = HOWLER_ID; //eventually make howlerid
    6d5c:	ed e1       	ldi	r30, 0x1D	; 29
    6d5e:	fa e2       	ldi	r31, 0x2A	; 42
    6d60:	8e ec       	ldi	r24, 0xCE	; 206
    6d62:	80 83       	st	Z, r24
					howler_hid_report[1] = CMD_GET_RGB_LED;
    6d64:	88 e0       	ldi	r24, 0x08	; 8
    6d66:	81 83       	std	Z+1, r24	; 0x01
					howler_hid_report[2] = ledRed;
    6d68:	89 81       	ldd	r24, Y+1	; 0x01
    6d6a:	82 83       	std	Z+2, r24	; 0x02
					howler_hid_report[3] = ledGreen;
    6d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    6d6e:	83 83       	std	Z+3, r24	; 0x03
					howler_hid_report[4] = ledBlue;
    6d70:	8b 81       	ldd	r24, Y+3	; 0x03
    6d72:	84 83       	std	Z+4, r24	; 0x04
					howler_hid_report[5] = 0x00;
    6d74:	15 82       	std	Z+5, r1	; 0x05
					howler_hid_report[6] = 0x00;
    6d76:	16 82       	std	Z+6, r1	; 0x06
					howler_hid_report[7] = 0x00;
    6d78:	17 82       	std	Z+7, r1	; 0x07
					udi_hid_generic_send_report_in(howler_hid_report);
    6d7a:	cf 01       	movw	r24, r30
    6d7c:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
    6d80:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
				}
				break;
			case CMD_SET_RGB_LED_BANK:
				//set RGB Led Bank
				if(gReport[2] >= 1 && gReport[2] <= 6){	
    6d84:	80 91 52 29 	lds	r24, 0x2952	; 0x802952 <gReport+0x2>
    6d88:	9f ef       	ldi	r25, 0xFF	; 255
    6d8a:	98 0f       	add	r25, r24
    6d8c:	96 30       	cpi	r25, 0x06	; 6
    6d8e:	10 f0       	brcs	.+4      	; 0x6d94 <parseHidReport+0x1c6>
    6d90:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
    6d94:	e3 e5       	ldi	r30, 0x53	; 83
    6d96:	f9 e2       	ldi	r31, 0x29	; 41
    6d98:	de 01       	movw	r26, r28
    6d9a:	14 96       	adiw	r26, 0x04	; 4
    6d9c:	23 e6       	ldi	r18, 0x63	; 99
    6d9e:	39 e2       	ldi	r19, 0x29	; 41
					
					for(i = 0; i < 16; i++)
					{
						bankValues[i] = gReport[i + 3];
    6da0:	91 91       	ld	r25, Z+
    6da2:	9d 93       	st	X+, r25
				break;
			case CMD_SET_RGB_LED_BANK:
				//set RGB Led Bank
				if(gReport[2] >= 1 && gReport[2] <= 6){	
					
					for(i = 0; i < 16; i++)
    6da4:	e2 17       	cp	r30, r18
    6da6:	f3 07       	cpc	r31, r19
    6da8:	d9 f7       	brne	.-10     	; 0x6da0 <parseHidReport+0x1d2>
					{
						bankValues[i] = gReport[i + 3];
					}
								
					setLEDBank(gReport[2], bankValues);
    6daa:	be 01       	movw	r22, r28
    6dac:	6c 5f       	subi	r22, 0xFC	; 252
    6dae:	7f 4f       	sbci	r23, 0xFF	; 255
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	0e 94 22 22 	call	0x4444	; 0x4444 <setLEDBank>
    6db6:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
				}
				break;
				
			case CMD_SET_INDIVIDUAL_LED:
				//set individual LED
				if(gReport[2] >= 0 && gReport[2] <= (NUM_LEDS-1)){
    6dba:	e0 91 52 29 	lds	r30, 0x2952	; 0x802952 <gReport+0x2>
    6dbe:	e0 36       	cpi	r30, 0x60	; 96
    6dc0:	10 f0       	brcs	.+4      	; 0x6dc6 <parseHidReport+0x1f8>
    6dc2:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
					setLED(led_look_up[gReport[2]] ,gReport[3]);
    6dc6:	f0 e0       	ldi	r31, 0x00	; 0
    6dc8:	ee 0f       	add	r30, r30
    6dca:	ff 1f       	adc	r31, r31
    6dcc:	ee 5c       	subi	r30, 0xCE	; 206
    6dce:	fb 4d       	sbci	r31, 0xDB	; 219
    6dd0:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
    6dd4:	80 81       	ld	r24, Z
    6dd6:	91 81       	ldd	r25, Z+1	; 0x01
    6dd8:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
    6ddc:	0c 94 40 41 	jmp	0x8280	; 0x8280 <parseHidReport+0x16b2>
				}
				break;
			case CMD_SET_INPUT:
				//Set Input, Sets the input type and value of the specified Input
				if(gReport[2] >= JOY1_U_LKUP_INDEX && gReport[2] <= JOY1_R_LKUP_INDEX){
    6de0:	e0 91 52 29 	lds	r30, 0x2952	; 0x802952 <gReport+0x2>
    6de4:	e4 30       	cpi	r30, 0x04	; 4
    6de6:	08 f0       	brcs	.+2      	; 0x6dea <parseHidReport+0x21c>
    6de8:	d2 c1       	rjmp	.+932    	; 0x718e <parseHidReport+0x5c0>
					//JOY1 Digital AND Analog Axis
					if(gReport[3] == IT_NOTHING){
    6dea:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
    6dee:	61 11       	cpse	r22, r1
    6df0:	43 c0       	rjmp	.+134    	; 0x6e78 <parseHidReport+0x2aa>
						//No assignment for this pin
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    6df2:	f0 e0       	ldi	r31, 0x00	; 0
    6df4:	ee 0f       	add	r30, r30
    6df6:	ff 1f       	adc	r31, r31
    6df8:	ec 5d       	subi	r30, 0xDC	; 220
    6dfa:	fc 4d       	sbci	r31, 0xDC	; 220
    6dfc:	80 81       	ld	r24, Z
    6dfe:	91 81       	ldd	r25, Z+1	; 0x01
    6e00:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    6e04:	00 e5       	ldi	r16, 0x50	; 80
    6e06:	19 e2       	ldi	r17, 0x29	; 41
    6e08:	d8 01       	movw	r26, r16
    6e0a:	12 96       	adiw	r26, 0x02	; 2
    6e0c:	ec 91       	ld	r30, X
    6e0e:	12 97       	sbiw	r26, 0x02	; 2
    6e10:	f0 e0       	ldi	r31, 0x00	; 0
    6e12:	ee 0f       	add	r30, r30
    6e14:	ff 1f       	adc	r31, r31
    6e16:	e8 52       	subi	r30, 0x28	; 40
    6e18:	fc 4d       	sbci	r31, 0xDC	; 220
    6e1a:	14 96       	adiw	r26, 0x04	; 4
    6e1c:	6c 91       	ld	r22, X
    6e1e:	80 81       	ld	r24, Z
    6e20:	91 81       	ldd	r25, Z+1	; 0x01
    6e22:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    6e26:	d8 01       	movw	r26, r16
    6e28:	12 96       	adiw	r26, 0x02	; 2
    6e2a:	ec 91       	ld	r30, X
    6e2c:	12 97       	sbiw	r26, 0x02	; 2
    6e2e:	f0 e0       	ldi	r31, 0x00	; 0
    6e30:	ee 0f       	add	r30, r30
    6e32:	ff 1f       	adc	r31, r31
    6e34:	e2 58       	subi	r30, 0x82	; 130
    6e36:	fc 4d       	sbci	r31, 0xDC	; 220
    6e38:	15 96       	adiw	r26, 0x05	; 5
    6e3a:	6c 91       	ld	r22, X
    6e3c:	80 81       	ld	r24, Z
    6e3e:	91 81       	ldd	r25, Z+1	; 0x01
    6e40:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    6e44:	f8 01       	movw	r30, r16
    6e46:	82 81       	ldd	r24, Z+2	; 0x02
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	fc 01       	movw	r30, r24
    6e4c:	e0 53       	subi	r30, 0x30	; 48
    6e4e:	f6 4d       	sbci	r31, 0xD6	; 214
    6e50:	d8 01       	movw	r26, r16
    6e52:	13 96       	adiw	r26, 0x03	; 3
    6e54:	2c 91       	ld	r18, X
    6e56:	13 97       	sbiw	r26, 0x03	; 3
    6e58:	20 83       	st	Z, r18
						input_value_lookup[gReport[2]] = gReport[4];
    6e5a:	fc 01       	movw	r30, r24
    6e5c:	ed 55       	subi	r30, 0x5D	; 93
    6e5e:	f6 4d       	sbci	r31, 0xD6	; 214
    6e60:	14 96       	adiw	r26, 0x04	; 4
    6e62:	2c 91       	ld	r18, X
    6e64:	14 97       	sbiw	r26, 0x04	; 4
    6e66:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    6e68:	fc 01       	movw	r30, r24
    6e6a:	ea 58       	subi	r30, 0x8A	; 138
    6e6c:	f6 4d       	sbci	r31, 0xD6	; 214
    6e6e:	15 96       	adiw	r26, 0x05	; 5
    6e70:	2c 91       	ld	r18, X
    6e72:	20 83       	st	Z, r18
						controlSet = 1;
    6e74:	11 e0       	ldi	r17, 0x01	; 1
    6e76:	8c c1       	rjmp	.+792    	; 0x7190 <parseHidReport+0x5c2>
					}
					else if((gReport[3] == IT_JOY1_BUTTON)||(gReport[3] == IT_JOY2_BUTTON)){
    6e78:	8f ef       	ldi	r24, 0xFF	; 255
    6e7a:	86 0f       	add	r24, r22
    6e7c:	82 30       	cpi	r24, 0x02	; 2
    6e7e:	08 f0       	brcs	.+2      	; 0x6e82 <parseHidReport+0x2b4>
    6e80:	4a c0       	rjmp	.+148    	; 0x6f16 <parseHidReport+0x348>
						//Joystick Button
						if(gReport[4] > 0 && gReport[4] <= NUM_JOYSTICK_BUTTONS){
    6e82:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    6e86:	81 50       	subi	r24, 0x01	; 1
    6e88:	80 32       	cpi	r24, 0x20	; 32
    6e8a:	10 f0       	brcs	.+4      	; 0x6e90 <parseHidReport+0x2c2>
    6e8c:	0c 94 49 41 	jmp	0x8292	; 0x8292 <parseHidReport+0x16c4>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    6e90:	f0 e0       	ldi	r31, 0x00	; 0
    6e92:	ee 0f       	add	r30, r30
    6e94:	ff 1f       	adc	r31, r31
    6e96:	ec 5d       	subi	r30, 0xDC	; 220
    6e98:	fc 4d       	sbci	r31, 0xDC	; 220
    6e9a:	80 81       	ld	r24, Z
    6e9c:	91 81       	ldd	r25, Z+1	; 0x01
    6e9e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    6ea2:	00 e5       	ldi	r16, 0x50	; 80
    6ea4:	19 e2       	ldi	r17, 0x29	; 41
    6ea6:	d8 01       	movw	r26, r16
    6ea8:	12 96       	adiw	r26, 0x02	; 2
    6eaa:	ec 91       	ld	r30, X
    6eac:	12 97       	sbiw	r26, 0x02	; 2
    6eae:	f0 e0       	ldi	r31, 0x00	; 0
    6eb0:	ee 0f       	add	r30, r30
    6eb2:	ff 1f       	adc	r31, r31
    6eb4:	e8 52       	subi	r30, 0x28	; 40
    6eb6:	fc 4d       	sbci	r31, 0xDC	; 220
    6eb8:	14 96       	adiw	r26, 0x04	; 4
    6eba:	6c 91       	ld	r22, X
    6ebc:	80 81       	ld	r24, Z
    6ebe:	91 81       	ldd	r25, Z+1	; 0x01
    6ec0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    6ec4:	d8 01       	movw	r26, r16
    6ec6:	12 96       	adiw	r26, 0x02	; 2
    6ec8:	ec 91       	ld	r30, X
    6eca:	12 97       	sbiw	r26, 0x02	; 2
    6ecc:	f0 e0       	ldi	r31, 0x00	; 0
    6ece:	ee 0f       	add	r30, r30
    6ed0:	ff 1f       	adc	r31, r31
    6ed2:	e2 58       	subi	r30, 0x82	; 130
    6ed4:	fc 4d       	sbci	r31, 0xDC	; 220
    6ed6:	15 96       	adiw	r26, 0x05	; 5
    6ed8:	6c 91       	ld	r22, X
    6eda:	80 81       	ld	r24, Z
    6edc:	91 81       	ldd	r25, Z+1	; 0x01
    6ede:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    6ee2:	f8 01       	movw	r30, r16
    6ee4:	82 81       	ldd	r24, Z+2	; 0x02
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	fc 01       	movw	r30, r24
    6eea:	e0 53       	subi	r30, 0x30	; 48
    6eec:	f6 4d       	sbci	r31, 0xD6	; 214
    6eee:	d8 01       	movw	r26, r16
    6ef0:	13 96       	adiw	r26, 0x03	; 3
    6ef2:	2c 91       	ld	r18, X
    6ef4:	13 97       	sbiw	r26, 0x03	; 3
    6ef6:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    6ef8:	fc 01       	movw	r30, r24
    6efa:	ed 55       	subi	r30, 0x5D	; 93
    6efc:	f6 4d       	sbci	r31, 0xD6	; 214
    6efe:	14 96       	adiw	r26, 0x04	; 4
    6f00:	2c 91       	ld	r18, X
    6f02:	14 97       	sbiw	r26, 0x04	; 4
    6f04:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    6f06:	fc 01       	movw	r30, r24
    6f08:	ea 58       	subi	r30, 0x8A	; 138
    6f0a:	f6 4d       	sbci	r31, 0xD6	; 214
    6f0c:	15 96       	adiw	r26, 0x05	; 5
    6f0e:	2c 91       	ld	r18, X
    6f10:	20 83       	st	Z, r18
							controlSet = 1;
    6f12:	11 e0       	ldi	r17, 0x01	; 1
    6f14:	3d c1       	rjmp	.+634    	; 0x7190 <parseHidReport+0x5c2>
						}
					}
					else if(gReport[3] == IT_KEYBOARD){
    6f16:	63 30       	cpi	r22, 0x03	; 3
    6f18:	09 f0       	breq	.+2      	; 0x6f1c <parseHidReport+0x34e>
    6f1a:	53 c0       	rjmp	.+166    	; 0x6fc2 <parseHidReport+0x3f4>
						//Keyboard Button
						//check for valid key (0 if only modifier key is being sent)
						if((gReport[4] == 0) ||(gReport[4] >= HID_A && gReport[4] <= HID_KEYPAD_0)){
    6f1c:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    6f20:	88 23       	and	r24, r24
    6f22:	29 f0       	breq	.+10     	; 0x6f2e <parseHidReport+0x360>
    6f24:	84 50       	subi	r24, 0x04	; 4
    6f26:	8f 35       	cpi	r24, 0x5F	; 95
    6f28:	10 f0       	brcs	.+4      	; 0x6f2e <parseHidReport+0x360>
    6f2a:	0c 94 49 41 	jmp	0x8292	; 0x8292 <parseHidReport+0x16c4>
							//check for valid modifier key (0 if no modifier key)
							if((gReport[5] == 0) ||(gReport[5] >= HID_MODIFIER_NONE && gReport[5] <= HID_MODIFIER_RIGHT_UI)){
    6f2e:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <gReport+0x5>
    6f32:	81 38       	cpi	r24, 0x81	; 129
    6f34:	10 f0       	brcs	.+4      	; 0x6f3a <parseHidReport+0x36c>
    6f36:	0c 94 49 41 	jmp	0x8292	; 0x8292 <parseHidReport+0x16c4>
								eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    6f3a:	f0 e0       	ldi	r31, 0x00	; 0
    6f3c:	ee 0f       	add	r30, r30
    6f3e:	ff 1f       	adc	r31, r31
    6f40:	ec 5d       	subi	r30, 0xDC	; 220
    6f42:	fc 4d       	sbci	r31, 0xDC	; 220
    6f44:	63 e0       	ldi	r22, 0x03	; 3
    6f46:	80 81       	ld	r24, Z
    6f48:	91 81       	ldd	r25, Z+1	; 0x01
    6f4a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    6f4e:	00 e5       	ldi	r16, 0x50	; 80
    6f50:	19 e2       	ldi	r17, 0x29	; 41
    6f52:	d8 01       	movw	r26, r16
    6f54:	12 96       	adiw	r26, 0x02	; 2
    6f56:	ec 91       	ld	r30, X
    6f58:	12 97       	sbiw	r26, 0x02	; 2
    6f5a:	f0 e0       	ldi	r31, 0x00	; 0
    6f5c:	ee 0f       	add	r30, r30
    6f5e:	ff 1f       	adc	r31, r31
    6f60:	e8 52       	subi	r30, 0x28	; 40
    6f62:	fc 4d       	sbci	r31, 0xDC	; 220
    6f64:	14 96       	adiw	r26, 0x04	; 4
    6f66:	6c 91       	ld	r22, X
    6f68:	80 81       	ld	r24, Z
    6f6a:	91 81       	ldd	r25, Z+1	; 0x01
    6f6c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    6f70:	d8 01       	movw	r26, r16
    6f72:	12 96       	adiw	r26, 0x02	; 2
    6f74:	ec 91       	ld	r30, X
    6f76:	12 97       	sbiw	r26, 0x02	; 2
    6f78:	f0 e0       	ldi	r31, 0x00	; 0
    6f7a:	ee 0f       	add	r30, r30
    6f7c:	ff 1f       	adc	r31, r31
    6f7e:	e2 58       	subi	r30, 0x82	; 130
    6f80:	fc 4d       	sbci	r31, 0xDC	; 220
    6f82:	15 96       	adiw	r26, 0x05	; 5
    6f84:	6c 91       	ld	r22, X
    6f86:	80 81       	ld	r24, Z
    6f88:	91 81       	ldd	r25, Z+1	; 0x01
    6f8a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								input_type_lookup[gReport[2]] = gReport[3];
    6f8e:	f8 01       	movw	r30, r16
    6f90:	82 81       	ldd	r24, Z+2	; 0x02
    6f92:	90 e0       	ldi	r25, 0x00	; 0
    6f94:	fc 01       	movw	r30, r24
    6f96:	e0 53       	subi	r30, 0x30	; 48
    6f98:	f6 4d       	sbci	r31, 0xD6	; 214
    6f9a:	d8 01       	movw	r26, r16
    6f9c:	13 96       	adiw	r26, 0x03	; 3
    6f9e:	2c 91       	ld	r18, X
    6fa0:	13 97       	sbiw	r26, 0x03	; 3
    6fa2:	20 83       	st	Z, r18
								input_value_lookup[gReport[2]] = gReport[4];
    6fa4:	fc 01       	movw	r30, r24
    6fa6:	ed 55       	subi	r30, 0x5D	; 93
    6fa8:	f6 4d       	sbci	r31, 0xD6	; 214
    6faa:	14 96       	adiw	r26, 0x04	; 4
    6fac:	2c 91       	ld	r18, X
    6fae:	14 97       	sbiw	r26, 0x04	; 4
    6fb0:	20 83       	st	Z, r18
								input_value2_lookup[gReport[2]] = gReport[5];
    6fb2:	fc 01       	movw	r30, r24
    6fb4:	ea 58       	subi	r30, 0x8A	; 138
    6fb6:	f6 4d       	sbci	r31, 0xD6	; 214
    6fb8:	15 96       	adiw	r26, 0x05	; 5
    6fba:	2c 91       	ld	r18, X
    6fbc:	20 83       	st	Z, r18
								controlSet = 1;
    6fbe:	11 e0       	ldi	r17, 0x01	; 1
    6fc0:	e7 c0       	rjmp	.+462    	; 0x7190 <parseHidReport+0x5c2>
							}
						}
					}
					else if(gReport[3] == IT_MOUSE_BUTTON){
    6fc2:	64 30       	cpi	r22, 0x04	; 4
    6fc4:	09 f0       	breq	.+2      	; 0x6fc8 <parseHidReport+0x3fa>
    6fc6:	4a c0       	rjmp	.+148    	; 0x705c <parseHidReport+0x48e>
						//Mouse Button
						if(gReport[4] > 0 && gReport[4] <= NUM_MOUSE_BUTTONS){
    6fc8:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    6fcc:	81 50       	subi	r24, 0x01	; 1
    6fce:	83 30       	cpi	r24, 0x03	; 3
    6fd0:	10 f0       	brcs	.+4      	; 0x6fd6 <parseHidReport+0x408>
    6fd2:	0c 94 49 41 	jmp	0x8292	; 0x8292 <parseHidReport+0x16c4>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    6fd6:	f0 e0       	ldi	r31, 0x00	; 0
    6fd8:	ee 0f       	add	r30, r30
    6fda:	ff 1f       	adc	r31, r31
    6fdc:	ec 5d       	subi	r30, 0xDC	; 220
    6fde:	fc 4d       	sbci	r31, 0xDC	; 220
    6fe0:	80 81       	ld	r24, Z
    6fe2:	91 81       	ldd	r25, Z+1	; 0x01
    6fe4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    6fe8:	00 e5       	ldi	r16, 0x50	; 80
    6fea:	19 e2       	ldi	r17, 0x29	; 41
    6fec:	d8 01       	movw	r26, r16
    6fee:	12 96       	adiw	r26, 0x02	; 2
    6ff0:	ec 91       	ld	r30, X
    6ff2:	12 97       	sbiw	r26, 0x02	; 2
    6ff4:	f0 e0       	ldi	r31, 0x00	; 0
    6ff6:	ee 0f       	add	r30, r30
    6ff8:	ff 1f       	adc	r31, r31
    6ffa:	e8 52       	subi	r30, 0x28	; 40
    6ffc:	fc 4d       	sbci	r31, 0xDC	; 220
    6ffe:	14 96       	adiw	r26, 0x04	; 4
    7000:	6c 91       	ld	r22, X
    7002:	80 81       	ld	r24, Z
    7004:	91 81       	ldd	r25, Z+1	; 0x01
    7006:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    700a:	d8 01       	movw	r26, r16
    700c:	12 96       	adiw	r26, 0x02	; 2
    700e:	ec 91       	ld	r30, X
    7010:	12 97       	sbiw	r26, 0x02	; 2
    7012:	f0 e0       	ldi	r31, 0x00	; 0
    7014:	ee 0f       	add	r30, r30
    7016:	ff 1f       	adc	r31, r31
    7018:	e2 58       	subi	r30, 0x82	; 130
    701a:	fc 4d       	sbci	r31, 0xDC	; 220
    701c:	15 96       	adiw	r26, 0x05	; 5
    701e:	6c 91       	ld	r22, X
    7020:	80 81       	ld	r24, Z
    7022:	91 81       	ldd	r25, Z+1	; 0x01
    7024:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    7028:	f8 01       	movw	r30, r16
    702a:	82 81       	ldd	r24, Z+2	; 0x02
    702c:	90 e0       	ldi	r25, 0x00	; 0
    702e:	fc 01       	movw	r30, r24
    7030:	e0 53       	subi	r30, 0x30	; 48
    7032:	f6 4d       	sbci	r31, 0xD6	; 214
    7034:	d8 01       	movw	r26, r16
    7036:	13 96       	adiw	r26, 0x03	; 3
    7038:	2c 91       	ld	r18, X
    703a:	13 97       	sbiw	r26, 0x03	; 3
    703c:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    703e:	fc 01       	movw	r30, r24
    7040:	ed 55       	subi	r30, 0x5D	; 93
    7042:	f6 4d       	sbci	r31, 0xD6	; 214
    7044:	14 96       	adiw	r26, 0x04	; 4
    7046:	2c 91       	ld	r18, X
    7048:	14 97       	sbiw	r26, 0x04	; 4
    704a:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    704c:	fc 01       	movw	r30, r24
    704e:	ea 58       	subi	r30, 0x8A	; 138
    7050:	f6 4d       	sbci	r31, 0xD6	; 214
    7052:	15 96       	adiw	r26, 0x05	; 5
    7054:	2c 91       	ld	r18, X
    7056:	20 83       	st	Z, r18
							controlSet = 1;
    7058:	11 e0       	ldi	r17, 0x01	; 1
    705a:	9a c0       	rjmp	.+308    	; 0x7190 <parseHidReport+0x5c2>
						}
					}
					else if((gReport[3] >= IT_JOY1_DIG_THROTTLE && gReport[3] <= IT_JOY1_DIG_SLIDER)||(gReport[3] >= IT_JOY2_DIG_THROTTLE && gReport[3] <= IT_JOY2_DIG_SLIDER)){
    705c:	80 ef       	ldi	r24, 0xF0	; 240
    705e:	86 0f       	add	r24, r22
    7060:	88 30       	cpi	r24, 0x08	; 8
    7062:	28 f0       	brcs	.+10     	; 0x706e <parseHidReport+0x4a0>
    7064:	80 ec       	ldi	r24, 0xC0	; 192
    7066:	86 0f       	add	r24, r22
    7068:	88 30       	cpi	r24, 0x08	; 8
    706a:	08 f0       	brcs	.+2      	; 0x706e <parseHidReport+0x4a0>
    706c:	43 c0       	rjmp	.+134    	; 0x70f4 <parseHidReport+0x526>
						//Digital Axis
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    706e:	f0 e0       	ldi	r31, 0x00	; 0
    7070:	ee 0f       	add	r30, r30
    7072:	ff 1f       	adc	r31, r31
    7074:	ec 5d       	subi	r30, 0xDC	; 220
    7076:	fc 4d       	sbci	r31, 0xDC	; 220
    7078:	80 81       	ld	r24, Z
    707a:	91 81       	ldd	r25, Z+1	; 0x01
    707c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7080:	00 e5       	ldi	r16, 0x50	; 80
    7082:	19 e2       	ldi	r17, 0x29	; 41
    7084:	d8 01       	movw	r26, r16
    7086:	12 96       	adiw	r26, 0x02	; 2
    7088:	ec 91       	ld	r30, X
    708a:	12 97       	sbiw	r26, 0x02	; 2
    708c:	f0 e0       	ldi	r31, 0x00	; 0
    708e:	ee 0f       	add	r30, r30
    7090:	ff 1f       	adc	r31, r31
    7092:	e8 52       	subi	r30, 0x28	; 40
    7094:	fc 4d       	sbci	r31, 0xDC	; 220
    7096:	14 96       	adiw	r26, 0x04	; 4
    7098:	6c 91       	ld	r22, X
    709a:	80 81       	ld	r24, Z
    709c:	91 81       	ldd	r25, Z+1	; 0x01
    709e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    70a2:	d8 01       	movw	r26, r16
    70a4:	12 96       	adiw	r26, 0x02	; 2
    70a6:	ec 91       	ld	r30, X
    70a8:	12 97       	sbiw	r26, 0x02	; 2
    70aa:	f0 e0       	ldi	r31, 0x00	; 0
    70ac:	ee 0f       	add	r30, r30
    70ae:	ff 1f       	adc	r31, r31
    70b0:	e2 58       	subi	r30, 0x82	; 130
    70b2:	fc 4d       	sbci	r31, 0xDC	; 220
    70b4:	15 96       	adiw	r26, 0x05	; 5
    70b6:	6c 91       	ld	r22, X
    70b8:	80 81       	ld	r24, Z
    70ba:	91 81       	ldd	r25, Z+1	; 0x01
    70bc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    70c0:	f8 01       	movw	r30, r16
    70c2:	82 81       	ldd	r24, Z+2	; 0x02
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	fc 01       	movw	r30, r24
    70c8:	e0 53       	subi	r30, 0x30	; 48
    70ca:	f6 4d       	sbci	r31, 0xD6	; 214
    70cc:	d8 01       	movw	r26, r16
    70ce:	13 96       	adiw	r26, 0x03	; 3
    70d0:	2c 91       	ld	r18, X
    70d2:	13 97       	sbiw	r26, 0x03	; 3
    70d4:	20 83       	st	Z, r18
						//axis value
						input_value_lookup[gReport[2]] = gReport[4];
    70d6:	fc 01       	movw	r30, r24
    70d8:	ed 55       	subi	r30, 0x5D	; 93
    70da:	f6 4d       	sbci	r31, 0xD6	; 214
    70dc:	14 96       	adiw	r26, 0x04	; 4
    70de:	2c 91       	ld	r18, X
    70e0:	14 97       	sbiw	r26, 0x04	; 4
    70e2:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    70e4:	fc 01       	movw	r30, r24
    70e6:	ea 58       	subi	r30, 0x8A	; 138
    70e8:	f6 4d       	sbci	r31, 0xD6	; 214
    70ea:	15 96       	adiw	r26, 0x05	; 5
    70ec:	2c 91       	ld	r18, X
    70ee:	20 83       	st	Z, r18
						controlSet = 1;
    70f0:	11 e0       	ldi	r17, 0x01	; 1
    70f2:	4e c0       	rjmp	.+156    	; 0x7190 <parseHidReport+0x5c2>
						
					}
					else if((gReport[3] >= IT_JOY1_ANA_THROTTLE && gReport[3] <= IT_JOY1_ANA_SLIDER)||(gReport[3] >= IT_JOY2_ANA_THROTTLE && gReport[3] <= IT_JOY2_ANA_SLIDER)){
    70f4:	80 ee       	ldi	r24, 0xE0	; 224
    70f6:	86 0f       	add	r24, r22
    70f8:	88 30       	cpi	r24, 0x08	; 8
    70fa:	30 f0       	brcs	.+12     	; 0x7108 <parseHidReport+0x53a>
    70fc:	80 e8       	ldi	r24, 0x80	; 128
    70fe:	86 0f       	add	r24, r22
    7100:	88 30       	cpi	r24, 0x08	; 8
    7102:	10 f0       	brcs	.+4      	; 0x7108 <parseHidReport+0x53a>
    7104:	0c 94 49 41 	jmp	0x8292	; 0x8292 <parseHidReport+0x16c4>
						//Analog Axis
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7108:	f0 e0       	ldi	r31, 0x00	; 0
    710a:	ee 0f       	add	r30, r30
    710c:	ff 1f       	adc	r31, r31
    710e:	ec 5d       	subi	r30, 0xDC	; 220
    7110:	fc 4d       	sbci	r31, 0xDC	; 220
    7112:	80 81       	ld	r24, Z
    7114:	91 81       	ldd	r25, Z+1	; 0x01
    7116:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    711a:	00 e5       	ldi	r16, 0x50	; 80
    711c:	19 e2       	ldi	r17, 0x29	; 41
    711e:	d8 01       	movw	r26, r16
    7120:	12 96       	adiw	r26, 0x02	; 2
    7122:	ec 91       	ld	r30, X
    7124:	12 97       	sbiw	r26, 0x02	; 2
    7126:	f0 e0       	ldi	r31, 0x00	; 0
    7128:	ee 0f       	add	r30, r30
    712a:	ff 1f       	adc	r31, r31
    712c:	e8 52       	subi	r30, 0x28	; 40
    712e:	fc 4d       	sbci	r31, 0xDC	; 220
    7130:	14 96       	adiw	r26, 0x04	; 4
    7132:	6c 91       	ld	r22, X
    7134:	80 81       	ld	r24, Z
    7136:	91 81       	ldd	r25, Z+1	; 0x01
    7138:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    713c:	d8 01       	movw	r26, r16
    713e:	12 96       	adiw	r26, 0x02	; 2
    7140:	ec 91       	ld	r30, X
    7142:	12 97       	sbiw	r26, 0x02	; 2
    7144:	f0 e0       	ldi	r31, 0x00	; 0
    7146:	ee 0f       	add	r30, r30
    7148:	ff 1f       	adc	r31, r31
    714a:	e2 58       	subi	r30, 0x82	; 130
    714c:	fc 4d       	sbci	r31, 0xDC	; 220
    714e:	15 96       	adiw	r26, 0x05	; 5
    7150:	6c 91       	ld	r22, X
    7152:	80 81       	ld	r24, Z
    7154:	91 81       	ldd	r25, Z+1	; 0x01
    7156:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    715a:	f8 01       	movw	r30, r16
    715c:	82 81       	ldd	r24, Z+2	; 0x02
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	fc 01       	movw	r30, r24
    7162:	e0 53       	subi	r30, 0x30	; 48
    7164:	f6 4d       	sbci	r31, 0xD6	; 214
    7166:	d8 01       	movw	r26, r16
    7168:	13 96       	adiw	r26, 0x03	; 3
    716a:	2c 91       	ld	r18, X
    716c:	13 97       	sbiw	r26, 0x03	; 3
    716e:	20 83       	st	Z, r18
						//no need to set value for analog axis
						input_value_lookup[gReport[2]] = gReport[4];
    7170:	fc 01       	movw	r30, r24
    7172:	ed 55       	subi	r30, 0x5D	; 93
    7174:	f6 4d       	sbci	r31, 0xD6	; 214
    7176:	14 96       	adiw	r26, 0x04	; 4
    7178:	2c 91       	ld	r18, X
    717a:	14 97       	sbiw	r26, 0x04	; 4
    717c:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    717e:	fc 01       	movw	r30, r24
    7180:	ea 58       	subi	r30, 0x8A	; 138
    7182:	f6 4d       	sbci	r31, 0xD6	; 214
    7184:	15 96       	adiw	r26, 0x05	; 5
    7186:	2c 91       	ld	r18, X
    7188:	20 83       	st	Z, r18
						controlSet = 1;
    718a:	11 e0       	ldi	r17, 0x01	; 1
    718c:	01 c0       	rjmp	.+2      	; 0x7190 <parseHidReport+0x5c2>
	uint16_t freqX = 0;
	bool qdec_dirX = 0;
	uint16_t positionY = 0;
	uint16_t freqY = 0;
	bool qdec_dirY = 0;
	uint8_t controlSet = 0xAF;
    718e:	1f ea       	ldi	r17, 0xAF	; 175
						controlSet = 1;
					}
				}
				
				//JOY2 and JOY4_L, JOY4_R
				if((gReport[2] >= JOY2_U_LKUP_INDEX && gReport[2] <= JOY2_R_LKUP_INDEX)||(gReport[2] >= JOY4_U_LKUP_INDEX && gReport[2] <= JOY4_D_LKUP_INDEX)){
    7190:	e0 91 52 29 	lds	r30, 0x2952	; 0x802952 <gReport+0x2>
    7194:	8c ef       	ldi	r24, 0xFC	; 252
    7196:	8e 0f       	add	r24, r30
    7198:	84 30       	cpi	r24, 0x04	; 4
    719a:	28 f0       	brcs	.+10     	; 0x71a6 <parseHidReport+0x5d8>
    719c:	84 ef       	ldi	r24, 0xF4	; 244
    719e:	8e 0f       	add	r24, r30
    71a0:	82 30       	cpi	r24, 0x02	; 2
    71a2:	08 f0       	brcs	.+2      	; 0x71a6 <parseHidReport+0x5d8>
    71a4:	82 c1       	rjmp	.+772    	; 0x74aa <parseHidReport+0x8dc>
					//JOY2 and JOY4_U, JOY4_D Digital Axis
					if(gReport[3] == IT_NOTHING){
    71a6:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
    71aa:	61 11       	cpse	r22, r1
    71ac:	44 c0       	rjmp	.+136    	; 0x7236 <parseHidReport+0x668>
						//No assignment for this pin
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    71ae:	f0 e0       	ldi	r31, 0x00	; 0
    71b0:	ee 0f       	add	r30, r30
    71b2:	ff 1f       	adc	r31, r31
    71b4:	ec 5d       	subi	r30, 0xDC	; 220
    71b6:	fc 4d       	sbci	r31, 0xDC	; 220
    71b8:	80 81       	ld	r24, Z
    71ba:	91 81       	ldd	r25, Z+1	; 0x01
    71bc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    71c0:	00 e5       	ldi	r16, 0x50	; 80
    71c2:	19 e2       	ldi	r17, 0x29	; 41
    71c4:	d8 01       	movw	r26, r16
    71c6:	12 96       	adiw	r26, 0x02	; 2
    71c8:	ec 91       	ld	r30, X
    71ca:	12 97       	sbiw	r26, 0x02	; 2
    71cc:	f0 e0       	ldi	r31, 0x00	; 0
    71ce:	ee 0f       	add	r30, r30
    71d0:	ff 1f       	adc	r31, r31
    71d2:	e8 52       	subi	r30, 0x28	; 40
    71d4:	fc 4d       	sbci	r31, 0xDC	; 220
    71d6:	14 96       	adiw	r26, 0x04	; 4
    71d8:	6c 91       	ld	r22, X
    71da:	80 81       	ld	r24, Z
    71dc:	91 81       	ldd	r25, Z+1	; 0x01
    71de:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    71e2:	d8 01       	movw	r26, r16
    71e4:	12 96       	adiw	r26, 0x02	; 2
    71e6:	ec 91       	ld	r30, X
    71e8:	12 97       	sbiw	r26, 0x02	; 2
    71ea:	f0 e0       	ldi	r31, 0x00	; 0
    71ec:	ee 0f       	add	r30, r30
    71ee:	ff 1f       	adc	r31, r31
    71f0:	e2 58       	subi	r30, 0x82	; 130
    71f2:	fc 4d       	sbci	r31, 0xDC	; 220
    71f4:	15 96       	adiw	r26, 0x05	; 5
    71f6:	6c 91       	ld	r22, X
    71f8:	80 81       	ld	r24, Z
    71fa:	91 81       	ldd	r25, Z+1	; 0x01
    71fc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    7200:	f8 01       	movw	r30, r16
    7202:	82 81       	ldd	r24, Z+2	; 0x02
    7204:	90 e0       	ldi	r25, 0x00	; 0
    7206:	fc 01       	movw	r30, r24
    7208:	e0 53       	subi	r30, 0x30	; 48
    720a:	f6 4d       	sbci	r31, 0xD6	; 214
    720c:	d8 01       	movw	r26, r16
    720e:	13 96       	adiw	r26, 0x03	; 3
    7210:	2c 91       	ld	r18, X
    7212:	13 97       	sbiw	r26, 0x03	; 3
    7214:	20 83       	st	Z, r18
						input_value_lookup[gReport[2]] = gReport[4];
    7216:	fc 01       	movw	r30, r24
    7218:	ed 55       	subi	r30, 0x5D	; 93
    721a:	f6 4d       	sbci	r31, 0xD6	; 214
    721c:	14 96       	adiw	r26, 0x04	; 4
    721e:	2c 91       	ld	r18, X
    7220:	14 97       	sbiw	r26, 0x04	; 4
    7222:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    7224:	fc 01       	movw	r30, r24
    7226:	ea 58       	subi	r30, 0x8A	; 138
    7228:	f6 4d       	sbci	r31, 0xD6	; 214
    722a:	15 96       	adiw	r26, 0x05	; 5
    722c:	2c 91       	ld	r18, X
    722e:	20 83       	st	Z, r18
						controlSet = 1;
    7230:	11 e0       	ldi	r17, 0x01	; 1
    7232:	58 c6       	rjmp	.+3248   	; 0x7ee4 <parseHidReport+0x1316>
						controlSet = 1;
					}
				}
				
				//JOY2 and JOY4_L, JOY4_R
				if((gReport[2] >= JOY2_U_LKUP_INDEX && gReport[2] <= JOY2_R_LKUP_INDEX)||(gReport[2] >= JOY4_U_LKUP_INDEX && gReport[2] <= JOY4_D_LKUP_INDEX)){
    7234:	1f ea       	ldi	r17, 0xAF	; 175
						input_type_lookup[gReport[2]] = gReport[3];
						input_value_lookup[gReport[2]] = gReport[4];
						input_value2_lookup[gReport[2]] = gReport[5];
						controlSet = 1;
					}
					else if((gReport[3] == IT_JOY1_BUTTON)||(gReport[3] == IT_JOY2_BUTTON)){
    7236:	8f ef       	ldi	r24, 0xFF	; 255
    7238:	86 0f       	add	r24, r22
    723a:	82 30       	cpi	r24, 0x02	; 2
    723c:	08 f0       	brcs	.+2      	; 0x7240 <parseHidReport+0x672>
    723e:	49 c0       	rjmp	.+146    	; 0x72d2 <parseHidReport+0x704>
						//Joystick Button
						if(gReport[4] > 0 && gReport[4] <= NUM_JOYSTICK_BUTTONS){
    7240:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7244:	81 50       	subi	r24, 0x01	; 1
    7246:	80 32       	cpi	r24, 0x20	; 32
    7248:	08 f0       	brcs	.+2      	; 0x724c <parseHidReport+0x67e>
    724a:	4c c6       	rjmp	.+3224   	; 0x7ee4 <parseHidReport+0x1316>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    724c:	f0 e0       	ldi	r31, 0x00	; 0
    724e:	ee 0f       	add	r30, r30
    7250:	ff 1f       	adc	r31, r31
    7252:	ec 5d       	subi	r30, 0xDC	; 220
    7254:	fc 4d       	sbci	r31, 0xDC	; 220
    7256:	80 81       	ld	r24, Z
    7258:	91 81       	ldd	r25, Z+1	; 0x01
    725a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    725e:	00 e5       	ldi	r16, 0x50	; 80
    7260:	19 e2       	ldi	r17, 0x29	; 41
    7262:	d8 01       	movw	r26, r16
    7264:	12 96       	adiw	r26, 0x02	; 2
    7266:	ec 91       	ld	r30, X
    7268:	12 97       	sbiw	r26, 0x02	; 2
    726a:	f0 e0       	ldi	r31, 0x00	; 0
    726c:	ee 0f       	add	r30, r30
    726e:	ff 1f       	adc	r31, r31
    7270:	e8 52       	subi	r30, 0x28	; 40
    7272:	fc 4d       	sbci	r31, 0xDC	; 220
    7274:	14 96       	adiw	r26, 0x04	; 4
    7276:	6c 91       	ld	r22, X
    7278:	80 81       	ld	r24, Z
    727a:	91 81       	ldd	r25, Z+1	; 0x01
    727c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7280:	d8 01       	movw	r26, r16
    7282:	12 96       	adiw	r26, 0x02	; 2
    7284:	ec 91       	ld	r30, X
    7286:	12 97       	sbiw	r26, 0x02	; 2
    7288:	f0 e0       	ldi	r31, 0x00	; 0
    728a:	ee 0f       	add	r30, r30
    728c:	ff 1f       	adc	r31, r31
    728e:	e2 58       	subi	r30, 0x82	; 130
    7290:	fc 4d       	sbci	r31, 0xDC	; 220
    7292:	15 96       	adiw	r26, 0x05	; 5
    7294:	6c 91       	ld	r22, X
    7296:	80 81       	ld	r24, Z
    7298:	91 81       	ldd	r25, Z+1	; 0x01
    729a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    729e:	f8 01       	movw	r30, r16
    72a0:	82 81       	ldd	r24, Z+2	; 0x02
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	fc 01       	movw	r30, r24
    72a6:	e0 53       	subi	r30, 0x30	; 48
    72a8:	f6 4d       	sbci	r31, 0xD6	; 214
    72aa:	d8 01       	movw	r26, r16
    72ac:	13 96       	adiw	r26, 0x03	; 3
    72ae:	2c 91       	ld	r18, X
    72b0:	13 97       	sbiw	r26, 0x03	; 3
    72b2:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    72b4:	fc 01       	movw	r30, r24
    72b6:	ed 55       	subi	r30, 0x5D	; 93
    72b8:	f6 4d       	sbci	r31, 0xD6	; 214
    72ba:	14 96       	adiw	r26, 0x04	; 4
    72bc:	2c 91       	ld	r18, X
    72be:	14 97       	sbiw	r26, 0x04	; 4
    72c0:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    72c2:	fc 01       	movw	r30, r24
    72c4:	ea 58       	subi	r30, 0x8A	; 138
    72c6:	f6 4d       	sbci	r31, 0xD6	; 214
    72c8:	15 96       	adiw	r26, 0x05	; 5
    72ca:	2c 91       	ld	r18, X
    72cc:	20 83       	st	Z, r18
							controlSet = 1;
    72ce:	11 e0       	ldi	r17, 0x01	; 1
    72d0:	09 c6       	rjmp	.+3090   	; 0x7ee4 <parseHidReport+0x1316>
						}
					}
					else if(gReport[3] == IT_KEYBOARD){
    72d2:	63 30       	cpi	r22, 0x03	; 3
    72d4:	09 f0       	breq	.+2      	; 0x72d8 <parseHidReport+0x70a>
    72d6:	51 c0       	rjmp	.+162    	; 0x737a <parseHidReport+0x7ac>
						//Keyboard Button
						//check for valid key (0 if only modifier key is being sent)
						if((gReport[4] == 0) ||(gReport[4] >= HID_A && gReport[4] <= HID_KEYPAD_0)){
    72d8:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    72dc:	88 23       	and	r24, r24
    72de:	21 f0       	breq	.+8      	; 0x72e8 <parseHidReport+0x71a>
    72e0:	84 50       	subi	r24, 0x04	; 4
    72e2:	8f 35       	cpi	r24, 0x5F	; 95
    72e4:	08 f0       	brcs	.+2      	; 0x72e8 <parseHidReport+0x71a>
    72e6:	fe c5       	rjmp	.+3068   	; 0x7ee4 <parseHidReport+0x1316>
							//check for valid modifier key (0 if no modifier key)
							if((gReport[5] == 0) ||(gReport[5] >= HID_MODIFIER_NONE && gReport[5] <= HID_MODIFIER_RIGHT_UI)){
    72e8:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <gReport+0x5>
    72ec:	81 38       	cpi	r24, 0x81	; 129
    72ee:	08 f0       	brcs	.+2      	; 0x72f2 <parseHidReport+0x724>
    72f0:	f9 c5       	rjmp	.+3058   	; 0x7ee4 <parseHidReport+0x1316>
								eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    72f2:	f0 e0       	ldi	r31, 0x00	; 0
    72f4:	ee 0f       	add	r30, r30
    72f6:	ff 1f       	adc	r31, r31
    72f8:	ec 5d       	subi	r30, 0xDC	; 220
    72fa:	fc 4d       	sbci	r31, 0xDC	; 220
    72fc:	63 e0       	ldi	r22, 0x03	; 3
    72fe:	80 81       	ld	r24, Z
    7300:	91 81       	ldd	r25, Z+1	; 0x01
    7302:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7306:	00 e5       	ldi	r16, 0x50	; 80
    7308:	19 e2       	ldi	r17, 0x29	; 41
    730a:	d8 01       	movw	r26, r16
    730c:	12 96       	adiw	r26, 0x02	; 2
    730e:	ec 91       	ld	r30, X
    7310:	12 97       	sbiw	r26, 0x02	; 2
    7312:	f0 e0       	ldi	r31, 0x00	; 0
    7314:	ee 0f       	add	r30, r30
    7316:	ff 1f       	adc	r31, r31
    7318:	e8 52       	subi	r30, 0x28	; 40
    731a:	fc 4d       	sbci	r31, 0xDC	; 220
    731c:	14 96       	adiw	r26, 0x04	; 4
    731e:	6c 91       	ld	r22, X
    7320:	80 81       	ld	r24, Z
    7322:	91 81       	ldd	r25, Z+1	; 0x01
    7324:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7328:	d8 01       	movw	r26, r16
    732a:	12 96       	adiw	r26, 0x02	; 2
    732c:	ec 91       	ld	r30, X
    732e:	12 97       	sbiw	r26, 0x02	; 2
    7330:	f0 e0       	ldi	r31, 0x00	; 0
    7332:	ee 0f       	add	r30, r30
    7334:	ff 1f       	adc	r31, r31
    7336:	e2 58       	subi	r30, 0x82	; 130
    7338:	fc 4d       	sbci	r31, 0xDC	; 220
    733a:	15 96       	adiw	r26, 0x05	; 5
    733c:	6c 91       	ld	r22, X
    733e:	80 81       	ld	r24, Z
    7340:	91 81       	ldd	r25, Z+1	; 0x01
    7342:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								input_type_lookup[gReport[2]] = gReport[3];
    7346:	f8 01       	movw	r30, r16
    7348:	82 81       	ldd	r24, Z+2	; 0x02
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	fc 01       	movw	r30, r24
    734e:	e0 53       	subi	r30, 0x30	; 48
    7350:	f6 4d       	sbci	r31, 0xD6	; 214
    7352:	d8 01       	movw	r26, r16
    7354:	13 96       	adiw	r26, 0x03	; 3
    7356:	2c 91       	ld	r18, X
    7358:	13 97       	sbiw	r26, 0x03	; 3
    735a:	20 83       	st	Z, r18
								input_value_lookup[gReport[2]] = gReport[4];
    735c:	fc 01       	movw	r30, r24
    735e:	ed 55       	subi	r30, 0x5D	; 93
    7360:	f6 4d       	sbci	r31, 0xD6	; 214
    7362:	14 96       	adiw	r26, 0x04	; 4
    7364:	2c 91       	ld	r18, X
    7366:	14 97       	sbiw	r26, 0x04	; 4
    7368:	20 83       	st	Z, r18
								input_value2_lookup[gReport[2]] = gReport[5];
    736a:	fc 01       	movw	r30, r24
    736c:	ea 58       	subi	r30, 0x8A	; 138
    736e:	f6 4d       	sbci	r31, 0xD6	; 214
    7370:	15 96       	adiw	r26, 0x05	; 5
    7372:	2c 91       	ld	r18, X
    7374:	20 83       	st	Z, r18
								controlSet = 1;
    7376:	11 e0       	ldi	r17, 0x01	; 1
    7378:	b5 c5       	rjmp	.+2922   	; 0x7ee4 <parseHidReport+0x1316>
							}
						}
					}
					else if(gReport[3] == IT_MOUSE_BUTTON){
    737a:	64 30       	cpi	r22, 0x04	; 4
    737c:	09 f0       	breq	.+2      	; 0x7380 <parseHidReport+0x7b2>
    737e:	49 c0       	rjmp	.+146    	; 0x7412 <parseHidReport+0x844>
						//Mouse Button
						if(gReport[4] > 0 && gReport[4] <= NUM_MOUSE_BUTTONS){
    7380:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7384:	81 50       	subi	r24, 0x01	; 1
    7386:	83 30       	cpi	r24, 0x03	; 3
    7388:	08 f0       	brcs	.+2      	; 0x738c <parseHidReport+0x7be>
    738a:	ac c5       	rjmp	.+2904   	; 0x7ee4 <parseHidReport+0x1316>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    738c:	f0 e0       	ldi	r31, 0x00	; 0
    738e:	ee 0f       	add	r30, r30
    7390:	ff 1f       	adc	r31, r31
    7392:	ec 5d       	subi	r30, 0xDC	; 220
    7394:	fc 4d       	sbci	r31, 0xDC	; 220
    7396:	80 81       	ld	r24, Z
    7398:	91 81       	ldd	r25, Z+1	; 0x01
    739a:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    739e:	00 e5       	ldi	r16, 0x50	; 80
    73a0:	19 e2       	ldi	r17, 0x29	; 41
    73a2:	d8 01       	movw	r26, r16
    73a4:	12 96       	adiw	r26, 0x02	; 2
    73a6:	ec 91       	ld	r30, X
    73a8:	12 97       	sbiw	r26, 0x02	; 2
    73aa:	f0 e0       	ldi	r31, 0x00	; 0
    73ac:	ee 0f       	add	r30, r30
    73ae:	ff 1f       	adc	r31, r31
    73b0:	e8 52       	subi	r30, 0x28	; 40
    73b2:	fc 4d       	sbci	r31, 0xDC	; 220
    73b4:	14 96       	adiw	r26, 0x04	; 4
    73b6:	6c 91       	ld	r22, X
    73b8:	80 81       	ld	r24, Z
    73ba:	91 81       	ldd	r25, Z+1	; 0x01
    73bc:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    73c0:	d8 01       	movw	r26, r16
    73c2:	12 96       	adiw	r26, 0x02	; 2
    73c4:	ec 91       	ld	r30, X
    73c6:	12 97       	sbiw	r26, 0x02	; 2
    73c8:	f0 e0       	ldi	r31, 0x00	; 0
    73ca:	ee 0f       	add	r30, r30
    73cc:	ff 1f       	adc	r31, r31
    73ce:	e2 58       	subi	r30, 0x82	; 130
    73d0:	fc 4d       	sbci	r31, 0xDC	; 220
    73d2:	15 96       	adiw	r26, 0x05	; 5
    73d4:	6c 91       	ld	r22, X
    73d6:	80 81       	ld	r24, Z
    73d8:	91 81       	ldd	r25, Z+1	; 0x01
    73da:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    73de:	f8 01       	movw	r30, r16
    73e0:	82 81       	ldd	r24, Z+2	; 0x02
    73e2:	90 e0       	ldi	r25, 0x00	; 0
    73e4:	fc 01       	movw	r30, r24
    73e6:	e0 53       	subi	r30, 0x30	; 48
    73e8:	f6 4d       	sbci	r31, 0xD6	; 214
    73ea:	d8 01       	movw	r26, r16
    73ec:	13 96       	adiw	r26, 0x03	; 3
    73ee:	2c 91       	ld	r18, X
    73f0:	13 97       	sbiw	r26, 0x03	; 3
    73f2:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    73f4:	fc 01       	movw	r30, r24
    73f6:	ed 55       	subi	r30, 0x5D	; 93
    73f8:	f6 4d       	sbci	r31, 0xD6	; 214
    73fa:	14 96       	adiw	r26, 0x04	; 4
    73fc:	2c 91       	ld	r18, X
    73fe:	14 97       	sbiw	r26, 0x04	; 4
    7400:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    7402:	fc 01       	movw	r30, r24
    7404:	ea 58       	subi	r30, 0x8A	; 138
    7406:	f6 4d       	sbci	r31, 0xD6	; 214
    7408:	15 96       	adiw	r26, 0x05	; 5
    740a:	2c 91       	ld	r18, X
    740c:	20 83       	st	Z, r18
							controlSet = 1;
    740e:	11 e0       	ldi	r17, 0x01	; 1
    7410:	69 c5       	rjmp	.+2770   	; 0x7ee4 <parseHidReport+0x1316>
						}
					}
					else if((gReport[3] >= IT_JOY1_DIG_THROTTLE && gReport[3] <= IT_JOY1_DIG_SLIDER)||(gReport[3] >= IT_JOY2_DIG_THROTTLE && gReport[3] <= IT_JOY2_DIG_SLIDER)){
    7412:	80 ef       	ldi	r24, 0xF0	; 240
    7414:	86 0f       	add	r24, r22
    7416:	88 30       	cpi	r24, 0x08	; 8
    7418:	28 f0       	brcs	.+10     	; 0x7424 <parseHidReport+0x856>
    741a:	80 ec       	ldi	r24, 0xC0	; 192
    741c:	86 0f       	add	r24, r22
    741e:	88 30       	cpi	r24, 0x08	; 8
    7420:	08 f0       	brcs	.+2      	; 0x7424 <parseHidReport+0x856>
    7422:	60 c5       	rjmp	.+2752   	; 0x7ee4 <parseHidReport+0x1316>
						//Digital Axis
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7424:	f0 e0       	ldi	r31, 0x00	; 0
    7426:	ee 0f       	add	r30, r30
    7428:	ff 1f       	adc	r31, r31
    742a:	ec 5d       	subi	r30, 0xDC	; 220
    742c:	fc 4d       	sbci	r31, 0xDC	; 220
    742e:	80 81       	ld	r24, Z
    7430:	91 81       	ldd	r25, Z+1	; 0x01
    7432:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7436:	00 e5       	ldi	r16, 0x50	; 80
    7438:	19 e2       	ldi	r17, 0x29	; 41
    743a:	d8 01       	movw	r26, r16
    743c:	12 96       	adiw	r26, 0x02	; 2
    743e:	ec 91       	ld	r30, X
    7440:	12 97       	sbiw	r26, 0x02	; 2
    7442:	f0 e0       	ldi	r31, 0x00	; 0
    7444:	ee 0f       	add	r30, r30
    7446:	ff 1f       	adc	r31, r31
    7448:	e8 52       	subi	r30, 0x28	; 40
    744a:	fc 4d       	sbci	r31, 0xDC	; 220
    744c:	14 96       	adiw	r26, 0x04	; 4
    744e:	6c 91       	ld	r22, X
    7450:	80 81       	ld	r24, Z
    7452:	91 81       	ldd	r25, Z+1	; 0x01
    7454:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7458:	d8 01       	movw	r26, r16
    745a:	12 96       	adiw	r26, 0x02	; 2
    745c:	ec 91       	ld	r30, X
    745e:	12 97       	sbiw	r26, 0x02	; 2
    7460:	f0 e0       	ldi	r31, 0x00	; 0
    7462:	ee 0f       	add	r30, r30
    7464:	ff 1f       	adc	r31, r31
    7466:	e2 58       	subi	r30, 0x82	; 130
    7468:	fc 4d       	sbci	r31, 0xDC	; 220
    746a:	15 96       	adiw	r26, 0x05	; 5
    746c:	6c 91       	ld	r22, X
    746e:	80 81       	ld	r24, Z
    7470:	91 81       	ldd	r25, Z+1	; 0x01
    7472:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    7476:	f8 01       	movw	r30, r16
    7478:	82 81       	ldd	r24, Z+2	; 0x02
    747a:	90 e0       	ldi	r25, 0x00	; 0
    747c:	fc 01       	movw	r30, r24
    747e:	e0 53       	subi	r30, 0x30	; 48
    7480:	f6 4d       	sbci	r31, 0xD6	; 214
    7482:	d8 01       	movw	r26, r16
    7484:	13 96       	adiw	r26, 0x03	; 3
    7486:	2c 91       	ld	r18, X
    7488:	13 97       	sbiw	r26, 0x03	; 3
    748a:	20 83       	st	Z, r18
						//axis value
						input_value_lookup[gReport[2]] = gReport[4];
    748c:	fc 01       	movw	r30, r24
    748e:	ed 55       	subi	r30, 0x5D	; 93
    7490:	f6 4d       	sbci	r31, 0xD6	; 214
    7492:	14 96       	adiw	r26, 0x04	; 4
    7494:	2c 91       	ld	r18, X
    7496:	14 97       	sbiw	r26, 0x04	; 4
    7498:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    749a:	fc 01       	movw	r30, r24
    749c:	ea 58       	subi	r30, 0x8A	; 138
    749e:	f6 4d       	sbci	r31, 0xD6	; 214
    74a0:	15 96       	adiw	r26, 0x05	; 5
    74a2:	2c 91       	ld	r18, X
    74a4:	20 83       	st	Z, r18
						controlSet = 1;
    74a6:	11 e0       	ldi	r17, 0x01	; 1
    74a8:	1d c5       	rjmp	.+2618   	; 0x7ee4 <parseHidReport+0x1316>
						
					}
				}
				
				//JOY3 and JOY4_U, JOY4_D
				else if((gReport[2] >= JOY3_U_LKUP_INDEX && gReport[2] <= JOY3_R_LKUP_INDEX)||(gReport[2] >= JOY4_L_LKUP_INDEX && gReport[2] <= JOY4_R_LKUP_INDEX)){
    74aa:	88 ef       	ldi	r24, 0xF8	; 248
    74ac:	8e 0f       	add	r24, r30
    74ae:	84 30       	cpi	r24, 0x04	; 4
    74b0:	28 f0       	brcs	.+10     	; 0x74bc <parseHidReport+0x8ee>
    74b2:	82 ef       	ldi	r24, 0xF2	; 242
    74b4:	8e 0f       	add	r24, r30
    74b6:	82 30       	cpi	r24, 0x02	; 2
    74b8:	08 f0       	brcs	.+2      	; 0x74bc <parseHidReport+0x8ee>
    74ba:	0e c2       	rjmp	.+1052   	; 0x78d8 <parseHidReport+0xd0a>
					else{
						qdec_config_phase_pins(&gConfig1, &PORTD, 4, false, 50);
					}
					*/
					
					if(gReport[3] == IT_NOTHING){
    74bc:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
    74c0:	61 11       	cpse	r22, r1
    74c2:	43 c0       	rjmp	.+134    	; 0x754a <parseHidReport+0x97c>
						//No assignment for this pin
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    74c4:	f0 e0       	ldi	r31, 0x00	; 0
    74c6:	ee 0f       	add	r30, r30
    74c8:	ff 1f       	adc	r31, r31
    74ca:	ec 5d       	subi	r30, 0xDC	; 220
    74cc:	fc 4d       	sbci	r31, 0xDC	; 220
    74ce:	80 81       	ld	r24, Z
    74d0:	91 81       	ldd	r25, Z+1	; 0x01
    74d2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    74d6:	00 e5       	ldi	r16, 0x50	; 80
    74d8:	19 e2       	ldi	r17, 0x29	; 41
    74da:	d8 01       	movw	r26, r16
    74dc:	12 96       	adiw	r26, 0x02	; 2
    74de:	ec 91       	ld	r30, X
    74e0:	12 97       	sbiw	r26, 0x02	; 2
    74e2:	f0 e0       	ldi	r31, 0x00	; 0
    74e4:	ee 0f       	add	r30, r30
    74e6:	ff 1f       	adc	r31, r31
    74e8:	e8 52       	subi	r30, 0x28	; 40
    74ea:	fc 4d       	sbci	r31, 0xDC	; 220
    74ec:	14 96       	adiw	r26, 0x04	; 4
    74ee:	6c 91       	ld	r22, X
    74f0:	80 81       	ld	r24, Z
    74f2:	91 81       	ldd	r25, Z+1	; 0x01
    74f4:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    74f8:	d8 01       	movw	r26, r16
    74fa:	12 96       	adiw	r26, 0x02	; 2
    74fc:	ec 91       	ld	r30, X
    74fe:	12 97       	sbiw	r26, 0x02	; 2
    7500:	f0 e0       	ldi	r31, 0x00	; 0
    7502:	ee 0f       	add	r30, r30
    7504:	ff 1f       	adc	r31, r31
    7506:	e2 58       	subi	r30, 0x82	; 130
    7508:	fc 4d       	sbci	r31, 0xDC	; 220
    750a:	15 96       	adiw	r26, 0x05	; 5
    750c:	6c 91       	ld	r22, X
    750e:	80 81       	ld	r24, Z
    7510:	91 81       	ldd	r25, Z+1	; 0x01
    7512:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    7516:	f8 01       	movw	r30, r16
    7518:	82 81       	ldd	r24, Z+2	; 0x02
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	fc 01       	movw	r30, r24
    751e:	e0 53       	subi	r30, 0x30	; 48
    7520:	f6 4d       	sbci	r31, 0xD6	; 214
    7522:	d8 01       	movw	r26, r16
    7524:	13 96       	adiw	r26, 0x03	; 3
    7526:	2c 91       	ld	r18, X
    7528:	13 97       	sbiw	r26, 0x03	; 3
    752a:	20 83       	st	Z, r18
						input_value_lookup[gReport[2]] = gReport[4];
    752c:	fc 01       	movw	r30, r24
    752e:	ed 55       	subi	r30, 0x5D	; 93
    7530:	f6 4d       	sbci	r31, 0xD6	; 214
    7532:	14 96       	adiw	r26, 0x04	; 4
    7534:	2c 91       	ld	r18, X
    7536:	14 97       	sbiw	r26, 0x04	; 4
    7538:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    753a:	fc 01       	movw	r30, r24
    753c:	ea 58       	subi	r30, 0x8A	; 138
    753e:	f6 4d       	sbci	r31, 0xD6	; 214
    7540:	15 96       	adiw	r26, 0x05	; 5
    7542:	2c 91       	ld	r18, X
    7544:	20 83       	st	Z, r18
						controlSet = 1;
    7546:	11 e0       	ldi	r17, 0x01	; 1
    7548:	cd c4       	rjmp	.+2458   	; 0x7ee4 <parseHidReport+0x1316>
					}
					else if((gReport[3] == IT_JOY1_BUTTON)||(gReport[3] == IT_JOY2_BUTTON)){
    754a:	8f ef       	ldi	r24, 0xFF	; 255
    754c:	86 0f       	add	r24, r22
    754e:	82 30       	cpi	r24, 0x02	; 2
    7550:	08 f0       	brcs	.+2      	; 0x7554 <parseHidReport+0x986>
    7552:	49 c0       	rjmp	.+146    	; 0x75e6 <parseHidReport+0xa18>
						//Joystick Button
						if(gReport[4] > 0 && gReport[4] <= NUM_JOYSTICK_BUTTONS){
    7554:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7558:	81 50       	subi	r24, 0x01	; 1
    755a:	80 32       	cpi	r24, 0x20	; 32
    755c:	08 f0       	brcs	.+2      	; 0x7560 <parseHidReport+0x992>
    755e:	c2 c4       	rjmp	.+2436   	; 0x7ee4 <parseHidReport+0x1316>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7560:	f0 e0       	ldi	r31, 0x00	; 0
    7562:	ee 0f       	add	r30, r30
    7564:	ff 1f       	adc	r31, r31
    7566:	ec 5d       	subi	r30, 0xDC	; 220
    7568:	fc 4d       	sbci	r31, 0xDC	; 220
    756a:	80 81       	ld	r24, Z
    756c:	91 81       	ldd	r25, Z+1	; 0x01
    756e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7572:	00 e5       	ldi	r16, 0x50	; 80
    7574:	19 e2       	ldi	r17, 0x29	; 41
    7576:	d8 01       	movw	r26, r16
    7578:	12 96       	adiw	r26, 0x02	; 2
    757a:	ec 91       	ld	r30, X
    757c:	12 97       	sbiw	r26, 0x02	; 2
    757e:	f0 e0       	ldi	r31, 0x00	; 0
    7580:	ee 0f       	add	r30, r30
    7582:	ff 1f       	adc	r31, r31
    7584:	e8 52       	subi	r30, 0x28	; 40
    7586:	fc 4d       	sbci	r31, 0xDC	; 220
    7588:	14 96       	adiw	r26, 0x04	; 4
    758a:	6c 91       	ld	r22, X
    758c:	80 81       	ld	r24, Z
    758e:	91 81       	ldd	r25, Z+1	; 0x01
    7590:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7594:	d8 01       	movw	r26, r16
    7596:	12 96       	adiw	r26, 0x02	; 2
    7598:	ec 91       	ld	r30, X
    759a:	12 97       	sbiw	r26, 0x02	; 2
    759c:	f0 e0       	ldi	r31, 0x00	; 0
    759e:	ee 0f       	add	r30, r30
    75a0:	ff 1f       	adc	r31, r31
    75a2:	e2 58       	subi	r30, 0x82	; 130
    75a4:	fc 4d       	sbci	r31, 0xDC	; 220
    75a6:	15 96       	adiw	r26, 0x05	; 5
    75a8:	6c 91       	ld	r22, X
    75aa:	80 81       	ld	r24, Z
    75ac:	91 81       	ldd	r25, Z+1	; 0x01
    75ae:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    75b2:	f8 01       	movw	r30, r16
    75b4:	82 81       	ldd	r24, Z+2	; 0x02
    75b6:	90 e0       	ldi	r25, 0x00	; 0
    75b8:	fc 01       	movw	r30, r24
    75ba:	e0 53       	subi	r30, 0x30	; 48
    75bc:	f6 4d       	sbci	r31, 0xD6	; 214
    75be:	d8 01       	movw	r26, r16
    75c0:	13 96       	adiw	r26, 0x03	; 3
    75c2:	2c 91       	ld	r18, X
    75c4:	13 97       	sbiw	r26, 0x03	; 3
    75c6:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    75c8:	fc 01       	movw	r30, r24
    75ca:	ed 55       	subi	r30, 0x5D	; 93
    75cc:	f6 4d       	sbci	r31, 0xD6	; 214
    75ce:	14 96       	adiw	r26, 0x04	; 4
    75d0:	2c 91       	ld	r18, X
    75d2:	14 97       	sbiw	r26, 0x04	; 4
    75d4:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    75d6:	fc 01       	movw	r30, r24
    75d8:	ea 58       	subi	r30, 0x8A	; 138
    75da:	f6 4d       	sbci	r31, 0xD6	; 214
    75dc:	15 96       	adiw	r26, 0x05	; 5
    75de:	2c 91       	ld	r18, X
    75e0:	20 83       	st	Z, r18
							controlSet = 1;
    75e2:	11 e0       	ldi	r17, 0x01	; 1
    75e4:	7f c4       	rjmp	.+2302   	; 0x7ee4 <parseHidReport+0x1316>
						}
					}
					else if(gReport[3] == IT_KEYBOARD){
    75e6:	63 30       	cpi	r22, 0x03	; 3
    75e8:	09 f0       	breq	.+2      	; 0x75ec <parseHidReport+0xa1e>
    75ea:	51 c0       	rjmp	.+162    	; 0x768e <parseHidReport+0xac0>
						//Keyboard Button
						//check for valid key (0 if only modifier key is being sent)
						if((gReport[4] == 0) ||(gReport[4] >= HID_A && gReport[4] <= HID_KEYPAD_0)){
    75ec:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    75f0:	88 23       	and	r24, r24
    75f2:	21 f0       	breq	.+8      	; 0x75fc <parseHidReport+0xa2e>
    75f4:	84 50       	subi	r24, 0x04	; 4
    75f6:	8f 35       	cpi	r24, 0x5F	; 95
    75f8:	08 f0       	brcs	.+2      	; 0x75fc <parseHidReport+0xa2e>
    75fa:	74 c4       	rjmp	.+2280   	; 0x7ee4 <parseHidReport+0x1316>
							//check for valid modifier key (0 if no modifier key)
							if((gReport[5] == 0) ||(gReport[5] >= HID_MODIFIER_NONE && gReport[5] <= HID_MODIFIER_RIGHT_UI)){
    75fc:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <gReport+0x5>
    7600:	81 38       	cpi	r24, 0x81	; 129
    7602:	08 f0       	brcs	.+2      	; 0x7606 <parseHidReport+0xa38>
    7604:	6f c4       	rjmp	.+2270   	; 0x7ee4 <parseHidReport+0x1316>
								eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7606:	f0 e0       	ldi	r31, 0x00	; 0
    7608:	ee 0f       	add	r30, r30
    760a:	ff 1f       	adc	r31, r31
    760c:	ec 5d       	subi	r30, 0xDC	; 220
    760e:	fc 4d       	sbci	r31, 0xDC	; 220
    7610:	63 e0       	ldi	r22, 0x03	; 3
    7612:	80 81       	ld	r24, Z
    7614:	91 81       	ldd	r25, Z+1	; 0x01
    7616:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    761a:	00 e5       	ldi	r16, 0x50	; 80
    761c:	19 e2       	ldi	r17, 0x29	; 41
    761e:	d8 01       	movw	r26, r16
    7620:	12 96       	adiw	r26, 0x02	; 2
    7622:	ec 91       	ld	r30, X
    7624:	12 97       	sbiw	r26, 0x02	; 2
    7626:	f0 e0       	ldi	r31, 0x00	; 0
    7628:	ee 0f       	add	r30, r30
    762a:	ff 1f       	adc	r31, r31
    762c:	e8 52       	subi	r30, 0x28	; 40
    762e:	fc 4d       	sbci	r31, 0xDC	; 220
    7630:	14 96       	adiw	r26, 0x04	; 4
    7632:	6c 91       	ld	r22, X
    7634:	80 81       	ld	r24, Z
    7636:	91 81       	ldd	r25, Z+1	; 0x01
    7638:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    763c:	d8 01       	movw	r26, r16
    763e:	12 96       	adiw	r26, 0x02	; 2
    7640:	ec 91       	ld	r30, X
    7642:	12 97       	sbiw	r26, 0x02	; 2
    7644:	f0 e0       	ldi	r31, 0x00	; 0
    7646:	ee 0f       	add	r30, r30
    7648:	ff 1f       	adc	r31, r31
    764a:	e2 58       	subi	r30, 0x82	; 130
    764c:	fc 4d       	sbci	r31, 0xDC	; 220
    764e:	15 96       	adiw	r26, 0x05	; 5
    7650:	6c 91       	ld	r22, X
    7652:	80 81       	ld	r24, Z
    7654:	91 81       	ldd	r25, Z+1	; 0x01
    7656:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
								input_type_lookup[gReport[2]] = gReport[3];
    765a:	f8 01       	movw	r30, r16
    765c:	82 81       	ldd	r24, Z+2	; 0x02
    765e:	90 e0       	ldi	r25, 0x00	; 0
    7660:	fc 01       	movw	r30, r24
    7662:	e0 53       	subi	r30, 0x30	; 48
    7664:	f6 4d       	sbci	r31, 0xD6	; 214
    7666:	d8 01       	movw	r26, r16
    7668:	13 96       	adiw	r26, 0x03	; 3
    766a:	2c 91       	ld	r18, X
    766c:	13 97       	sbiw	r26, 0x03	; 3
    766e:	20 83       	st	Z, r18
								input_value_lookup[gReport[2]] = gReport[4];
    7670:	fc 01       	movw	r30, r24
    7672:	ed 55       	subi	r30, 0x5D	; 93
    7674:	f6 4d       	sbci	r31, 0xD6	; 214
    7676:	14 96       	adiw	r26, 0x04	; 4
    7678:	2c 91       	ld	r18, X
    767a:	14 97       	sbiw	r26, 0x04	; 4
    767c:	20 83       	st	Z, r18
								input_value2_lookup[gReport[2]] = gReport[5];
    767e:	fc 01       	movw	r30, r24
    7680:	ea 58       	subi	r30, 0x8A	; 138
    7682:	f6 4d       	sbci	r31, 0xD6	; 214
    7684:	15 96       	adiw	r26, 0x05	; 5
    7686:	2c 91       	ld	r18, X
    7688:	20 83       	st	Z, r18
								controlSet = 1;
    768a:	11 e0       	ldi	r17, 0x01	; 1
    768c:	2b c4       	rjmp	.+2134   	; 0x7ee4 <parseHidReport+0x1316>
							}							
						}
					}
					else if(gReport[3] == IT_MOUSE_BUTTON){
    768e:	64 30       	cpi	r22, 0x04	; 4
    7690:	09 f0       	breq	.+2      	; 0x7694 <parseHidReport+0xac6>
    7692:	49 c0       	rjmp	.+146    	; 0x7726 <parseHidReport+0xb58>
						//Mouse Button
						if(gReport[4] > 0 && gReport[4] <= NUM_MOUSE_BUTTONS){
    7694:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7698:	81 50       	subi	r24, 0x01	; 1
    769a:	83 30       	cpi	r24, 0x03	; 3
    769c:	08 f0       	brcs	.+2      	; 0x76a0 <parseHidReport+0xad2>
    769e:	22 c4       	rjmp	.+2116   	; 0x7ee4 <parseHidReport+0x1316>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    76a0:	f0 e0       	ldi	r31, 0x00	; 0
    76a2:	ee 0f       	add	r30, r30
    76a4:	ff 1f       	adc	r31, r31
    76a6:	ec 5d       	subi	r30, 0xDC	; 220
    76a8:	fc 4d       	sbci	r31, 0xDC	; 220
    76aa:	80 81       	ld	r24, Z
    76ac:	91 81       	ldd	r25, Z+1	; 0x01
    76ae:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    76b2:	00 e5       	ldi	r16, 0x50	; 80
    76b4:	19 e2       	ldi	r17, 0x29	; 41
    76b6:	d8 01       	movw	r26, r16
    76b8:	12 96       	adiw	r26, 0x02	; 2
    76ba:	ec 91       	ld	r30, X
    76bc:	12 97       	sbiw	r26, 0x02	; 2
    76be:	f0 e0       	ldi	r31, 0x00	; 0
    76c0:	ee 0f       	add	r30, r30
    76c2:	ff 1f       	adc	r31, r31
    76c4:	e8 52       	subi	r30, 0x28	; 40
    76c6:	fc 4d       	sbci	r31, 0xDC	; 220
    76c8:	14 96       	adiw	r26, 0x04	; 4
    76ca:	6c 91       	ld	r22, X
    76cc:	80 81       	ld	r24, Z
    76ce:	91 81       	ldd	r25, Z+1	; 0x01
    76d0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    76d4:	d8 01       	movw	r26, r16
    76d6:	12 96       	adiw	r26, 0x02	; 2
    76d8:	ec 91       	ld	r30, X
    76da:	12 97       	sbiw	r26, 0x02	; 2
    76dc:	f0 e0       	ldi	r31, 0x00	; 0
    76de:	ee 0f       	add	r30, r30
    76e0:	ff 1f       	adc	r31, r31
    76e2:	e2 58       	subi	r30, 0x82	; 130
    76e4:	fc 4d       	sbci	r31, 0xDC	; 220
    76e6:	15 96       	adiw	r26, 0x05	; 5
    76e8:	6c 91       	ld	r22, X
    76ea:	80 81       	ld	r24, Z
    76ec:	91 81       	ldd	r25, Z+1	; 0x01
    76ee:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    76f2:	f8 01       	movw	r30, r16
    76f4:	82 81       	ldd	r24, Z+2	; 0x02
    76f6:	90 e0       	ldi	r25, 0x00	; 0
    76f8:	fc 01       	movw	r30, r24
    76fa:	e0 53       	subi	r30, 0x30	; 48
    76fc:	f6 4d       	sbci	r31, 0xD6	; 214
    76fe:	d8 01       	movw	r26, r16
    7700:	13 96       	adiw	r26, 0x03	; 3
    7702:	2c 91       	ld	r18, X
    7704:	13 97       	sbiw	r26, 0x03	; 3
    7706:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    7708:	fc 01       	movw	r30, r24
    770a:	ed 55       	subi	r30, 0x5D	; 93
    770c:	f6 4d       	sbci	r31, 0xD6	; 214
    770e:	14 96       	adiw	r26, 0x04	; 4
    7710:	2c 91       	ld	r18, X
    7712:	14 97       	sbiw	r26, 0x04	; 4
    7714:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    7716:	fc 01       	movw	r30, r24
    7718:	ea 58       	subi	r30, 0x8A	; 138
    771a:	f6 4d       	sbci	r31, 0xD6	; 214
    771c:	15 96       	adiw	r26, 0x05	; 5
    771e:	2c 91       	ld	r18, X
    7720:	20 83       	st	Z, r18
							controlSet = 1;
    7722:	11 e0       	ldi	r17, 0x01	; 1
    7724:	df c3       	rjmp	.+1982   	; 0x7ee4 <parseHidReport+0x1316>
						}
					}
					else if(gReport[3] >= IT_MOUSE_XAXIS && gReport[3] <= IT_MOUSE_ZAXIS){
    7726:	8b ef       	ldi	r24, 0xFB	; 251
    7728:	86 0f       	add	r24, r22
    772a:	83 30       	cpi	r24, 0x03	; 3
    772c:	08 f0       	brcs	.+2      	; 0x7730 <parseHidReport+0xb62>
    772e:	88 c0       	rjmp	.+272    	; 0x7840 <parseHidReport+0xc72>
						if((gReport[2] == JOY3_U_LKUP_INDEX) || (gReport[2] == JOY3_L_LKUP_INDEX) || (gReport[2] == JOY4_L_LKUP_INDEX)){							
    7730:	8e 2f       	mov	r24, r30
    7732:	8d 7f       	andi	r24, 0xFD	; 253
    7734:	88 30       	cpi	r24, 0x08	; 8
    7736:	19 f0       	breq	.+6      	; 0x773e <parseHidReport+0xb70>
    7738:	ee 30       	cpi	r30, 0x0E	; 14
    773a:	09 f0       	breq	.+2      	; 0x773e <parseHidReport+0xb70>
    773c:	d3 c3       	rjmp	.+1958   	; 0x7ee4 <parseHidReport+0x1316>
						//if((gReport[2] >= JOY3_U_LKUP_INDEX) && (gReport[2] <= JOY4_D_LKUP_INDEX)){
							//3 Quadrature Mouse axes (JOY3_L & JOY3R are QDEC1, JOY3_U and JOY3_D are QEC2, JOY4_U and JOY4_D are QES3)
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    773e:	f0 e0       	ldi	r31, 0x00	; 0
    7740:	ee 0f       	add	r30, r30
    7742:	ff 1f       	adc	r31, r31
    7744:	ec 5d       	subi	r30, 0xDC	; 220
    7746:	fc 4d       	sbci	r31, 0xDC	; 220
    7748:	80 81       	ld	r24, Z
    774a:	91 81       	ldd	r25, Z+1	; 0x01
    774c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7750:	00 e5       	ldi	r16, 0x50	; 80
    7752:	19 e2       	ldi	r17, 0x29	; 41
    7754:	d8 01       	movw	r26, r16
    7756:	12 96       	adiw	r26, 0x02	; 2
    7758:	ec 91       	ld	r30, X
    775a:	12 97       	sbiw	r26, 0x02	; 2
    775c:	f0 e0       	ldi	r31, 0x00	; 0
    775e:	ee 0f       	add	r30, r30
    7760:	ff 1f       	adc	r31, r31
    7762:	e8 52       	subi	r30, 0x28	; 40
    7764:	fc 4d       	sbci	r31, 0xDC	; 220
    7766:	14 96       	adiw	r26, 0x04	; 4
    7768:	6c 91       	ld	r22, X
    776a:	80 81       	ld	r24, Z
    776c:	91 81       	ldd	r25, Z+1	; 0x01
    776e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7772:	d8 01       	movw	r26, r16
    7774:	12 96       	adiw	r26, 0x02	; 2
    7776:	ec 91       	ld	r30, X
    7778:	12 97       	sbiw	r26, 0x02	; 2
    777a:	f0 e0       	ldi	r31, 0x00	; 0
    777c:	ee 0f       	add	r30, r30
    777e:	ff 1f       	adc	r31, r31
    7780:	e2 58       	subi	r30, 0x82	; 130
    7782:	fc 4d       	sbci	r31, 0xDC	; 220
    7784:	15 96       	adiw	r26, 0x05	; 5
    7786:	6c 91       	ld	r22, X
    7788:	80 81       	ld	r24, Z
    778a:	91 81       	ldd	r25, Z+1	; 0x01
    778c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    7790:	f8 01       	movw	r30, r16
    7792:	82 81       	ldd	r24, Z+2	; 0x02
    7794:	90 e0       	ldi	r25, 0x00	; 0
    7796:	63 81       	ldd	r22, Z+3	; 0x03
    7798:	fc 01       	movw	r30, r24
    779a:	e0 53       	subi	r30, 0x30	; 48
    779c:	f6 4d       	sbci	r31, 0xD6	; 214
    779e:	60 83       	st	Z, r22
							//no need to set value for mouse axis
							input_value_lookup[gReport[2]] = gReport[4];	
    77a0:	fc 01       	movw	r30, r24
    77a2:	ed 55       	subi	r30, 0x5D	; 93
    77a4:	f6 4d       	sbci	r31, 0xD6	; 214
    77a6:	d8 01       	movw	r26, r16
    77a8:	14 96       	adiw	r26, 0x04	; 4
    77aa:	2c 91       	ld	r18, X
    77ac:	14 97       	sbiw	r26, 0x04	; 4
    77ae:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];	
    77b0:	fc 01       	movw	r30, r24
    77b2:	ea 58       	subi	r30, 0x8A	; 138
    77b4:	f6 4d       	sbci	r31, 0xD6	; 214
    77b6:	15 96       	adiw	r26, 0x05	; 5
    77b8:	2c 91       	ld	r18, X
    77ba:	20 83       	st	Z, r18
							
							//Set both pins the same
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]+1],gReport[3]);
    77bc:	88 0f       	add	r24, r24
    77be:	99 1f       	adc	r25, r25
    77c0:	fc 01       	movw	r30, r24
    77c2:	ea 5d       	subi	r30, 0xDA	; 218
    77c4:	fc 4d       	sbci	r31, 0xDC	; 220
    77c6:	80 81       	ld	r24, Z
    77c8:	91 81       	ldd	r25, Z+1	; 0x01
    77ca:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]+1],gReport[4]);
    77ce:	d8 01       	movw	r26, r16
    77d0:	12 96       	adiw	r26, 0x02	; 2
    77d2:	ec 91       	ld	r30, X
    77d4:	12 97       	sbiw	r26, 0x02	; 2
    77d6:	f0 e0       	ldi	r31, 0x00	; 0
    77d8:	ee 0f       	add	r30, r30
    77da:	ff 1f       	adc	r31, r31
    77dc:	e6 52       	subi	r30, 0x26	; 38
    77de:	fc 4d       	sbci	r31, 0xDC	; 220
    77e0:	14 96       	adiw	r26, 0x04	; 4
    77e2:	6c 91       	ld	r22, X
    77e4:	80 81       	ld	r24, Z
    77e6:	91 81       	ldd	r25, Z+1	; 0x01
    77e8:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]+1],gReport[5]);
    77ec:	d8 01       	movw	r26, r16
    77ee:	12 96       	adiw	r26, 0x02	; 2
    77f0:	ec 91       	ld	r30, X
    77f2:	12 97       	sbiw	r26, 0x02	; 2
    77f4:	f0 e0       	ldi	r31, 0x00	; 0
    77f6:	ee 0f       	add	r30, r30
    77f8:	ff 1f       	adc	r31, r31
    77fa:	e0 58       	subi	r30, 0x80	; 128
    77fc:	fc 4d       	sbci	r31, 0xDC	; 220
    77fe:	15 96       	adiw	r26, 0x05	; 5
    7800:	6c 91       	ld	r22, X
    7802:	80 81       	ld	r24, Z
    7804:	91 81       	ldd	r25, Z+1	; 0x01
    7806:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]+1] = gReport[3];
    780a:	f8 01       	movw	r30, r16
    780c:	82 81       	ldd	r24, Z+2	; 0x02
    780e:	90 e0       	ldi	r25, 0x00	; 0
    7810:	01 96       	adiw	r24, 0x01	; 1
    7812:	fc 01       	movw	r30, r24
    7814:	e0 53       	subi	r30, 0x30	; 48
    7816:	f6 4d       	sbci	r31, 0xD6	; 214
    7818:	d8 01       	movw	r26, r16
    781a:	13 96       	adiw	r26, 0x03	; 3
    781c:	2c 91       	ld	r18, X
    781e:	13 97       	sbiw	r26, 0x03	; 3
    7820:	20 83       	st	Z, r18
							//no need to set value for mouse axis
							input_value_lookup[gReport[2]+1] = gReport[4];	
    7822:	fc 01       	movw	r30, r24
    7824:	ed 55       	subi	r30, 0x5D	; 93
    7826:	f6 4d       	sbci	r31, 0xD6	; 214
    7828:	14 96       	adiw	r26, 0x04	; 4
    782a:	2c 91       	ld	r18, X
    782c:	14 97       	sbiw	r26, 0x04	; 4
    782e:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]+1] = gReport[5];	
    7830:	fc 01       	movw	r30, r24
    7832:	ea 58       	subi	r30, 0x8A	; 138
    7834:	f6 4d       	sbci	r31, 0xD6	; 214
    7836:	15 96       	adiw	r26, 0x05	; 5
    7838:	2c 91       	ld	r18, X
    783a:	20 83       	st	Z, r18
							controlSet = 1;
    783c:	11 e0       	ldi	r17, 0x01	; 1
    783e:	52 c3       	rjmp	.+1700   	; 0x7ee4 <parseHidReport+0x1316>
						}
					}
					else if((gReport[3] >= IT_JOY1_DIG_THROTTLE && gReport[3] <= IT_JOY1_DIG_SLIDER)||(gReport[3] >= IT_JOY2_DIG_THROTTLE && gReport[3] <= IT_JOY2_DIG_SLIDER)){
    7840:	80 ef       	ldi	r24, 0xF0	; 240
    7842:	86 0f       	add	r24, r22
    7844:	88 30       	cpi	r24, 0x08	; 8
    7846:	28 f0       	brcs	.+10     	; 0x7852 <parseHidReport+0xc84>
    7848:	80 ec       	ldi	r24, 0xC0	; 192
    784a:	86 0f       	add	r24, r22
    784c:	88 30       	cpi	r24, 0x08	; 8
    784e:	08 f0       	brcs	.+2      	; 0x7852 <parseHidReport+0xc84>
    7850:	49 c3       	rjmp	.+1682   	; 0x7ee4 <parseHidReport+0x1316>
						//Digital Axis
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7852:	f0 e0       	ldi	r31, 0x00	; 0
    7854:	ee 0f       	add	r30, r30
    7856:	ff 1f       	adc	r31, r31
    7858:	ec 5d       	subi	r30, 0xDC	; 220
    785a:	fc 4d       	sbci	r31, 0xDC	; 220
    785c:	80 81       	ld	r24, Z
    785e:	91 81       	ldd	r25, Z+1	; 0x01
    7860:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7864:	00 e5       	ldi	r16, 0x50	; 80
    7866:	19 e2       	ldi	r17, 0x29	; 41
    7868:	d8 01       	movw	r26, r16
    786a:	12 96       	adiw	r26, 0x02	; 2
    786c:	ec 91       	ld	r30, X
    786e:	12 97       	sbiw	r26, 0x02	; 2
    7870:	f0 e0       	ldi	r31, 0x00	; 0
    7872:	ee 0f       	add	r30, r30
    7874:	ff 1f       	adc	r31, r31
    7876:	e8 52       	subi	r30, 0x28	; 40
    7878:	fc 4d       	sbci	r31, 0xDC	; 220
    787a:	14 96       	adiw	r26, 0x04	; 4
    787c:	6c 91       	ld	r22, X
    787e:	80 81       	ld	r24, Z
    7880:	91 81       	ldd	r25, Z+1	; 0x01
    7882:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7886:	d8 01       	movw	r26, r16
    7888:	12 96       	adiw	r26, 0x02	; 2
    788a:	ec 91       	ld	r30, X
    788c:	12 97       	sbiw	r26, 0x02	; 2
    788e:	f0 e0       	ldi	r31, 0x00	; 0
    7890:	ee 0f       	add	r30, r30
    7892:	ff 1f       	adc	r31, r31
    7894:	e2 58       	subi	r30, 0x82	; 130
    7896:	fc 4d       	sbci	r31, 0xDC	; 220
    7898:	15 96       	adiw	r26, 0x05	; 5
    789a:	6c 91       	ld	r22, X
    789c:	80 81       	ld	r24, Z
    789e:	91 81       	ldd	r25, Z+1	; 0x01
    78a0:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    78a4:	f8 01       	movw	r30, r16
    78a6:	82 81       	ldd	r24, Z+2	; 0x02
    78a8:	90 e0       	ldi	r25, 0x00	; 0
    78aa:	fc 01       	movw	r30, r24
    78ac:	e0 53       	subi	r30, 0x30	; 48
    78ae:	f6 4d       	sbci	r31, 0xD6	; 214
    78b0:	d8 01       	movw	r26, r16
    78b2:	13 96       	adiw	r26, 0x03	; 3
    78b4:	2c 91       	ld	r18, X
    78b6:	13 97       	sbiw	r26, 0x03	; 3
    78b8:	20 83       	st	Z, r18
						//axis value
						input_value_lookup[gReport[2]] = gReport[4];
    78ba:	fc 01       	movw	r30, r24
    78bc:	ed 55       	subi	r30, 0x5D	; 93
    78be:	f6 4d       	sbci	r31, 0xD6	; 214
    78c0:	14 96       	adiw	r26, 0x04	; 4
    78c2:	2c 91       	ld	r18, X
    78c4:	14 97       	sbiw	r26, 0x04	; 4
    78c6:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    78c8:	fc 01       	movw	r30, r24
    78ca:	ea 58       	subi	r30, 0x8A	; 138
    78cc:	f6 4d       	sbci	r31, 0xD6	; 214
    78ce:	15 96       	adiw	r26, 0x05	; 5
    78d0:	2c 91       	ld	r18, X
    78d2:	20 83       	st	Z, r18
						controlSet = 1;
    78d4:	11 e0       	ldi	r17, 0x01	; 1
    78d6:	06 c3       	rjmp	.+1548   	; 0x7ee4 <parseHidReport+0x1316>
						
					}
				}
				
				//Buttons
				else if(gReport[2] >= BUTT1_LKUP_INDEX && gReport[2] <= BUTT26_LKUP_INDEX){
    78d8:	80 ef       	ldi	r24, 0xF0	; 240
    78da:	8e 0f       	add	r24, r30
    78dc:	8a 31       	cpi	r24, 0x1A	; 26
    78de:	08 f0       	brcs	.+2      	; 0x78e2 <parseHidReport+0xd14>
    78e0:	29 c1       	rjmp	.+594    	; 0x7b34 <parseHidReport+0xf66>
					//Buttons can be IT_NOTHING, IT_JOY_BUTTON, IT_KEYBOARD, or IT_MOUSE_BUTTON
					if(gReport[3] == IT_NOTHING){
    78e2:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
    78e6:	61 11       	cpse	r22, r1
    78e8:	40 c0       	rjmp	.+128    	; 0x796a <parseHidReport+0xd9c>
						//No assignment for this pin
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    78ea:	f0 e0       	ldi	r31, 0x00	; 0
    78ec:	ee 0f       	add	r30, r30
    78ee:	ff 1f       	adc	r31, r31
    78f0:	ec 5d       	subi	r30, 0xDC	; 220
    78f2:	fc 4d       	sbci	r31, 0xDC	; 220
    78f4:	80 81       	ld	r24, Z
    78f6:	91 81       	ldd	r25, Z+1	; 0x01
    78f8:	df d7       	rcall	.+4030   	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    78fa:	00 e5       	ldi	r16, 0x50	; 80
    78fc:	19 e2       	ldi	r17, 0x29	; 41
    78fe:	d8 01       	movw	r26, r16
    7900:	12 96       	adiw	r26, 0x02	; 2
    7902:	ec 91       	ld	r30, X
    7904:	12 97       	sbiw	r26, 0x02	; 2
    7906:	f0 e0       	ldi	r31, 0x00	; 0
    7908:	ee 0f       	add	r30, r30
    790a:	ff 1f       	adc	r31, r31
    790c:	e8 52       	subi	r30, 0x28	; 40
    790e:	fc 4d       	sbci	r31, 0xDC	; 220
    7910:	14 96       	adiw	r26, 0x04	; 4
    7912:	6c 91       	ld	r22, X
    7914:	80 81       	ld	r24, Z
    7916:	91 81       	ldd	r25, Z+1	; 0x01
    7918:	cf d7       	rcall	.+3998   	; 0x88b8 <eeprom_write_byte>
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    791a:	d8 01       	movw	r26, r16
    791c:	12 96       	adiw	r26, 0x02	; 2
    791e:	ec 91       	ld	r30, X
    7920:	12 97       	sbiw	r26, 0x02	; 2
    7922:	f0 e0       	ldi	r31, 0x00	; 0
    7924:	ee 0f       	add	r30, r30
    7926:	ff 1f       	adc	r31, r31
    7928:	e2 58       	subi	r30, 0x82	; 130
    792a:	fc 4d       	sbci	r31, 0xDC	; 220
    792c:	15 96       	adiw	r26, 0x05	; 5
    792e:	6c 91       	ld	r22, X
    7930:	80 81       	ld	r24, Z
    7932:	91 81       	ldd	r25, Z+1	; 0x01
    7934:	c1 d7       	rcall	.+3970   	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    7936:	f8 01       	movw	r30, r16
    7938:	82 81       	ldd	r24, Z+2	; 0x02
    793a:	90 e0       	ldi	r25, 0x00	; 0
    793c:	fc 01       	movw	r30, r24
    793e:	e0 53       	subi	r30, 0x30	; 48
    7940:	f6 4d       	sbci	r31, 0xD6	; 214
    7942:	d8 01       	movw	r26, r16
    7944:	13 96       	adiw	r26, 0x03	; 3
    7946:	2c 91       	ld	r18, X
    7948:	13 97       	sbiw	r26, 0x03	; 3
    794a:	20 83       	st	Z, r18
						input_value_lookup[gReport[2]] = gReport[4];
    794c:	fc 01       	movw	r30, r24
    794e:	ed 55       	subi	r30, 0x5D	; 93
    7950:	f6 4d       	sbci	r31, 0xD6	; 214
    7952:	14 96       	adiw	r26, 0x04	; 4
    7954:	2c 91       	ld	r18, X
    7956:	14 97       	sbiw	r26, 0x04	; 4
    7958:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    795a:	fc 01       	movw	r30, r24
    795c:	ea 58       	subi	r30, 0x8A	; 138
    795e:	f6 4d       	sbci	r31, 0xD6	; 214
    7960:	15 96       	adiw	r26, 0x05	; 5
    7962:	2c 91       	ld	r18, X
    7964:	20 83       	st	Z, r18
						controlSet = 1;
    7966:	11 e0       	ldi	r17, 0x01	; 1
    7968:	bd c2       	rjmp	.+1402   	; 0x7ee4 <parseHidReport+0x1316>
					}
					else if((gReport[3] == IT_JOY1_BUTTON)||(gReport[3] == IT_JOY2_BUTTON)){
    796a:	8f ef       	ldi	r24, 0xFF	; 255
    796c:	86 0f       	add	r24, r22
    796e:	82 30       	cpi	r24, 0x02	; 2
    7970:	08 f0       	brcs	.+2      	; 0x7974 <parseHidReport+0xda6>
    7972:	46 c0       	rjmp	.+140    	; 0x7a00 <parseHidReport+0xe32>
						//Joystick Button
						if(gReport[4] > 0 && gReport[4] <= NUM_JOYSTICK_BUTTONS){
    7974:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7978:	81 50       	subi	r24, 0x01	; 1
    797a:	80 32       	cpi	r24, 0x20	; 32
    797c:	08 f0       	brcs	.+2      	; 0x7980 <parseHidReport+0xdb2>
    797e:	b2 c2       	rjmp	.+1380   	; 0x7ee4 <parseHidReport+0x1316>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7980:	f0 e0       	ldi	r31, 0x00	; 0
    7982:	ee 0f       	add	r30, r30
    7984:	ff 1f       	adc	r31, r31
    7986:	ec 5d       	subi	r30, 0xDC	; 220
    7988:	fc 4d       	sbci	r31, 0xDC	; 220
    798a:	80 81       	ld	r24, Z
    798c:	91 81       	ldd	r25, Z+1	; 0x01
    798e:	94 d7       	rcall	.+3880   	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7990:	00 e5       	ldi	r16, 0x50	; 80
    7992:	19 e2       	ldi	r17, 0x29	; 41
    7994:	d8 01       	movw	r26, r16
    7996:	12 96       	adiw	r26, 0x02	; 2
    7998:	ec 91       	ld	r30, X
    799a:	12 97       	sbiw	r26, 0x02	; 2
    799c:	f0 e0       	ldi	r31, 0x00	; 0
    799e:	ee 0f       	add	r30, r30
    79a0:	ff 1f       	adc	r31, r31
    79a2:	e8 52       	subi	r30, 0x28	; 40
    79a4:	fc 4d       	sbci	r31, 0xDC	; 220
    79a6:	14 96       	adiw	r26, 0x04	; 4
    79a8:	6c 91       	ld	r22, X
    79aa:	80 81       	ld	r24, Z
    79ac:	91 81       	ldd	r25, Z+1	; 0x01
    79ae:	84 d7       	rcall	.+3848   	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    79b0:	d8 01       	movw	r26, r16
    79b2:	12 96       	adiw	r26, 0x02	; 2
    79b4:	ec 91       	ld	r30, X
    79b6:	12 97       	sbiw	r26, 0x02	; 2
    79b8:	f0 e0       	ldi	r31, 0x00	; 0
    79ba:	ee 0f       	add	r30, r30
    79bc:	ff 1f       	adc	r31, r31
    79be:	e2 58       	subi	r30, 0x82	; 130
    79c0:	fc 4d       	sbci	r31, 0xDC	; 220
    79c2:	15 96       	adiw	r26, 0x05	; 5
    79c4:	6c 91       	ld	r22, X
    79c6:	80 81       	ld	r24, Z
    79c8:	91 81       	ldd	r25, Z+1	; 0x01
    79ca:	76 d7       	rcall	.+3820   	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    79cc:	f8 01       	movw	r30, r16
    79ce:	82 81       	ldd	r24, Z+2	; 0x02
    79d0:	90 e0       	ldi	r25, 0x00	; 0
    79d2:	fc 01       	movw	r30, r24
    79d4:	e0 53       	subi	r30, 0x30	; 48
    79d6:	f6 4d       	sbci	r31, 0xD6	; 214
    79d8:	d8 01       	movw	r26, r16
    79da:	13 96       	adiw	r26, 0x03	; 3
    79dc:	2c 91       	ld	r18, X
    79de:	13 97       	sbiw	r26, 0x03	; 3
    79e0:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];	
    79e2:	fc 01       	movw	r30, r24
    79e4:	ed 55       	subi	r30, 0x5D	; 93
    79e6:	f6 4d       	sbci	r31, 0xD6	; 214
    79e8:	14 96       	adiw	r26, 0x04	; 4
    79ea:	2c 91       	ld	r18, X
    79ec:	14 97       	sbiw	r26, 0x04	; 4
    79ee:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    79f0:	fc 01       	movw	r30, r24
    79f2:	ea 58       	subi	r30, 0x8A	; 138
    79f4:	f6 4d       	sbci	r31, 0xD6	; 214
    79f6:	15 96       	adiw	r26, 0x05	; 5
    79f8:	2c 91       	ld	r18, X
    79fa:	20 83       	st	Z, r18
							controlSet = 1;
    79fc:	11 e0       	ldi	r17, 0x01	; 1
    79fe:	72 c2       	rjmp	.+1252   	; 0x7ee4 <parseHidReport+0x1316>
						}						
					}
					else if(gReport[3] == IT_KEYBOARD){
    7a00:	63 30       	cpi	r22, 0x03	; 3
    7a02:	09 f0       	breq	.+2      	; 0x7a06 <parseHidReport+0xe38>
    7a04:	4e c0       	rjmp	.+156    	; 0x7aa2 <parseHidReport+0xed4>
						//Keyboard Button
						//check for valid key (0 if only modifier key is being sent)
						if((gReport[4] == 0) ||(gReport[4] >= HID_A && gReport[4] <= HID_KEYPAD_0)){
    7a06:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7a0a:	88 23       	and	r24, r24
    7a0c:	21 f0       	breq	.+8      	; 0x7a16 <parseHidReport+0xe48>
    7a0e:	84 50       	subi	r24, 0x04	; 4
    7a10:	8f 35       	cpi	r24, 0x5F	; 95
    7a12:	08 f0       	brcs	.+2      	; 0x7a16 <parseHidReport+0xe48>
    7a14:	67 c2       	rjmp	.+1230   	; 0x7ee4 <parseHidReport+0x1316>
							//check for valid modifier key (0 if no modifier key)
							if((gReport[5] == 0) ||(gReport[5] >= HID_MODIFIER_NONE && gReport[5] <= HID_MODIFIER_RIGHT_UI)){
    7a16:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <gReport+0x5>
    7a1a:	81 38       	cpi	r24, 0x81	; 129
    7a1c:	08 f0       	brcs	.+2      	; 0x7a20 <parseHidReport+0xe52>
    7a1e:	62 c2       	rjmp	.+1220   	; 0x7ee4 <parseHidReport+0x1316>
								eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7a20:	f0 e0       	ldi	r31, 0x00	; 0
    7a22:	ee 0f       	add	r30, r30
    7a24:	ff 1f       	adc	r31, r31
    7a26:	ec 5d       	subi	r30, 0xDC	; 220
    7a28:	fc 4d       	sbci	r31, 0xDC	; 220
    7a2a:	63 e0       	ldi	r22, 0x03	; 3
    7a2c:	80 81       	ld	r24, Z
    7a2e:	91 81       	ldd	r25, Z+1	; 0x01
    7a30:	43 d7       	rcall	.+3718   	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7a32:	00 e5       	ldi	r16, 0x50	; 80
    7a34:	19 e2       	ldi	r17, 0x29	; 41
    7a36:	d8 01       	movw	r26, r16
    7a38:	12 96       	adiw	r26, 0x02	; 2
    7a3a:	ec 91       	ld	r30, X
    7a3c:	12 97       	sbiw	r26, 0x02	; 2
    7a3e:	f0 e0       	ldi	r31, 0x00	; 0
    7a40:	ee 0f       	add	r30, r30
    7a42:	ff 1f       	adc	r31, r31
    7a44:	e8 52       	subi	r30, 0x28	; 40
    7a46:	fc 4d       	sbci	r31, 0xDC	; 220
    7a48:	14 96       	adiw	r26, 0x04	; 4
    7a4a:	6c 91       	ld	r22, X
    7a4c:	80 81       	ld	r24, Z
    7a4e:	91 81       	ldd	r25, Z+1	; 0x01
    7a50:	33 d7       	rcall	.+3686   	; 0x88b8 <eeprom_write_byte>
								eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7a52:	d8 01       	movw	r26, r16
    7a54:	12 96       	adiw	r26, 0x02	; 2
    7a56:	ec 91       	ld	r30, X
    7a58:	12 97       	sbiw	r26, 0x02	; 2
    7a5a:	f0 e0       	ldi	r31, 0x00	; 0
    7a5c:	ee 0f       	add	r30, r30
    7a5e:	ff 1f       	adc	r31, r31
    7a60:	e2 58       	subi	r30, 0x82	; 130
    7a62:	fc 4d       	sbci	r31, 0xDC	; 220
    7a64:	15 96       	adiw	r26, 0x05	; 5
    7a66:	6c 91       	ld	r22, X
    7a68:	80 81       	ld	r24, Z
    7a6a:	91 81       	ldd	r25, Z+1	; 0x01
    7a6c:	25 d7       	rcall	.+3658   	; 0x88b8 <eeprom_write_byte>
								input_type_lookup[gReport[2]] = gReport[3];
    7a6e:	f8 01       	movw	r30, r16
    7a70:	82 81       	ldd	r24, Z+2	; 0x02
    7a72:	90 e0       	ldi	r25, 0x00	; 0
    7a74:	fc 01       	movw	r30, r24
    7a76:	e0 53       	subi	r30, 0x30	; 48
    7a78:	f6 4d       	sbci	r31, 0xD6	; 214
    7a7a:	d8 01       	movw	r26, r16
    7a7c:	13 96       	adiw	r26, 0x03	; 3
    7a7e:	2c 91       	ld	r18, X
    7a80:	13 97       	sbiw	r26, 0x03	; 3
    7a82:	20 83       	st	Z, r18
								input_value_lookup[gReport[2]] = gReport[4];
    7a84:	fc 01       	movw	r30, r24
    7a86:	ed 55       	subi	r30, 0x5D	; 93
    7a88:	f6 4d       	sbci	r31, 0xD6	; 214
    7a8a:	14 96       	adiw	r26, 0x04	; 4
    7a8c:	2c 91       	ld	r18, X
    7a8e:	14 97       	sbiw	r26, 0x04	; 4
    7a90:	20 83       	st	Z, r18
								input_value2_lookup[gReport[2]] = gReport[5];
    7a92:	fc 01       	movw	r30, r24
    7a94:	ea 58       	subi	r30, 0x8A	; 138
    7a96:	f6 4d       	sbci	r31, 0xD6	; 214
    7a98:	15 96       	adiw	r26, 0x05	; 5
    7a9a:	2c 91       	ld	r18, X
    7a9c:	20 83       	st	Z, r18
								controlSet = 1;
    7a9e:	11 e0       	ldi	r17, 0x01	; 1
    7aa0:	21 c2       	rjmp	.+1090   	; 0x7ee4 <parseHidReport+0x1316>
							}
						}						
					}
					else if(gReport[3] == IT_MOUSE_BUTTON){
    7aa2:	64 30       	cpi	r22, 0x04	; 4
    7aa4:	09 f0       	breq	.+2      	; 0x7aa8 <parseHidReport+0xeda>
    7aa6:	1e c2       	rjmp	.+1084   	; 0x7ee4 <parseHidReport+0x1316>
						//Mouse Button
						if(gReport[4] > 0 && gReport[4] <= NUM_MOUSE_BUTTONS){
    7aa8:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7aac:	81 50       	subi	r24, 0x01	; 1
    7aae:	83 30       	cpi	r24, 0x03	; 3
    7ab0:	08 f0       	brcs	.+2      	; 0x7ab4 <parseHidReport+0xee6>
    7ab2:	18 c2       	rjmp	.+1072   	; 0x7ee4 <parseHidReport+0x1316>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7ab4:	f0 e0       	ldi	r31, 0x00	; 0
    7ab6:	ee 0f       	add	r30, r30
    7ab8:	ff 1f       	adc	r31, r31
    7aba:	ec 5d       	subi	r30, 0xDC	; 220
    7abc:	fc 4d       	sbci	r31, 0xDC	; 220
    7abe:	80 81       	ld	r24, Z
    7ac0:	91 81       	ldd	r25, Z+1	; 0x01
    7ac2:	fa d6       	rcall	.+3572   	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7ac4:	00 e5       	ldi	r16, 0x50	; 80
    7ac6:	19 e2       	ldi	r17, 0x29	; 41
    7ac8:	d8 01       	movw	r26, r16
    7aca:	12 96       	adiw	r26, 0x02	; 2
    7acc:	ec 91       	ld	r30, X
    7ace:	12 97       	sbiw	r26, 0x02	; 2
    7ad0:	f0 e0       	ldi	r31, 0x00	; 0
    7ad2:	ee 0f       	add	r30, r30
    7ad4:	ff 1f       	adc	r31, r31
    7ad6:	e8 52       	subi	r30, 0x28	; 40
    7ad8:	fc 4d       	sbci	r31, 0xDC	; 220
    7ada:	14 96       	adiw	r26, 0x04	; 4
    7adc:	6c 91       	ld	r22, X
    7ade:	80 81       	ld	r24, Z
    7ae0:	91 81       	ldd	r25, Z+1	; 0x01
    7ae2:	ea d6       	rcall	.+3540   	; 0x88b8 <eeprom_write_byte>
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7ae4:	d8 01       	movw	r26, r16
    7ae6:	12 96       	adiw	r26, 0x02	; 2
    7ae8:	ec 91       	ld	r30, X
    7aea:	12 97       	sbiw	r26, 0x02	; 2
    7aec:	f0 e0       	ldi	r31, 0x00	; 0
    7aee:	ee 0f       	add	r30, r30
    7af0:	ff 1f       	adc	r31, r31
    7af2:	e2 58       	subi	r30, 0x82	; 130
    7af4:	fc 4d       	sbci	r31, 0xDC	; 220
    7af6:	15 96       	adiw	r26, 0x05	; 5
    7af8:	6c 91       	ld	r22, X
    7afa:	80 81       	ld	r24, Z
    7afc:	91 81       	ldd	r25, Z+1	; 0x01
    7afe:	dc d6       	rcall	.+3512   	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    7b00:	f8 01       	movw	r30, r16
    7b02:	82 81       	ldd	r24, Z+2	; 0x02
    7b04:	90 e0       	ldi	r25, 0x00	; 0
    7b06:	fc 01       	movw	r30, r24
    7b08:	e0 53       	subi	r30, 0x30	; 48
    7b0a:	f6 4d       	sbci	r31, 0xD6	; 214
    7b0c:	d8 01       	movw	r26, r16
    7b0e:	13 96       	adiw	r26, 0x03	; 3
    7b10:	2c 91       	ld	r18, X
    7b12:	13 97       	sbiw	r26, 0x03	; 3
    7b14:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    7b16:	fc 01       	movw	r30, r24
    7b18:	ed 55       	subi	r30, 0x5D	; 93
    7b1a:	f6 4d       	sbci	r31, 0xD6	; 214
    7b1c:	14 96       	adiw	r26, 0x04	; 4
    7b1e:	2c 91       	ld	r18, X
    7b20:	14 97       	sbiw	r26, 0x04	; 4
    7b22:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    7b24:	fc 01       	movw	r30, r24
    7b26:	ea 58       	subi	r30, 0x8A	; 138
    7b28:	f6 4d       	sbci	r31, 0xD6	; 214
    7b2a:	15 96       	adiw	r26, 0x05	; 5
    7b2c:	2c 91       	ld	r18, X
    7b2e:	20 83       	st	Z, r18
							controlSet = 1;
    7b30:	11 e0       	ldi	r17, 0x01	; 1
    7b32:	d8 c1       	rjmp	.+944    	; 0x7ee4 <parseHidReport+0x1316>
						}
					}				
				}
				
				//Accelerometer
				else if(gReport[2] >= ACCEL_XAXIS_LKUP_INDEX && gReport[2] <= ACCEL_ZAXIS_LKUP_INDEX){
    7b34:	86 ed       	ldi	r24, 0xD6	; 214
    7b36:	8e 0f       	add	r24, r30
    7b38:	83 30       	cpi	r24, 0x03	; 3
    7b3a:	08 f0       	brcs	.+2      	; 0x7b3e <parseHidReport+0xf70>
    7b3c:	d3 c1       	rjmp	.+934    	; 0x7ee4 <parseHidReport+0x1316>
					//Accelerometer can be IT_NOTHING, IT_JOY_BUTTON, IT_KEYBOARD, or IT_MOUSE_BUTTON, JOY_ANA_x
					
					if(gReport[2] == ACCEL_XAXIS_LKUP_INDEX){
    7b3e:	ea 32       	cpi	r30, 0x2A	; 42
    7b40:	c9 f4       	brne	.+50     	; 0x7b74 <parseHidReport+0xfa6>
						eeprom_write_byte(ACCEL_XAXIS_MIN_TRIG_ADDR, gReport[6]);
    7b42:	0f 2e       	mov	r0, r31
    7b44:	f0 e5       	ldi	r31, 0x50	; 80
    7b46:	ef 2e       	mov	r14, r31
    7b48:	f9 e2       	ldi	r31, 0x29	; 41
    7b4a:	ff 2e       	mov	r15, r31
    7b4c:	f0 2d       	mov	r31, r0
    7b4e:	f7 01       	movw	r30, r14
    7b50:	66 81       	ldd	r22, Z+6	; 0x06
    7b52:	87 ee       	ldi	r24, 0xE7	; 231
    7b54:	90 e0       	ldi	r25, 0x00	; 0
						eeprom_write_byte(ACCEL_XAXIS_MAX_TRIG_ADDR, gReport[7]);
    7b56:	b0 d6       	rcall	.+3424   	; 0x88b8 <eeprom_write_byte>
    7b58:	d7 01       	movw	r26, r14
    7b5a:	17 96       	adiw	r26, 0x07	; 7
    7b5c:	6c 91       	ld	r22, X
    7b5e:	8a ee       	ldi	r24, 0xEA	; 234
    7b60:	90 e0       	ldi	r25, 0x00	; 0
    7b62:	aa d6       	rcall	.+3412   	; 0x88b8 <eeprom_write_byte>
						gAccelMinTrig[0] = gReport[6];
    7b64:	f7 01       	movw	r30, r14
    7b66:	86 81       	ldd	r24, Z+6	; 0x06
    7b68:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <gAccelMinTrig>
						gAccelMaxTrig[0] = gReport[7];
    7b6c:	87 81       	ldd	r24, Z+7	; 0x07
    7b6e:	80 93 42 29 	sts	0x2942, r24	; 0x802942 <gAccelMaxTrig>
    7b72:	38 c0       	rjmp	.+112    	; 0x7be4 <parseHidReport+0x1016>
					}
					else if(gReport[2] == ACCEL_YAXIS_LKUP_INDEX){
    7b74:	eb 32       	cpi	r30, 0x2B	; 43
						eeprom_write_byte(ACCEL_YAXIS_MIN_TRIG_ADDR, gReport[6]);
    7b76:	e1 f4       	brne	.+56     	; 0x7bb0 <parseHidReport+0xfe2>
    7b78:	0f 2e       	mov	r0, r31
    7b7a:	f0 e5       	ldi	r31, 0x50	; 80
    7b7c:	ef 2e       	mov	r14, r31
    7b7e:	f9 e2       	ldi	r31, 0x29	; 41
    7b80:	ff 2e       	mov	r15, r31
    7b82:	f0 2d       	mov	r31, r0
    7b84:	d7 01       	movw	r26, r14
    7b86:	16 96       	adiw	r26, 0x06	; 6
    7b88:	6c 91       	ld	r22, X
    7b8a:	88 ee       	ldi	r24, 0xE8	; 232
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
						eeprom_write_byte(ACCEL_YAXIS_MAX_TRIG_ADDR, gReport[7]);
    7b8e:	94 d6       	rcall	.+3368   	; 0x88b8 <eeprom_write_byte>
    7b90:	f7 01       	movw	r30, r14
    7b92:	67 81       	ldd	r22, Z+7	; 0x07
    7b94:	8b ee       	ldi	r24, 0xEB	; 235
    7b96:	90 e0       	ldi	r25, 0x00	; 0
    7b98:	8f d6       	rcall	.+3358   	; 0x88b8 <eeprom_write_byte>
						gAccelMinTrig[1] = gReport[6];
    7b9a:	d7 01       	movw	r26, r14
    7b9c:	16 96       	adiw	r26, 0x06	; 6
    7b9e:	8c 91       	ld	r24, X
    7ba0:	16 97       	sbiw	r26, 0x06	; 6
    7ba2:	80 93 46 29 	sts	0x2946, r24	; 0x802946 <gAccelMinTrig+0x1>
						gAccelMaxTrig[1] = gReport[7];
    7ba6:	17 96       	adiw	r26, 0x07	; 7
    7ba8:	8c 91       	ld	r24, X
    7baa:	80 93 43 29 	sts	0x2943, r24	; 0x802943 <gAccelMaxTrig+0x1>
					}
					else if(gReport[2] == ACCEL_ZAXIS_LKUP_INDEX){
    7bae:	1a c0       	rjmp	.+52     	; 0x7be4 <parseHidReport+0x1016>
    7bb0:	ec 32       	cpi	r30, 0x2C	; 44
						eeprom_write_byte(ACCEL_ZAXIS_MIN_TRIG_ADDR, gReport[6]);
    7bb2:	c1 f4       	brne	.+48     	; 0x7be4 <parseHidReport+0x1016>
    7bb4:	0f 2e       	mov	r0, r31
    7bb6:	f0 e5       	ldi	r31, 0x50	; 80
    7bb8:	ef 2e       	mov	r14, r31
    7bba:	f9 e2       	ldi	r31, 0x29	; 41
    7bbc:	ff 2e       	mov	r15, r31
    7bbe:	f0 2d       	mov	r31, r0
    7bc0:	f7 01       	movw	r30, r14
    7bc2:	66 81       	ldd	r22, Z+6	; 0x06
    7bc4:	89 ee       	ldi	r24, 0xE9	; 233
    7bc6:	90 e0       	ldi	r25, 0x00	; 0
						eeprom_write_byte(ACCEL_ZAXIS_MAX_TRIG_ADDR, gReport[7]);
    7bc8:	77 d6       	rcall	.+3310   	; 0x88b8 <eeprom_write_byte>
    7bca:	d7 01       	movw	r26, r14
    7bcc:	17 96       	adiw	r26, 0x07	; 7
    7bce:	6c 91       	ld	r22, X
    7bd0:	8c ee       	ldi	r24, 0xEC	; 236
    7bd2:	90 e0       	ldi	r25, 0x00	; 0
    7bd4:	71 d6       	rcall	.+3298   	; 0x88b8 <eeprom_write_byte>
						gAccelMinTrig[2] = gReport[6];
    7bd6:	f7 01       	movw	r30, r14
    7bd8:	86 81       	ldd	r24, Z+6	; 0x06
    7bda:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <gAccelMinTrig+0x2>
						gAccelMaxTrig[2] = gReport[7];
    7bde:	87 81       	ldd	r24, Z+7	; 0x07
    7be0:	80 93 44 29 	sts	0x2944, r24	; 0x802944 <gAccelMaxTrig+0x2>
					}
					
					if(gReport[3] == IT_NOTHING){
    7be4:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
    7be8:	61 11       	cpse	r22, r1
						//No assignment for this pin
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7bea:	43 c0       	rjmp	.+134    	; 0x7c72 <parseHidReport+0x10a4>
    7bec:	00 e5       	ldi	r16, 0x50	; 80
    7bee:	19 e2       	ldi	r17, 0x29	; 41
    7bf0:	d8 01       	movw	r26, r16
    7bf2:	12 96       	adiw	r26, 0x02	; 2
    7bf4:	ec 91       	ld	r30, X
    7bf6:	f0 e0       	ldi	r31, 0x00	; 0
    7bf8:	ee 0f       	add	r30, r30
    7bfa:	ff 1f       	adc	r31, r31
    7bfc:	ec 5d       	subi	r30, 0xDC	; 220
    7bfe:	fc 4d       	sbci	r31, 0xDC	; 220
    7c00:	80 81       	ld	r24, Z
    7c02:	91 81       	ldd	r25, Z+1	; 0x01
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7c04:	59 d6       	rcall	.+3250   	; 0x88b8 <eeprom_write_byte>
    7c06:	d8 01       	movw	r26, r16
    7c08:	12 96       	adiw	r26, 0x02	; 2
    7c0a:	ec 91       	ld	r30, X
    7c0c:	12 97       	sbiw	r26, 0x02	; 2
    7c0e:	f0 e0       	ldi	r31, 0x00	; 0
    7c10:	ee 0f       	add	r30, r30
    7c12:	ff 1f       	adc	r31, r31
    7c14:	e8 52       	subi	r30, 0x28	; 40
    7c16:	fc 4d       	sbci	r31, 0xDC	; 220
    7c18:	14 96       	adiw	r26, 0x04	; 4
    7c1a:	6c 91       	ld	r22, X
    7c1c:	80 81       	ld	r24, Z
    7c1e:	91 81       	ldd	r25, Z+1	; 0x01
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7c20:	4b d6       	rcall	.+3222   	; 0x88b8 <eeprom_write_byte>
    7c22:	d8 01       	movw	r26, r16
    7c24:	12 96       	adiw	r26, 0x02	; 2
    7c26:	ec 91       	ld	r30, X
    7c28:	12 97       	sbiw	r26, 0x02	; 2
    7c2a:	f0 e0       	ldi	r31, 0x00	; 0
    7c2c:	ee 0f       	add	r30, r30
    7c2e:	ff 1f       	adc	r31, r31
    7c30:	e2 58       	subi	r30, 0x82	; 130
    7c32:	fc 4d       	sbci	r31, 0xDC	; 220
    7c34:	15 96       	adiw	r26, 0x05	; 5
    7c36:	6c 91       	ld	r22, X
    7c38:	80 81       	ld	r24, Z
    7c3a:	91 81       	ldd	r25, Z+1	; 0x01
    7c3c:	3d d6       	rcall	.+3194   	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    7c3e:	f8 01       	movw	r30, r16
    7c40:	82 81       	ldd	r24, Z+2	; 0x02
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	fc 01       	movw	r30, r24
    7c46:	e0 53       	subi	r30, 0x30	; 48
    7c48:	f6 4d       	sbci	r31, 0xD6	; 214
    7c4a:	d8 01       	movw	r26, r16
    7c4c:	13 96       	adiw	r26, 0x03	; 3
    7c4e:	2c 91       	ld	r18, X
    7c50:	13 97       	sbiw	r26, 0x03	; 3
    7c52:	20 83       	st	Z, r18
						input_value_lookup[gReport[2]] = gReport[4];
    7c54:	fc 01       	movw	r30, r24
    7c56:	ed 55       	subi	r30, 0x5D	; 93
    7c58:	f6 4d       	sbci	r31, 0xD6	; 214
    7c5a:	14 96       	adiw	r26, 0x04	; 4
    7c5c:	2c 91       	ld	r18, X
    7c5e:	14 97       	sbiw	r26, 0x04	; 4
    7c60:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    7c62:	fc 01       	movw	r30, r24
    7c64:	ea 58       	subi	r30, 0x8A	; 138
    7c66:	f6 4d       	sbci	r31, 0xD6	; 214
    7c68:	15 96       	adiw	r26, 0x05	; 5
    7c6a:	2c 91       	ld	r18, X
    7c6c:	20 83       	st	Z, r18
						controlSet = 1;
    7c6e:	11 e0       	ldi	r17, 0x01	; 1
    7c70:	39 c1       	rjmp	.+626    	; 0x7ee4 <parseHidReport+0x1316>
					}
					else if((gReport[3] == IT_JOY1_BUTTON)||(gReport[3] == IT_JOY2_BUTTON)){
    7c72:	8f ef       	ldi	r24, 0xFF	; 255
    7c74:	86 0f       	add	r24, r22
    7c76:	82 30       	cpi	r24, 0x02	; 2
    7c78:	08 f0       	brcs	.+2      	; 0x7c7c <parseHidReport+0x10ae>
						//Joystick Button (the value is the accelerometer threshold to trigger joystick button)
						if(gReport[4] > 0 && gReport[4] <= NUM_JOYSTICK_BUTTONS){
    7c7a:	49 c0       	rjmp	.+146    	; 0x7d0e <parseHidReport+0x1140>
    7c7c:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7c80:	81 50       	subi	r24, 0x01	; 1
    7c82:	80 32       	cpi	r24, 0x20	; 32
    7c84:	08 f0       	brcs	.+2      	; 0x7c88 <parseHidReport+0x10ba>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7c86:	2e c1       	rjmp	.+604    	; 0x7ee4 <parseHidReport+0x1316>
    7c88:	00 e5       	ldi	r16, 0x50	; 80
    7c8a:	19 e2       	ldi	r17, 0x29	; 41
    7c8c:	d8 01       	movw	r26, r16
    7c8e:	12 96       	adiw	r26, 0x02	; 2
    7c90:	ec 91       	ld	r30, X
    7c92:	f0 e0       	ldi	r31, 0x00	; 0
    7c94:	ee 0f       	add	r30, r30
    7c96:	ff 1f       	adc	r31, r31
    7c98:	ec 5d       	subi	r30, 0xDC	; 220
    7c9a:	fc 4d       	sbci	r31, 0xDC	; 220
    7c9c:	80 81       	ld	r24, Z
    7c9e:	91 81       	ldd	r25, Z+1	; 0x01
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7ca0:	0b d6       	rcall	.+3094   	; 0x88b8 <eeprom_write_byte>
    7ca2:	d8 01       	movw	r26, r16
    7ca4:	12 96       	adiw	r26, 0x02	; 2
    7ca6:	ec 91       	ld	r30, X
    7ca8:	12 97       	sbiw	r26, 0x02	; 2
    7caa:	f0 e0       	ldi	r31, 0x00	; 0
    7cac:	ee 0f       	add	r30, r30
    7cae:	ff 1f       	adc	r31, r31
    7cb0:	e8 52       	subi	r30, 0x28	; 40
    7cb2:	fc 4d       	sbci	r31, 0xDC	; 220
    7cb4:	14 96       	adiw	r26, 0x04	; 4
    7cb6:	6c 91       	ld	r22, X
    7cb8:	80 81       	ld	r24, Z
    7cba:	91 81       	ldd	r25, Z+1	; 0x01
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7cbc:	fd d5       	rcall	.+3066   	; 0x88b8 <eeprom_write_byte>
    7cbe:	d8 01       	movw	r26, r16
    7cc0:	12 96       	adiw	r26, 0x02	; 2
    7cc2:	ec 91       	ld	r30, X
    7cc4:	12 97       	sbiw	r26, 0x02	; 2
    7cc6:	f0 e0       	ldi	r31, 0x00	; 0
    7cc8:	ee 0f       	add	r30, r30
    7cca:	ff 1f       	adc	r31, r31
    7ccc:	e2 58       	subi	r30, 0x82	; 130
    7cce:	fc 4d       	sbci	r31, 0xDC	; 220
    7cd0:	15 96       	adiw	r26, 0x05	; 5
    7cd2:	6c 91       	ld	r22, X
    7cd4:	80 81       	ld	r24, Z
    7cd6:	91 81       	ldd	r25, Z+1	; 0x01
    7cd8:	ef d5       	rcall	.+3038   	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    7cda:	f8 01       	movw	r30, r16
    7cdc:	82 81       	ldd	r24, Z+2	; 0x02
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	e0 53       	subi	r30, 0x30	; 48
    7ce4:	f6 4d       	sbci	r31, 0xD6	; 214
    7ce6:	d8 01       	movw	r26, r16
    7ce8:	13 96       	adiw	r26, 0x03	; 3
    7cea:	2c 91       	ld	r18, X
    7cec:	13 97       	sbiw	r26, 0x03	; 3
    7cee:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    7cf0:	fc 01       	movw	r30, r24
    7cf2:	ed 55       	subi	r30, 0x5D	; 93
    7cf4:	f6 4d       	sbci	r31, 0xD6	; 214
    7cf6:	14 96       	adiw	r26, 0x04	; 4
    7cf8:	2c 91       	ld	r18, X
    7cfa:	14 97       	sbiw	r26, 0x04	; 4
    7cfc:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    7cfe:	fc 01       	movw	r30, r24
    7d00:	ea 58       	subi	r30, 0x8A	; 138
    7d02:	f6 4d       	sbci	r31, 0xD6	; 214
    7d04:	15 96       	adiw	r26, 0x05	; 5
    7d06:	2c 91       	ld	r18, X
    7d08:	20 83       	st	Z, r18
							controlSet = 1;
    7d0a:	11 e0       	ldi	r17, 0x01	; 1
    7d0c:	eb c0       	rjmp	.+470    	; 0x7ee4 <parseHidReport+0x1316>
						}
					}
					else if(gReport[3] == IT_KEYBOARD){
    7d0e:	63 30       	cpi	r22, 0x03	; 3
    7d10:	09 f0       	breq	.+2      	; 0x7d14 <parseHidReport+0x1146>
    7d12:	51 c0       	rjmp	.+162    	; 0x7db6 <parseHidReport+0x11e8>
						//Keyboard Button (the value is the accelerometer threshold to trigger key press)
						//check for valid key (0 if only modifier key is being sent)
						if((gReport[4] == 0) ||(gReport[4] >= HID_A && gReport[4] <= HID_KEYPAD_0)){
    7d14:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7d18:	88 23       	and	r24, r24
    7d1a:	21 f0       	breq	.+8      	; 0x7d24 <parseHidReport+0x1156>
    7d1c:	84 50       	subi	r24, 0x04	; 4
    7d1e:	8f 35       	cpi	r24, 0x5F	; 95
    7d20:	08 f0       	brcs	.+2      	; 0x7d24 <parseHidReport+0x1156>
							//check for valid modifier key (0 if no modifier key)
							if((gReport[5] == 0) ||(gReport[5] >= HID_MODIFIER_NONE && gReport[5] <= HID_MODIFIER_RIGHT_UI)){
    7d22:	e0 c0       	rjmp	.+448    	; 0x7ee4 <parseHidReport+0x1316>
    7d24:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <gReport+0x5>
    7d28:	81 38       	cpi	r24, 0x81	; 129
    7d2a:	08 f0       	brcs	.+2      	; 0x7d2e <parseHidReport+0x1160>
								eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7d2c:	db c0       	rjmp	.+438    	; 0x7ee4 <parseHidReport+0x1316>
    7d2e:	00 e5       	ldi	r16, 0x50	; 80
    7d30:	19 e2       	ldi	r17, 0x29	; 41
    7d32:	d8 01       	movw	r26, r16
    7d34:	12 96       	adiw	r26, 0x02	; 2
    7d36:	ec 91       	ld	r30, X
    7d38:	f0 e0       	ldi	r31, 0x00	; 0
    7d3a:	ee 0f       	add	r30, r30
    7d3c:	ff 1f       	adc	r31, r31
    7d3e:	ec 5d       	subi	r30, 0xDC	; 220
    7d40:	fc 4d       	sbci	r31, 0xDC	; 220
    7d42:	63 e0       	ldi	r22, 0x03	; 3
    7d44:	80 81       	ld	r24, Z
    7d46:	91 81       	ldd	r25, Z+1	; 0x01
								eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7d48:	b7 d5       	rcall	.+2926   	; 0x88b8 <eeprom_write_byte>
    7d4a:	d8 01       	movw	r26, r16
    7d4c:	12 96       	adiw	r26, 0x02	; 2
    7d4e:	ec 91       	ld	r30, X
    7d50:	12 97       	sbiw	r26, 0x02	; 2
    7d52:	f0 e0       	ldi	r31, 0x00	; 0
    7d54:	ee 0f       	add	r30, r30
    7d56:	ff 1f       	adc	r31, r31
    7d58:	e8 52       	subi	r30, 0x28	; 40
    7d5a:	fc 4d       	sbci	r31, 0xDC	; 220
    7d5c:	14 96       	adiw	r26, 0x04	; 4
    7d5e:	6c 91       	ld	r22, X
    7d60:	80 81       	ld	r24, Z
    7d62:	91 81       	ldd	r25, Z+1	; 0x01
								eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7d64:	a9 d5       	rcall	.+2898   	; 0x88b8 <eeprom_write_byte>
    7d66:	d8 01       	movw	r26, r16
    7d68:	12 96       	adiw	r26, 0x02	; 2
    7d6a:	ec 91       	ld	r30, X
    7d6c:	12 97       	sbiw	r26, 0x02	; 2
    7d6e:	f0 e0       	ldi	r31, 0x00	; 0
    7d70:	ee 0f       	add	r30, r30
    7d72:	ff 1f       	adc	r31, r31
    7d74:	e2 58       	subi	r30, 0x82	; 130
    7d76:	fc 4d       	sbci	r31, 0xDC	; 220
    7d78:	15 96       	adiw	r26, 0x05	; 5
    7d7a:	6c 91       	ld	r22, X
    7d7c:	80 81       	ld	r24, Z
    7d7e:	91 81       	ldd	r25, Z+1	; 0x01
    7d80:	9b d5       	rcall	.+2870   	; 0x88b8 <eeprom_write_byte>
								input_type_lookup[gReport[2]] = gReport[3];
    7d82:	f8 01       	movw	r30, r16
    7d84:	82 81       	ldd	r24, Z+2	; 0x02
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	fc 01       	movw	r30, r24
    7d8a:	e0 53       	subi	r30, 0x30	; 48
    7d8c:	f6 4d       	sbci	r31, 0xD6	; 214
    7d8e:	d8 01       	movw	r26, r16
    7d90:	13 96       	adiw	r26, 0x03	; 3
    7d92:	2c 91       	ld	r18, X
    7d94:	13 97       	sbiw	r26, 0x03	; 3
    7d96:	20 83       	st	Z, r18
								input_value_lookup[gReport[2]] = gReport[4];
    7d98:	fc 01       	movw	r30, r24
    7d9a:	ed 55       	subi	r30, 0x5D	; 93
    7d9c:	f6 4d       	sbci	r31, 0xD6	; 214
    7d9e:	14 96       	adiw	r26, 0x04	; 4
    7da0:	2c 91       	ld	r18, X
    7da2:	14 97       	sbiw	r26, 0x04	; 4
    7da4:	20 83       	st	Z, r18
								input_value2_lookup[gReport[2]] = gReport[5];
    7da6:	fc 01       	movw	r30, r24
    7da8:	ea 58       	subi	r30, 0x8A	; 138
    7daa:	f6 4d       	sbci	r31, 0xD6	; 214
    7dac:	15 96       	adiw	r26, 0x05	; 5
    7dae:	2c 91       	ld	r18, X
								controlSet = 1;
    7db0:	20 83       	st	Z, r18
    7db2:	11 e0       	ldi	r17, 0x01	; 1
							}
						}
					}
					else if(gReport[3] == IT_MOUSE_BUTTON){
    7db4:	97 c0       	rjmp	.+302    	; 0x7ee4 <parseHidReport+0x1316>
    7db6:	64 30       	cpi	r22, 0x04	; 4
    7db8:	09 f0       	breq	.+2      	; 0x7dbc <parseHidReport+0x11ee>
						//Mouse Button (the value is the accelerometer threshold to trigger mouse button)
						if(gReport[4] > 0 && gReport[4] <= NUM_MOUSE_BUTTONS){
    7dba:	49 c0       	rjmp	.+146    	; 0x7e4e <parseHidReport+0x1280>
    7dbc:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <gReport+0x4>
    7dc0:	81 50       	subi	r24, 0x01	; 1
    7dc2:	83 30       	cpi	r24, 0x03	; 3
    7dc4:	08 f0       	brcs	.+2      	; 0x7dc8 <parseHidReport+0x11fa>
							eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7dc6:	8e c0       	rjmp	.+284    	; 0x7ee4 <parseHidReport+0x1316>
    7dc8:	00 e5       	ldi	r16, 0x50	; 80
    7dca:	19 e2       	ldi	r17, 0x29	; 41
    7dcc:	d8 01       	movw	r26, r16
    7dce:	12 96       	adiw	r26, 0x02	; 2
    7dd0:	ec 91       	ld	r30, X
    7dd2:	f0 e0       	ldi	r31, 0x00	; 0
    7dd4:	ee 0f       	add	r30, r30
    7dd6:	ff 1f       	adc	r31, r31
    7dd8:	ec 5d       	subi	r30, 0xDC	; 220
    7dda:	fc 4d       	sbci	r31, 0xDC	; 220
    7ddc:	80 81       	ld	r24, Z
    7dde:	91 81       	ldd	r25, Z+1	; 0x01
							eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7de0:	6b d5       	rcall	.+2774   	; 0x88b8 <eeprom_write_byte>
    7de2:	d8 01       	movw	r26, r16
    7de4:	12 96       	adiw	r26, 0x02	; 2
    7de6:	ec 91       	ld	r30, X
    7de8:	12 97       	sbiw	r26, 0x02	; 2
    7dea:	f0 e0       	ldi	r31, 0x00	; 0
    7dec:	ee 0f       	add	r30, r30
    7dee:	ff 1f       	adc	r31, r31
    7df0:	e8 52       	subi	r30, 0x28	; 40
    7df2:	fc 4d       	sbci	r31, 0xDC	; 220
    7df4:	14 96       	adiw	r26, 0x04	; 4
    7df6:	6c 91       	ld	r22, X
    7df8:	80 81       	ld	r24, Z
    7dfa:	91 81       	ldd	r25, Z+1	; 0x01
							eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7dfc:	5d d5       	rcall	.+2746   	; 0x88b8 <eeprom_write_byte>
    7dfe:	d8 01       	movw	r26, r16
    7e00:	12 96       	adiw	r26, 0x02	; 2
    7e02:	ec 91       	ld	r30, X
    7e04:	12 97       	sbiw	r26, 0x02	; 2
    7e06:	f0 e0       	ldi	r31, 0x00	; 0
    7e08:	ee 0f       	add	r30, r30
    7e0a:	ff 1f       	adc	r31, r31
    7e0c:	e2 58       	subi	r30, 0x82	; 130
    7e0e:	fc 4d       	sbci	r31, 0xDC	; 220
    7e10:	15 96       	adiw	r26, 0x05	; 5
    7e12:	6c 91       	ld	r22, X
    7e14:	80 81       	ld	r24, Z
    7e16:	91 81       	ldd	r25, Z+1	; 0x01
    7e18:	4f d5       	rcall	.+2718   	; 0x88b8 <eeprom_write_byte>
							input_type_lookup[gReport[2]] = gReport[3];
    7e1a:	f8 01       	movw	r30, r16
    7e1c:	82 81       	ldd	r24, Z+2	; 0x02
    7e1e:	90 e0       	ldi	r25, 0x00	; 0
    7e20:	fc 01       	movw	r30, r24
    7e22:	e0 53       	subi	r30, 0x30	; 48
    7e24:	f6 4d       	sbci	r31, 0xD6	; 214
    7e26:	d8 01       	movw	r26, r16
    7e28:	13 96       	adiw	r26, 0x03	; 3
    7e2a:	2c 91       	ld	r18, X
    7e2c:	13 97       	sbiw	r26, 0x03	; 3
    7e2e:	20 83       	st	Z, r18
							input_value_lookup[gReport[2]] = gReport[4];
    7e30:	fc 01       	movw	r30, r24
    7e32:	ed 55       	subi	r30, 0x5D	; 93
    7e34:	f6 4d       	sbci	r31, 0xD6	; 214
    7e36:	14 96       	adiw	r26, 0x04	; 4
    7e38:	2c 91       	ld	r18, X
    7e3a:	14 97       	sbiw	r26, 0x04	; 4
    7e3c:	20 83       	st	Z, r18
							input_value2_lookup[gReport[2]] = gReport[5];
    7e3e:	fc 01       	movw	r30, r24
    7e40:	ea 58       	subi	r30, 0x8A	; 138
    7e42:	f6 4d       	sbci	r31, 0xD6	; 214
    7e44:	15 96       	adiw	r26, 0x05	; 5
    7e46:	2c 91       	ld	r18, X
							controlSet = 1;
    7e48:	20 83       	st	Z, r18
    7e4a:	11 e0       	ldi	r17, 0x01	; 1
						}
					}
					else if((gReport[3] >= IT_JOY1_ANA_THROTTLE && gReport[3] <= IT_JOY1_ANA_SLIDER)||(gReport[3] >= IT_JOY2_ANA_THROTTLE && gReport[3] <= IT_JOY2_ANA_SLIDER)){
    7e4c:	4b c0       	rjmp	.+150    	; 0x7ee4 <parseHidReport+0x1316>
    7e4e:	80 ee       	ldi	r24, 0xE0	; 224
    7e50:	86 0f       	add	r24, r22
    7e52:	88 30       	cpi	r24, 0x08	; 8
    7e54:	28 f0       	brcs	.+10     	; 0x7e60 <parseHidReport+0x1292>
    7e56:	80 e8       	ldi	r24, 0x80	; 128
    7e58:	86 0f       	add	r24, r22
    7e5a:	88 30       	cpi	r24, 0x08	; 8
						//Analog Axis
						eeprom_write_byte(eeprom_input_type_look_up[gReport[2]],gReport[3]);
    7e5c:	08 f0       	brcs	.+2      	; 0x7e60 <parseHidReport+0x1292>
    7e5e:	42 c0       	rjmp	.+132    	; 0x7ee4 <parseHidReport+0x1316>
    7e60:	00 e5       	ldi	r16, 0x50	; 80
    7e62:	19 e2       	ldi	r17, 0x29	; 41
    7e64:	d8 01       	movw	r26, r16
    7e66:	12 96       	adiw	r26, 0x02	; 2
    7e68:	ec 91       	ld	r30, X
    7e6a:	f0 e0       	ldi	r31, 0x00	; 0
    7e6c:	ee 0f       	add	r30, r30
    7e6e:	ff 1f       	adc	r31, r31
    7e70:	ec 5d       	subi	r30, 0xDC	; 220
    7e72:	fc 4d       	sbci	r31, 0xDC	; 220
    7e74:	80 81       	ld	r24, Z
						eeprom_write_byte(eeprom_input_value_look_up[gReport[2]],gReport[4]);
    7e76:	91 81       	ldd	r25, Z+1	; 0x01
    7e78:	1f d5       	rcall	.+2622   	; 0x88b8 <eeprom_write_byte>
    7e7a:	d8 01       	movw	r26, r16
    7e7c:	12 96       	adiw	r26, 0x02	; 2
    7e7e:	ec 91       	ld	r30, X
    7e80:	12 97       	sbiw	r26, 0x02	; 2
    7e82:	f0 e0       	ldi	r31, 0x00	; 0
    7e84:	ee 0f       	add	r30, r30
    7e86:	ff 1f       	adc	r31, r31
    7e88:	e8 52       	subi	r30, 0x28	; 40
    7e8a:	fc 4d       	sbci	r31, 0xDC	; 220
    7e8c:	14 96       	adiw	r26, 0x04	; 4
    7e8e:	6c 91       	ld	r22, X
    7e90:	80 81       	ld	r24, Z
    7e92:	91 81       	ldd	r25, Z+1	; 0x01
						eeprom_write_byte(eeprom_input_value2_look_up[gReport[2]],gReport[5]);
    7e94:	11 d5       	rcall	.+2594   	; 0x88b8 <eeprom_write_byte>
    7e96:	d8 01       	movw	r26, r16
    7e98:	12 96       	adiw	r26, 0x02	; 2
    7e9a:	ec 91       	ld	r30, X
    7e9c:	12 97       	sbiw	r26, 0x02	; 2
    7e9e:	f0 e0       	ldi	r31, 0x00	; 0
    7ea0:	ee 0f       	add	r30, r30
    7ea2:	ff 1f       	adc	r31, r31
    7ea4:	e2 58       	subi	r30, 0x82	; 130
    7ea6:	fc 4d       	sbci	r31, 0xDC	; 220
    7ea8:	15 96       	adiw	r26, 0x05	; 5
    7eaa:	6c 91       	ld	r22, X
    7eac:	80 81       	ld	r24, Z
    7eae:	91 81       	ldd	r25, Z+1	; 0x01
    7eb0:	03 d5       	rcall	.+2566   	; 0x88b8 <eeprom_write_byte>
						input_type_lookup[gReport[2]] = gReport[3];
    7eb2:	f8 01       	movw	r30, r16
    7eb4:	82 81       	ldd	r24, Z+2	; 0x02
    7eb6:	90 e0       	ldi	r25, 0x00	; 0
    7eb8:	fc 01       	movw	r30, r24
    7eba:	e0 53       	subi	r30, 0x30	; 48
    7ebc:	f6 4d       	sbci	r31, 0xD6	; 214
    7ebe:	d8 01       	movw	r26, r16
    7ec0:	13 96       	adiw	r26, 0x03	; 3
    7ec2:	2c 91       	ld	r18, X
    7ec4:	13 97       	sbiw	r26, 0x03	; 3
    7ec6:	20 83       	st	Z, r18
						input_value_lookup[gReport[2]] = gReport[4];
    7ec8:	fc 01       	movw	r30, r24
    7eca:	ed 55       	subi	r30, 0x5D	; 93
    7ecc:	f6 4d       	sbci	r31, 0xD6	; 214
    7ece:	14 96       	adiw	r26, 0x04	; 4
    7ed0:	2c 91       	ld	r18, X
    7ed2:	14 97       	sbiw	r26, 0x04	; 4
    7ed4:	20 83       	st	Z, r18
						input_value2_lookup[gReport[2]] = gReport[5];
    7ed6:	fc 01       	movw	r30, r24
    7ed8:	ea 58       	subi	r30, 0x8A	; 138
    7eda:	f6 4d       	sbci	r31, 0xD6	; 214
    7edc:	15 96       	adiw	r26, 0x05	; 5
    7ede:	2c 91       	ld	r18, X
    7ee0:	20 83       	st	Z, r18
						controlSet = 1;
    7ee2:	11 e0       	ldi	r17, 0x01	; 1
					}				
				}
			
				howler_hid_report[0] = HOWLER_ID; //eventually make howlerid
    7ee4:	ed e1       	ldi	r30, 0x1D	; 29
    7ee6:	fa e2       	ldi	r31, 0x2A	; 42
    7ee8:	8e ec       	ldi	r24, 0xCE	; 206
    7eea:	80 83       	st	Z, r24
				howler_hid_report[1] = CMD_SET_INPUT;
    7eec:	83 e0       	ldi	r24, 0x03	; 3
    7eee:	81 83       	std	Z+1, r24	; 0x01
				howler_hid_report[2] = gReport[2];
    7ef0:	a0 e5       	ldi	r26, 0x50	; 80
    7ef2:	b9 e2       	ldi	r27, 0x29	; 41
    7ef4:	12 96       	adiw	r26, 0x02	; 2
    7ef6:	8c 91       	ld	r24, X
    7ef8:	12 97       	sbiw	r26, 0x02	; 2
    7efa:	82 83       	std	Z+2, r24	; 0x02
				howler_hid_report[3] = gReport[3];
    7efc:	13 96       	adiw	r26, 0x03	; 3
    7efe:	8c 91       	ld	r24, X
    7f00:	13 97       	sbiw	r26, 0x03	; 3
    7f02:	83 83       	std	Z+3, r24	; 0x03
				howler_hid_report[4] = gReport[4];
    7f04:	14 96       	adiw	r26, 0x04	; 4
    7f06:	8c 91       	ld	r24, X
    7f08:	14 97       	sbiw	r26, 0x04	; 4
    7f0a:	84 83       	std	Z+4, r24	; 0x04
				howler_hid_report[5] = gReport[5];
    7f0c:	15 96       	adiw	r26, 0x05	; 5
    7f0e:	8c 91       	ld	r24, X
    7f10:	15 97       	sbiw	r26, 0x05	; 5
    7f12:	85 83       	std	Z+5, r24	; 0x05
				howler_hid_report[6] = gReport[6];
    7f14:	16 96       	adiw	r26, 0x06	; 6
    7f16:	8c 91       	ld	r24, X
    7f18:	16 97       	sbiw	r26, 0x06	; 6
    7f1a:	86 83       	std	Z+6, r24	; 0x06
				howler_hid_report[7] = gReport[7];
    7f1c:	17 96       	adiw	r26, 0x07	; 7
    7f1e:	8c 91       	ld	r24, X
				howler_hid_report[8] = controlSet; //1 if set, 0xAF if not set
    7f20:	87 83       	std	Z+7, r24	; 0x07
				udi_hid_generic_send_report_in(howler_hid_report);
    7f22:	10 87       	std	Z+8, r17	; 0x08
    7f24:	cf 01       	movw	r24, r30
    7f26:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
				break;
			case CMD_GET_INPUT:
				//Get Input, Returns the Input Type and Value of requested Input				
				howler_hid_report[0] = HOWLER_ID; 
    7f2a:	aa c1       	rjmp	.+852    	; 0x8280 <parseHidReport+0x16b2>
    7f2c:	0f 2e       	mov	r0, r31
    7f2e:	fd e1       	ldi	r31, 0x1D	; 29
    7f30:	cf 2e       	mov	r12, r31
    7f32:	fa e2       	ldi	r31, 0x2A	; 42
    7f34:	df 2e       	mov	r13, r31
    7f36:	f0 2d       	mov	r31, r0
    7f38:	8e ec       	ldi	r24, 0xCE	; 206
				howler_hid_report[1] = CMD_GET_INPUT; //Get Input Command Code
    7f3a:	f6 01       	movw	r30, r12
				howler_hid_report[2] = gReport[2]; //Input Requested
    7f3c:	80 83       	st	Z, r24
    7f3e:	84 e0       	ldi	r24, 0x04	; 4
    7f40:	81 83       	std	Z+1, r24	; 0x01
				howler_hid_report[3] = eeprom_read_byte(eeprom_input_type_look_up[gReport[2]]); //Input Type
    7f42:	f0 90 52 29 	lds	r15, 0x2952	; 0x802952 <gReport+0x2>
    7f46:	f2 82       	std	Z+2, r15	; 0x02
    7f48:	0f 2d       	mov	r16, r15
    7f4a:	10 e0       	ldi	r17, 0x00	; 0
    7f4c:	00 0f       	add	r16, r16
    7f4e:	11 1f       	adc	r17, r17
    7f50:	f8 01       	movw	r30, r16
    7f52:	ec 5d       	subi	r30, 0xDC	; 220
    7f54:	fc 4d       	sbci	r31, 0xDC	; 220
    7f56:	80 81       	ld	r24, Z
    7f58:	91 81       	ldd	r25, Z+1	; 0x01
				howler_hid_report[4] = eeprom_read_byte(eeprom_input_value_look_up[gReport[2]]); //Input Value
    7f5a:	95 d4       	rcall	.+2346   	; 0x8886 <eeprom_read_byte>
    7f5c:	d6 01       	movw	r26, r12
    7f5e:	13 96       	adiw	r26, 0x03	; 3
    7f60:	8c 93       	st	X, r24
    7f62:	f8 01       	movw	r30, r16
    7f64:	e8 52       	subi	r30, 0x28	; 40
    7f66:	fc 4d       	sbci	r31, 0xDC	; 220
    7f68:	80 81       	ld	r24, Z
				howler_hid_report[5] = eeprom_read_byte(eeprom_input_value2_look_up[gReport[2]]); //Input Value2
    7f6a:	91 81       	ldd	r25, Z+1	; 0x01
    7f6c:	8c d4       	rcall	.+2328   	; 0x8886 <eeprom_read_byte>
    7f6e:	f6 01       	movw	r30, r12
    7f70:	84 83       	std	Z+4, r24	; 0x04
    7f72:	f8 01       	movw	r30, r16
    7f74:	e2 58       	subi	r30, 0x82	; 130
    7f76:	fc 4d       	sbci	r31, 0xDC	; 220
    7f78:	80 81       	ld	r24, Z
    7f7a:	91 81       	ldd	r25, Z+1	; 0x01
				
				if(gReport[2] == ACCEL_XAXIS_LKUP_INDEX){
    7f7c:	84 d4       	rcall	.+2312   	; 0x8886 <eeprom_read_byte>
    7f7e:	d6 01       	movw	r26, r12
    7f80:	15 96       	adiw	r26, 0x05	; 5
					howler_hid_report[6] = eeprom_read_byte(ACCEL_XAXIS_MIN_TRIG_ADDR);
    7f82:	8c 93       	st	X, r24
    7f84:	ba e2       	ldi	r27, 0x2A	; 42
    7f86:	fb 12       	cpse	r15, r27
    7f88:	0c c0       	rjmp	.+24     	; 0x7fa2 <parseHidReport+0x13d4>
    7f8a:	87 ee       	ldi	r24, 0xE7	; 231
					howler_hid_report[7] = eeprom_read_byte(ACCEL_XAXIS_MAX_TRIG_ADDR);
    7f8c:	90 e0       	ldi	r25, 0x00	; 0
    7f8e:	7b d4       	rcall	.+2294   	; 0x8886 <eeprom_read_byte>
    7f90:	f6 01       	movw	r30, r12
    7f92:	86 83       	std	Z+6, r24	; 0x06
    7f94:	8a ee       	ldi	r24, 0xEA	; 234
    7f96:	90 e0       	ldi	r25, 0x00	; 0
    7f98:	76 d4       	rcall	.+2284   	; 0x8886 <eeprom_read_byte>
				}
				else if(gReport[2] == ACCEL_YAXIS_LKUP_INDEX){
    7f9a:	d6 01       	movw	r26, r12
    7f9c:	17 96       	adiw	r26, 0x07	; 7
    7f9e:	8c 93       	st	X, r24
					howler_hid_report[6] = eeprom_read_byte(ACCEL_YAXIS_MIN_TRIG_ADDR);
    7fa0:	21 c0       	rjmp	.+66     	; 0x7fe4 <parseHidReport+0x1416>
    7fa2:	bb e2       	ldi	r27, 0x2B	; 43
    7fa4:	fb 12       	cpse	r15, r27
    7fa6:	0e c0       	rjmp	.+28     	; 0x7fc4 <parseHidReport+0x13f6>
    7fa8:	88 ee       	ldi	r24, 0xE8	; 232
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	6c d4       	rcall	.+2264   	; 0x8886 <eeprom_read_byte>
    7fae:	0d e1       	ldi	r16, 0x1D	; 29
					howler_hid_report[7] = eeprom_read_byte(ACCEL_YAXIS_MAX_TRIG_ADDR);
    7fb0:	1a e2       	ldi	r17, 0x2A	; 42
    7fb2:	f8 01       	movw	r30, r16
    7fb4:	86 83       	std	Z+6, r24	; 0x06
    7fb6:	8b ee       	ldi	r24, 0xEB	; 235
    7fb8:	90 e0       	ldi	r25, 0x00	; 0
    7fba:	65 d4       	rcall	.+2250   	; 0x8886 <eeprom_read_byte>
    7fbc:	d8 01       	movw	r26, r16
    7fbe:	17 96       	adiw	r26, 0x07	; 7
				}
				else if(gReport[2] == ACCEL_ZAXIS_LKUP_INDEX){
    7fc0:	8c 93       	st	X, r24
    7fc2:	10 c0       	rjmp	.+32     	; 0x7fe4 <parseHidReport+0x1416>
    7fc4:	bc e2       	ldi	r27, 0x2C	; 44
					howler_hid_report[6] = eeprom_read_byte(ACCEL_ZAXIS_MIN_TRIG_ADDR);
    7fc6:	fb 12       	cpse	r15, r27
    7fc8:	0d c0       	rjmp	.+26     	; 0x7fe4 <parseHidReport+0x1416>
    7fca:	89 ee       	ldi	r24, 0xE9	; 233
    7fcc:	90 e0       	ldi	r25, 0x00	; 0
    7fce:	5b d4       	rcall	.+2230   	; 0x8886 <eeprom_read_byte>
    7fd0:	0d e1       	ldi	r16, 0x1D	; 29
    7fd2:	1a e2       	ldi	r17, 0x2A	; 42
    7fd4:	f8 01       	movw	r30, r16
					howler_hid_report[7] = eeprom_read_byte(ACCEL_ZAXIS_MAX_TRIG_ADDR);
    7fd6:	86 83       	std	Z+6, r24	; 0x06
    7fd8:	8c ee       	ldi	r24, 0xEC	; 236
    7fda:	90 e0       	ldi	r25, 0x00	; 0
    7fdc:	54 d4       	rcall	.+2216   	; 0x8886 <eeprom_read_byte>
    7fde:	d8 01       	movw	r26, r16
    7fe0:	17 96       	adiw	r26, 0x07	; 7
    7fe2:	8c 93       	st	X, r24
				else{
					//Not an accelerometer control
					howler_hid_report[6] = 0x00;
					howler_hid_report[7] = 0x00;
				}
				udi_hid_generic_send_report_in(howler_hid_report);
    7fe4:	8d e1       	ldi	r24, 0x1D	; 29
    7fe6:	9a e2       	ldi	r25, 0x2A	; 42
    7fe8:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
				break;
			case CMD_SET_GLOBAL_BRIGHTNESS:
				setLEDglobalbrightness(gReport[2]);
    7fec:	49 c1       	rjmp	.+658    	; 0x8280 <parseHidReport+0x16b2>
    7fee:	80 91 52 29 	lds	r24, 0x2952	; 0x802952 <gReport+0x2>
    7ff2:	0e 94 5e 22 	call	0x44bc	; 0x44bc <setLEDglobalbrightness>
				break;
			case CMD_SET_DEFAULT:
				//Set to Defaults
				setInputDefaults();
    7ff6:	44 c1       	rjmp	.+648    	; 0x8280 <parseHidReport+0x16b2>
    7ff8:	0e 94 cd 32 	call	0x659a	; 0x659a <setInputDefaults>
    7ffc:	04 e2       	ldi	r16, 0x24	; 36
    7ffe:	13 e2       	ldi	r17, 0x23	; 35
    8000:	0f 2e       	mov	r0, r31
    8002:	f0 ed       	ldi	r31, 0xD0	; 208
    8004:	af 2e       	mov	r10, r31
    8006:	f9 e2       	ldi	r31, 0x29	; 41
    8008:	bf 2e       	mov	r11, r31
    800a:	f0 2d       	mov	r31, r0
    800c:	0f 2e       	mov	r0, r31
    800e:	f8 ed       	ldi	r31, 0xD8	; 216
    8010:	cf 2e       	mov	r12, r31
    8012:	f3 e2       	ldi	r31, 0x23	; 35
    8014:	df 2e       	mov	r13, r31
    8016:	f0 2d       	mov	r31, r0
    8018:	0f 2e       	mov	r0, r31
    801a:	f3 ea       	ldi	r31, 0xA3	; 163
    801c:	ef 2e       	mov	r14, r31
    801e:	f9 e2       	ldi	r31, 0x29	; 41
    8020:	ff 2e       	mov	r15, r31
    8022:	f0 2d       	mov	r31, r0
    8024:	0f 2e       	mov	r0, r31
    8026:	fe e7       	ldi	r31, 0x7E	; 126
    8028:	8f 2e       	mov	r8, r31
    802a:	f3 e2       	ldi	r31, 0x23	; 35

				//get eeprom memory to sram
				for(i = 0; i < NUM_INPUTS; i++){
					input_type_lookup[i] = eeprom_read_byte(eeprom_input_type_look_up[i]);
    802c:	9f 2e       	mov	r9, r31
    802e:	f0 2d       	mov	r31, r0
    8030:	f8 01       	movw	r30, r16
    8032:	81 91       	ld	r24, Z+
    8034:	91 91       	ld	r25, Z+
    8036:	8f 01       	movw	r16, r30
    8038:	26 d4       	rcall	.+2124   	; 0x8886 <eeprom_read_byte>
    803a:	d5 01       	movw	r26, r10
    803c:	8d 93       	st	X+, r24
					input_value_lookup[i] = eeprom_read_byte(eeprom_input_value_look_up[i]);
    803e:	5d 01       	movw	r10, r26
    8040:	f6 01       	movw	r30, r12
    8042:	81 91       	ld	r24, Z+
    8044:	91 91       	ld	r25, Z+
    8046:	6f 01       	movw	r12, r30
    8048:	1e d4       	rcall	.+2108   	; 0x8886 <eeprom_read_byte>
    804a:	d7 01       	movw	r26, r14
    804c:	8d 93       	st	X+, r24
    804e:	7d 01       	movw	r14, r26
			case CMD_SET_DEFAULT:
				//Set to Defaults
				setInputDefaults();

				//get eeprom memory to sram
				for(i = 0; i < NUM_INPUTS; i++){
    8050:	08 15       	cp	r16, r8
    8052:	19 05       	cpc	r17, r9
    8054:	69 f7       	brne	.-38     	; 0x8030 <parseHidReport+0x1462>
					input_type_lookup[i] = eeprom_read_byte(eeprom_input_type_look_up[i]);
					input_value_lookup[i] = eeprom_read_byte(eeprom_input_value_look_up[i]);
				}
				
				howler_hid_report[0] = HOWLER_ID; //eventually make howlerid
    8056:	ed e1       	ldi	r30, 0x1D	; 29
    8058:	fa e2       	ldi	r31, 0x2A	; 42
    805a:	8e ec       	ldi	r24, 0xCE	; 206
    805c:	80 83       	st	Z, r24
				howler_hid_report[1] = CMD_SET_DEFAULT;
    805e:	85 e0       	ldi	r24, 0x05	; 5
    8060:	81 83       	std	Z+1, r24	; 0x01
				howler_hid_report[2] = 0x01;
    8062:	81 e0       	ldi	r24, 0x01	; 1
    8064:	82 83       	std	Z+2, r24	; 0x02
				howler_hid_report[3] = 0x00;
    8066:	13 82       	std	Z+3, r1	; 0x03
				howler_hid_report[4] = 0x00;
    8068:	14 82       	std	Z+4, r1	; 0x04
				howler_hid_report[5] = 0x00;
    806a:	15 82       	std	Z+5, r1	; 0x05
				howler_hid_report[6] = 0x00;
    806c:	16 82       	std	Z+6, r1	; 0x06
				howler_hid_report[7] = 0x00;
    806e:	17 82       	std	Z+7, r1	; 0x07
				udi_hid_generic_send_report_in(howler_hid_report);
    8070:	cf 01       	movw	r24, r30
    8072:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
				
				break;
    8076:	04 c1       	rjmp	.+520    	; 0x8280 <parseHidReport+0x16b2>
			
			case CMD_GET_FW_REV:	
				//return firmware revision
				howler_hid_report[0] = HOWLER_ID; 
    8078:	ed e1       	ldi	r30, 0x1D	; 29
    807a:	fa e2       	ldi	r31, 0x2A	; 42
    807c:	8e ec       	ldi	r24, 0xCE	; 206
    807e:	80 83       	st	Z, r24
				howler_hid_report[1] = CMD_GET_FW_REV;
    8080:	80 ea       	ldi	r24, 0xA0	; 160
    8082:	81 83       	std	Z+1, r24	; 0x01
				howler_hid_report[2] = VERSION_MAJOR;
				howler_hid_report[3] = VERSION_MINOR;
    8084:	8a ec       	ldi	r24, 0xCA	; 202
    8086:	83 83       	std	Z+3, r24	; 0x03
				howler_hid_report[4] = 0x00;
				howler_hid_report[5] = 0x00;
				howler_hid_report[6] = 0x00;
				howler_hid_report[7] = 0x00;			
				udi_hid_generic_send_report_in(howler_hid_report);
    8088:	cf 01       	movw	r24, r30
    808a:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
				break;
    808e:	f8 c0       	rjmp	.+496    	; 0x8280 <parseHidReport+0x16b2>
			case CMD_SET_RGB_LED_DEFAULT:
				//set RGB LED DEFAULT
				controlSet = 0xAF;
				if(gReport[2] >= 0 && gReport[2] <= (NUM_RGB_LEDS-1)){
    8090:	e0 91 52 29 	lds	r30, 0x2952	; 0x802952 <gReport+0x2>
    8094:	e0 32       	cpi	r30, 0x20	; 32
    8096:	08 f0       	brcs	.+2      	; 0x809a <parseHidReport+0x14cc>
    8098:	58 c0       	rjmp	.+176    	; 0x814a <parseHidReport+0x157c>
					
					//Set the LED
					setLED(ledr_look_up[gReport[2]] ,gReport[3]);
    809a:	00 e5       	ldi	r16, 0x50	; 80
    809c:	19 e2       	ldi	r17, 0x29	; 41
    809e:	f0 e0       	ldi	r31, 0x00	; 0
    80a0:	ee 0f       	add	r30, r30
    80a2:	ff 1f       	adc	r31, r31
    80a4:	ee 58       	subi	r30, 0x8E	; 142
    80a6:	fa 4d       	sbci	r31, 0xDA	; 218
    80a8:	d8 01       	movw	r26, r16
    80aa:	13 96       	adiw	r26, 0x03	; 3
    80ac:	6c 91       	ld	r22, X
    80ae:	80 81       	ld	r24, Z
    80b0:	91 81       	ldd	r25, Z+1	; 0x01
    80b2:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
					setLED(ledg_look_up[gReport[2]] ,gReport[4]);
    80b6:	d8 01       	movw	r26, r16
    80b8:	12 96       	adiw	r26, 0x02	; 2
    80ba:	ec 91       	ld	r30, X
    80bc:	12 97       	sbiw	r26, 0x02	; 2
    80be:	f0 e0       	ldi	r31, 0x00	; 0
    80c0:	ee 0f       	add	r30, r30
    80c2:	ff 1f       	adc	r31, r31
    80c4:	ee 5c       	subi	r30, 0xCE	; 206
    80c6:	fa 4d       	sbci	r31, 0xDA	; 218
    80c8:	14 96       	adiw	r26, 0x04	; 4
    80ca:	6c 91       	ld	r22, X
    80cc:	80 81       	ld	r24, Z
    80ce:	91 81       	ldd	r25, Z+1	; 0x01
    80d0:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
					setLED(ledb_look_up[gReport[2]] ,gReport[5]);
    80d4:	d8 01       	movw	r26, r16
    80d6:	12 96       	adiw	r26, 0x02	; 2
    80d8:	ec 91       	ld	r30, X
    80da:	12 97       	sbiw	r26, 0x02	; 2
    80dc:	f0 e0       	ldi	r31, 0x00	; 0
    80de:	ee 0f       	add	r30, r30
    80e0:	ff 1f       	adc	r31, r31
    80e2:	ee 50       	subi	r30, 0x0E	; 14
    80e4:	fb 4d       	sbci	r31, 0xDB	; 219
    80e6:	15 96       	adiw	r26, 0x05	; 5
    80e8:	6c 91       	ld	r22, X
    80ea:	80 81       	ld	r24, Z
    80ec:	91 81       	ldd	r25, Z+1	; 0x01
					
					//write to EEPROM
					eeprom_update_byte(eeprom_ledr_look_up[gReport[2]],gReport[3]);
    80ee:	0e 94 1d 22 	call	0x443a	; 0x443a <setLED>
    80f2:	d8 01       	movw	r26, r16
    80f4:	12 96       	adiw	r26, 0x02	; 2
    80f6:	ec 91       	ld	r30, X
    80f8:	12 97       	sbiw	r26, 0x02	; 2
    80fa:	f0 e0       	ldi	r31, 0x00	; 0
    80fc:	ee 0f       	add	r30, r30
    80fe:	ff 1f       	adc	r31, r31
    8100:	ec 51       	subi	r30, 0x1C	; 28
    8102:	fd 4d       	sbci	r31, 0xDD	; 221
    8104:	13 96       	adiw	r26, 0x03	; 3
    8106:	6c 91       	ld	r22, X
    8108:	80 81       	ld	r24, Z
    810a:	91 81       	ldd	r25, Z+1	; 0x01
					eeprom_update_byte(eeprom_ledg_look_up[gReport[2]],gReport[4]);
    810c:	cc d3       	rcall	.+1944   	; 0x88a6 <eeprom_update_byte>
    810e:	d8 01       	movw	r26, r16
    8110:	12 96       	adiw	r26, 0x02	; 2
    8112:	ec 91       	ld	r30, X
    8114:	12 97       	sbiw	r26, 0x02	; 2
    8116:	f0 e0       	ldi	r31, 0x00	; 0
    8118:	ee 0f       	add	r30, r30
    811a:	ff 1f       	adc	r31, r31
    811c:	ec 55       	subi	r30, 0x5C	; 92
    811e:	fd 4d       	sbci	r31, 0xDD	; 221
    8120:	14 96       	adiw	r26, 0x04	; 4
    8122:	6c 91       	ld	r22, X
    8124:	80 81       	ld	r24, Z
    8126:	91 81       	ldd	r25, Z+1	; 0x01
    8128:	be d3       	rcall	.+1916   	; 0x88a6 <eeprom_update_byte>
					eeprom_update_byte(eeprom_ledb_look_up[gReport[2]],gReport[5]);
    812a:	d8 01       	movw	r26, r16
    812c:	12 96       	adiw	r26, 0x02	; 2
    812e:	ec 91       	ld	r30, X
    8130:	12 97       	sbiw	r26, 0x02	; 2
    8132:	f0 e0       	ldi	r31, 0x00	; 0
    8134:	ee 0f       	add	r30, r30
    8136:	ff 1f       	adc	r31, r31
    8138:	ec 59       	subi	r30, 0x9C	; 156
    813a:	fd 4d       	sbci	r31, 0xDD	; 221
    813c:	15 96       	adiw	r26, 0x05	; 5
    813e:	6c 91       	ld	r22, X
    8140:	80 81       	ld	r24, Z
    8142:	91 81       	ldd	r25, Z+1	; 0x01
    8144:	b0 d3       	rcall	.+1888   	; 0x88a6 <eeprom_update_byte>
    8146:	81 e0       	ldi	r24, 0x01	; 1
					controlSet = 1;
    8148:	01 c0       	rjmp	.+2      	; 0x814c <parseHidReport+0x157e>
    814a:	8f ea       	ldi	r24, 0xAF	; 175
				howler_hid_report[7] = 0x00;			
				udi_hid_generic_send_report_in(howler_hid_report);
				break;
			case CMD_SET_RGB_LED_DEFAULT:
				//set RGB LED DEFAULT
				controlSet = 0xAF;
    814c:	ed e1       	ldi	r30, 0x1D	; 29
					eeprom_update_byte(eeprom_ledb_look_up[gReport[2]],gReport[5]);
					controlSet = 1;
					
				}
				
				howler_hid_report[0] = HOWLER_ID; //eventually make howlerid
    814e:	fa e2       	ldi	r31, 0x2A	; 42
    8150:	9e ec       	ldi	r25, 0xCE	; 206
    8152:	90 83       	st	Z, r25
    8154:	97 e0       	ldi	r25, 0x07	; 7
				howler_hid_report[1] = CMD_SET_RGB_LED_DEFAULT;
    8156:	91 83       	std	Z+1, r25	; 0x01
    8158:	a0 e5       	ldi	r26, 0x50	; 80
				howler_hid_report[2] = gReport[2];
    815a:	b9 e2       	ldi	r27, 0x29	; 41
    815c:	12 96       	adiw	r26, 0x02	; 2
    815e:	9c 91       	ld	r25, X
    8160:	12 97       	sbiw	r26, 0x02	; 2
    8162:	92 83       	std	Z+2, r25	; 0x02
    8164:	13 96       	adiw	r26, 0x03	; 3
				howler_hid_report[3] = gReport[3];
    8166:	9c 91       	ld	r25, X
    8168:	13 97       	sbiw	r26, 0x03	; 3
    816a:	93 83       	std	Z+3, r25	; 0x03
    816c:	14 96       	adiw	r26, 0x04	; 4
				howler_hid_report[4] = gReport[4];
    816e:	9c 91       	ld	r25, X
    8170:	14 97       	sbiw	r26, 0x04	; 4
    8172:	94 83       	std	Z+4, r25	; 0x04
    8174:	15 96       	adiw	r26, 0x05	; 5
				howler_hid_report[5] = gReport[5]; 
    8176:	9c 91       	ld	r25, X
    8178:	95 83       	std	Z+5, r25	; 0x05
    817a:	86 83       	std	Z+6, r24	; 0x06
				howler_hid_report[6] = controlSet;//1 if set, 0xAF if not set
    817c:	17 82       	std	Z+7, r1	; 0x07
				howler_hid_report[7] = 0x00;
    817e:	cf 01       	movw	r24, r30
				udi_hid_generic_send_report_in(howler_hid_report);
    8180:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
    8184:	7d c0       	rjmp	.+250    	; 0x8280 <parseHidReport+0x16b2>
				
				break;
    8186:	0d e1       	ldi	r16, 0x1D	; 29
				//set USB Device ID (Power cycle of device required after set)
			
				break;
			case CMD_GET_ACCEL_DATA:
				//Get Accelerometer data and send back
				howler_hid_report[0] = HOWLER_ID;
    8188:	1a e2       	ldi	r17, 0x2A	; 42
    818a:	8e ec       	ldi	r24, 0xCE	; 206
    818c:	f8 01       	movw	r30, r16
    818e:	80 83       	st	Z, r24
    8190:	8c ea       	ldi	r24, 0xAC	; 172
				howler_hid_report[1] = CMD_GET_ACCEL_DATA;
    8192:	81 83       	std	Z+1, r24	; 0x01
    8194:	81 e0       	ldi	r24, 0x01	; 1
				howler_hid_report[2] = MMA8453_Read_Output(1); //X data
    8196:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <MMA8453_Read_Output>
    819a:	d8 01       	movw	r26, r16
    819c:	12 96       	adiw	r26, 0x02	; 2
    819e:	8c 93       	st	X, r24
    81a0:	82 e0       	ldi	r24, 0x02	; 2
				howler_hid_report[3] = MMA8453_Read_Output(2); //Y data
    81a2:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <MMA8453_Read_Output>
    81a6:	f8 01       	movw	r30, r16
    81a8:	83 83       	std	Z+3, r24	; 0x03
    81aa:	83 e0       	ldi	r24, 0x03	; 3
				howler_hid_report[4] = MMA8453_Read_Output(3); //Z data
    81ac:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <MMA8453_Read_Output>
    81b0:	d8 01       	movw	r26, r16
    81b2:	14 96       	adiw	r26, 0x04	; 4
    81b4:	8c 93       	st	X, r24
    81b6:	14 97       	sbiw	r26, 0x04	; 4
    81b8:	15 96       	adiw	r26, 0x05	; 5
				howler_hid_report[5] = 0x00;
    81ba:	1c 92       	st	X, r1
    81bc:	15 97       	sbiw	r26, 0x05	; 5
    81be:	16 96       	adiw	r26, 0x06	; 6
				howler_hid_report[6] = 0x00;
    81c0:	1c 92       	st	X, r1
    81c2:	16 97       	sbiw	r26, 0x06	; 6
    81c4:	17 96       	adiw	r26, 0x07	; 7
				howler_hid_report[7] = 0x00;
    81c6:	1c 92       	st	X, r1
    81c8:	c8 01       	movw	r24, r16
				udi_hid_generic_send_report_in(howler_hid_report);
    81ca:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
    81ce:	58 c0       	rjmp	.+176    	; 0x8280 <parseHidReport+0x16b2>
			
				break;
    81d0:	8d e6       	ldi	r24, 0x6D	; 109
			case CMD_GET_QEC:
				qdec_dirY = qdec_get_direction(&gConfig1);
    81d2:	9a e2       	ldi	r25, 0x2A	; 42
    81d4:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    81d8:	f8 2e       	mov	r15, r24
    81da:	8d e6       	ldi	r24, 0x6D	; 109
				positionY = qdec_get_position(&gConfig1);
    81dc:	9a e2       	ldi	r25, 0x2A	; 42
    81de:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    81e2:	18 2f       	mov	r17, r24
    81e4:	09 2f       	mov	r16, r25
    81e6:	8f e4       	ldi	r24, 0x4F	; 79
				//positionY = qdec_get_frequency(&gConfig1);
				
				qdec_dirX = qdec_get_direction(&gConfig2);
    81e8:	9a e2       	ldi	r25, 0x2A	; 42
    81ea:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    81ee:	e8 2e       	mov	r14, r24
    81f0:	8f e4       	ldi	r24, 0x4F	; 79
				positionX = qdec_get_position(&gConfig2);
    81f2:	9a e2       	ldi	r25, 0x2A	; 42
    81f4:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    81f8:	ed e1       	ldi	r30, 0x1D	; 29
				//positionX = qdec_get_frequency(&gConfig2);
				
				howler_hid_report[0] = HOWLER_ID;
    81fa:	fa e2       	ldi	r31, 0x2A	; 42
    81fc:	2e ec       	ldi	r18, 0xCE	; 206
    81fe:	20 83       	st	Z, r18
    8200:	2d ed       	ldi	r18, 0xDD	; 221
				howler_hid_report[1] = CMD_GET_QEC;
    8202:	21 83       	std	Z+1, r18	; 0x01
    8204:	e2 82       	std	Z+2, r14	; 0x02
				howler_hid_report[2] = (uint8_t)qdec_dirX;
    8206:	93 83       	std	Z+3, r25	; 0x03
				howler_hid_report[3] = (uint8_t)((positionX>>8)&0xff); //MSB
    8208:	84 83       	std	Z+4, r24	; 0x04
				howler_hid_report[4] = (uint8_t)((positionX)&0xff); //LSB
    820a:	f5 82       	std	Z+5, r15	; 0x05
				howler_hid_report[5] = (uint8_t)qdec_dirY;
    820c:	06 83       	std	Z+6, r16	; 0x06
				howler_hid_report[6] = (uint8_t)((positionY>>8)&0xff); //MSB
    820e:	17 83       	std	Z+7, r17	; 0x07
				howler_hid_report[7] = (uint8_t)((positionY)&0xff); //LSB
    8210:	cf 01       	movw	r24, r30
				udi_hid_generic_send_report_in(howler_hid_report);
    8212:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
    8216:	34 c0       	rjmp	.+104    	; 0x8280 <parseHidReport+0x16b2>
				
				break;
    8218:	8d e6       	ldi	r24, 0x6D	; 109
			case CMD_GET_ADCS:
				qdec_dirY = qdec_get_direction(&gConfig1);
    821a:	9a e2       	ldi	r25, 0x2A	; 42
    821c:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    8220:	8d e6       	ldi	r24, 0x6D	; 109
				positionY = qdec_get_position(&gConfig1);
    8222:	9a e2       	ldi	r25, 0x2A	; 42
    8224:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    8228:	8f e4       	ldi	r24, 0x4F	; 79
				//positionY = qdec_get_frequency(&gConfig1);
			
				qdec_dirX = qdec_get_direction(&gConfig2);
    822a:	9a e2       	ldi	r25, 0x2A	; 42
    822c:	0e 94 c4 06 	call	0xd88	; 0xd88 <qdec_get_direction>
    8230:	8f e4       	ldi	r24, 0x4F	; 79
				positionX = qdec_get_position(&gConfig2);
    8232:	9a e2       	ldi	r25, 0x2A	; 42
    8234:	0e 94 bc 06 	call	0xd78	; 0xd78 <qdec_get_position>
    8238:	ed e1       	ldi	r30, 0x1D	; 29
				//positionX = qdec_get_frequency(&gConfig2);
			
				howler_hid_report[0] = HOWLER_ID;
    823a:	fa e2       	ldi	r31, 0x2A	; 42
    823c:	8e ec       	ldi	r24, 0xCE	; 206
    823e:	80 83       	st	Z, r24
    8240:	8d ea       	ldi	r24, 0xAD	; 173
				howler_hid_report[1] = CMD_GET_ADCS;
    8242:	81 83       	std	Z+1, r24	; 0x01
    8244:	80 91 6e 29 	lds	r24, 0x296E	; 0x80296e <gJoy1_u_ana_val>
				howler_hid_report[2] = gJoy1_u_ana_val;
    8248:	82 83       	std	Z+2, r24	; 0x02
    824a:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <gJoy1_d_ana_val>
				howler_hid_report[3] = gJoy1_d_ana_val; //MSB
    824e:	83 83       	std	Z+3, r24	; 0x03
    8250:	14 82       	std	Z+4, r1	; 0x04
				howler_hid_report[4] = 0;
    8252:	15 82       	std	Z+5, r1	; 0x05
				howler_hid_report[5] = 0;
    8254:	16 82       	std	Z+6, r1	; 0x06
				howler_hid_report[6] = 0;
    8256:	17 82       	std	Z+7, r1	; 0x07
				howler_hid_report[7] = 0;
    8258:	cf 01       	movw	r24, r30
				udi_hid_generic_send_report_in(howler_hid_report);
    825a:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
    825e:	10 c0       	rjmp	.+32     	; 0x8280 <parseHidReport+0x16b2>
			
			break;	
    8260:	ed e1       	ldi	r30, 0x1D	; 29
				
			default:
				howler_hid_report[0] = HOWLER_ID;
    8262:	fa e2       	ldi	r31, 0x2A	; 42
    8264:	9e ec       	ldi	r25, 0xCE	; 206
    8266:	90 83       	st	Z, r25
    8268:	81 83       	std	Z+1, r24	; 0x01
				howler_hid_report[1] = gReport[1]; //bad command code received
    826a:	9a eb       	ldi	r25, 0xBA	; 186
				howler_hid_report[2] = 0xBA;
    826c:	92 83       	std	Z+2, r25	; 0x02
    826e:	80 ed       	ldi	r24, 0xD0	; 208
				howler_hid_report[3] = 0xD0;
    8270:	83 83       	std	Z+3, r24	; 0x03
    8272:	94 83       	std	Z+4, r25	; 0x04
				howler_hid_report[4] = 0xBA;
    8274:	85 83       	std	Z+5, r24	; 0x05
				howler_hid_report[5] = 0xD0;
    8276:	96 83       	std	Z+6, r25	; 0x06
				howler_hid_report[6] = 0xBA;
    8278:	87 83       	std	Z+7, r24	; 0x07
				howler_hid_report[7] = 0xD0;			
    827a:	cf 01       	movw	r24, r30
				udi_hid_generic_send_report_in(howler_hid_report);
    827c:	0e 94 4d 18 	call	0x309a	; 0x309a <udi_hid_generic_send_report_in>
    8280:	e0 e5       	ldi	r30, 0x50	; 80
    8282:	f9 e2       	ldi	r31, 0x29	; 41
    8284:	88 e6       	ldi	r24, 0x68	; 104
    8286:	99 e2       	ldi	r25, 0x29	; 41
    8288:	11 92       	st	Z+, r1
				break;
		}
		for(int i = 0; i < UDI_HID_REPORT_OUT_SIZE; i++ ){
			gReport[i] = 0x00;
    828a:	e8 17       	cp	r30, r24
				howler_hid_report[6] = 0xBA;
				howler_hid_report[7] = 0xD0;			
				udi_hid_generic_send_report_in(howler_hid_report);
				break;
		}
		for(int i = 0; i < UDI_HID_REPORT_OUT_SIZE; i++ ){
    828c:	f9 07       	cpc	r31, r25
    828e:	e1 f7       	brne	.-8      	; 0x8288 <parseHidReport+0x16ba>
    8290:	12 c0       	rjmp	.+36     	; 0x82b6 <parseHidReport+0x16e8>
    8292:	8c ef       	ldi	r24, 0xFC	; 252
						controlSet = 1;
					}
				}
				
				//JOY2 and JOY4_L, JOY4_R
				if((gReport[2] >= JOY2_U_LKUP_INDEX && gReport[2] <= JOY2_R_LKUP_INDEX)||(gReport[2] >= JOY4_U_LKUP_INDEX && gReport[2] <= JOY4_D_LKUP_INDEX)){
    8294:	8e 0f       	add	r24, r30
    8296:	84 30       	cpi	r24, 0x04	; 4
    8298:	10 f4       	brcc	.+4      	; 0x829e <parseHidReport+0x16d0>
    829a:	0c 94 1a 39 	jmp	0x7234	; 0x7234 <parseHidReport+0x666>
    829e:	05 c0       	rjmp	.+10     	; 0x82aa <parseHidReport+0x16dc>
    82a0:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <gReport+0x3>
					//JOY2 and JOY4_U, JOY4_D Digital Axis
					if(gReport[3] == IT_NOTHING){
    82a4:	1f ea       	ldi	r17, 0xAF	; 175
    82a6:	0c 94 1b 39 	jmp	0x7236	; 0x7236 <parseHidReport+0x668>
    82aa:	84 ef       	ldi	r24, 0xF4	; 244
						controlSet = 1;
					}
				}
				
				//JOY2 and JOY4_L, JOY4_R
				if((gReport[2] >= JOY2_U_LKUP_INDEX && gReport[2] <= JOY2_R_LKUP_INDEX)||(gReport[2] >= JOY4_U_LKUP_INDEX && gReport[2] <= JOY4_D_LKUP_INDEX)){
    82ac:	8e 0f       	add	r24, r30
    82ae:	82 30       	cpi	r24, 0x02	; 2
    82b0:	b8 f3       	brcs	.-18     	; 0x82a0 <parseHidReport+0x16d2>
    82b2:	1f ea       	ldi	r17, 0xAF	; 175
    82b4:	fa c8       	rjmp	.-3596   	; 0x74aa <parseHidReport+0x8dc>
    82b6:	63 96       	adiw	r28, 0x13	; 19
		}
		for(int i = 0; i < UDI_HID_REPORT_OUT_SIZE; i++ ){
			gReport[i] = 0x00;
		}
	}	
}
    82b8:	cd bf       	out	0x3d, r28	; 61
    82ba:	de bf       	out	0x3e, r29	; 62
    82bc:	df 91       	pop	r29
    82be:	cf 91       	pop	r28
    82c0:	1f 91       	pop	r17
    82c2:	0f 91       	pop	r16
    82c4:	ff 90       	pop	r15
    82c6:	ef 90       	pop	r14
    82c8:	df 90       	pop	r13
    82ca:	cf 90       	pop	r12
    82cc:	bf 90       	pop	r11
    82ce:	af 90       	pop	r10
    82d0:	9f 90       	pop	r9
    82d2:	8f 90       	pop	r8
    82d4:	08 95       	ret

000082d6 <main>:
    82d6:	cf 93       	push	r28
	
uint8_t gAccelMinTrig[3] = {0,0,0};
uint8_t gAccelMaxTrig[3] = {0,0,0};	

int main (void)
{
    82d8:	df 93       	push	r29
    82da:	cd b7       	in	r28, 0x3d	; 61
    82dc:	de b7       	in	r29, 0x3e	; 62
    82de:	2b 97       	sbiw	r28, 0x0b	; 11
    82e0:	cd bf       	out	0x3d, r28	; 61
    82e2:	de bf       	out	0x3e, r29	; 62
	int cnt = 0;
	//Initialize I/O on Howler PCB
	Howler_Init();
    82e4:	0e 94 33 20 	call	0x4066	; 0x4066 <Howler_Init>
	//initialize system clocks
	sysclk_init();
    82e8:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sysclk_init>
	//Init I2C
	I2C_Init();
    82ec:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <I2C_Init>
	//initialize LED drivers
	LED_Drivers_Init();	
    82f0:	0e 94 74 21 	call	0x42e8	; 0x42e8 <LED_Drivers_Init>
	
	MMA8453_Init();
    82f4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <MMA8453_Init>

}

static void qdec1_init(void)
{
	qdec_get_config_defaults(&gConfig1);
    82f8:	8d e6       	ldi	r24, 0x6D	; 109
    82fa:	9a e2       	ldi	r25, 0x2A	; 42
    82fc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <qdec_get_config_defaults>
	qdec_config_disable_index_pin (&gConfig1);
    8300:	8d e6       	ldi	r24, 0x6D	; 109
    8302:	9a e2       	ldi	r25, 0x2A	; 42
    8304:	0e 94 96 04 	call	0x92c	; 0x92c <qdec_config_disable_index_pin>
	qdec_config_event_channel(&gConfig1, 0);
    8308:	60 e0       	ldi	r22, 0x00	; 0
    830a:	8d e6       	ldi	r24, 0x6D	; 109
    830c:	9a e2       	ldi	r25, 0x2A	; 42
    830e:	0e 94 99 04 	call	0x932	; 0x932 <qdec_config_event_channel>
	qdec_config_freq_event_channel(&gConfig1, 1);
    8312:	61 e0       	ldi	r22, 0x01	; 1
    8314:	8d e6       	ldi	r24, 0x6D	; 109
    8316:	9a e2       	ldi	r25, 0x2A	; 42
    8318:	0e 94 ac 04 	call	0x958	; 0x958 <qdec_config_freq_event_channel>
	qdec_config_enable_freq(&gConfig1, 1200);
    831c:	40 eb       	ldi	r20, 0xB0	; 176
    831e:	54 e0       	ldi	r21, 0x04	; 4
    8320:	60 e0       	ldi	r22, 0x00	; 0
    8322:	70 e0       	ldi	r23, 0x00	; 0
    8324:	8d e6       	ldi	r24, 0x6D	; 109
    8326:	9a e2       	ldi	r25, 0x2A	; 42
    8328:	0e 94 a4 04 	call	0x948	; 0x948 <qdec_config_enable_freq>
	qdec_config_tc(&gConfig1, &TCC0);	
    832c:	60 e0       	ldi	r22, 0x00	; 0
    832e:	78 e0       	ldi	r23, 0x08	; 8
    8330:	8d e6       	ldi	r24, 0x6D	; 109
    8332:	9a e2       	ldi	r25, 0x2A	; 42
    8334:	0e 94 9c 04 	call	0x938	; 0x938 <qdec_config_tc>
	qdec_config_freq_tc(&gConfig1, &TCC1);
    8338:	60 e4       	ldi	r22, 0x40	; 64
    833a:	78 e0       	ldi	r23, 0x08	; 8
    833c:	8d e6       	ldi	r24, 0x6D	; 109
    833e:	9a e2       	ldi	r25, 0x2A	; 42
    8340:	0e 94 af 04 	call	0x95e	; 0x95e <qdec_config_freq_tc>
	//qdec_config_phase_pins(&gConfig1, &PORTD, 2, false, 50);
	qdec_config_phase_pins(&gConfig1, &PORTD, 2, true, 50);
    8344:	02 e3       	ldi	r16, 0x32	; 50
    8346:	10 e0       	ldi	r17, 0x00	; 0
    8348:	21 e0       	ldi	r18, 0x01	; 1
    834a:	42 e0       	ldi	r20, 0x02	; 2
    834c:	60 e6       	ldi	r22, 0x60	; 96
    834e:	76 e0       	ldi	r23, 0x06	; 6
    8350:	8d e6       	ldi	r24, 0x6D	; 109
    8352:	9a e2       	ldi	r25, 0x2A	; 42
    8354:	0e 94 8a 04 	call	0x914	; 0x914 <qdec_config_phase_pins>
	qdec_config_revolution(&gConfig1, 200);	
    8358:	68 ec       	ldi	r22, 0xC8	; 200
    835a:	70 e0       	ldi	r23, 0x00	; 0
    835c:	8d e6       	ldi	r24, 0x6D	; 109
    835e:	9a e2       	ldi	r25, 0x2A	; 42
    8360:	0e 94 a0 04 	call	0x940	; 0x940 <qdec_config_revolution>
	qdec_enabled(&gConfig1);
    8364:	8d e6       	ldi	r24, 0x6D	; 109
    8366:	9a e2       	ldi	r25, 0x2A	; 42
    8368:	0e 94 b3 04 	call	0x966	; 0x966 <qdec_enabled>
}

static void qdec2_init(void)
{
	qdec_get_config_defaults(&gConfig2);
    836c:	8f e4       	ldi	r24, 0x4F	; 79
    836e:	9a e2       	ldi	r25, 0x2A	; 42
    8370:	0e 94 64 04 	call	0x8c8	; 0x8c8 <qdec_get_config_defaults>
	qdec_config_disable_index_pin (&gConfig2);
    8374:	8f e4       	ldi	r24, 0x4F	; 79
    8376:	9a e2       	ldi	r25, 0x2A	; 42
    8378:	0e 94 96 04 	call	0x92c	; 0x92c <qdec_config_disable_index_pin>
	qdec_config_event_channel(&gConfig2, 2);
    837c:	62 e0       	ldi	r22, 0x02	; 2
    837e:	8f e4       	ldi	r24, 0x4F	; 79
    8380:	9a e2       	ldi	r25, 0x2A	; 42
    8382:	0e 94 99 04 	call	0x932	; 0x932 <qdec_config_event_channel>
	qdec_config_freq_event_channel(&gConfig2, 3);
    8386:	63 e0       	ldi	r22, 0x03	; 3
    8388:	8f e4       	ldi	r24, 0x4F	; 79
    838a:	9a e2       	ldi	r25, 0x2A	; 42
    838c:	0e 94 ac 04 	call	0x958	; 0x958 <qdec_config_freq_event_channel>
	qdec_config_enable_freq(&gConfig2, 1200);
    8390:	40 eb       	ldi	r20, 0xB0	; 176
    8392:	54 e0       	ldi	r21, 0x04	; 4
    8394:	60 e0       	ldi	r22, 0x00	; 0
    8396:	70 e0       	ldi	r23, 0x00	; 0
    8398:	8f e4       	ldi	r24, 0x4F	; 79
    839a:	9a e2       	ldi	r25, 0x2A	; 42
    839c:	0e 94 a4 04 	call	0x948	; 0x948 <qdec_config_enable_freq>
	qdec_config_tc(&gConfig2, &TCD0);	
    83a0:	60 e0       	ldi	r22, 0x00	; 0
    83a2:	79 e0       	ldi	r23, 0x09	; 9
    83a4:	8f e4       	ldi	r24, 0x4F	; 79
    83a6:	9a e2       	ldi	r25, 0x2A	; 42
    83a8:	0e 94 9c 04 	call	0x938	; 0x938 <qdec_config_tc>
	qdec_config_freq_tc(&gConfig2, &TCD1);
    83ac:	60 e4       	ldi	r22, 0x40	; 64
    83ae:	79 e0       	ldi	r23, 0x09	; 9
    83b0:	8f e4       	ldi	r24, 0x4F	; 79
    83b2:	9a e2       	ldi	r25, 0x2A	; 42
    83b4:	0e 94 af 04 	call	0x95e	; 0x95e <qdec_config_freq_tc>
	//qdec_config_phase_pins(&gConfig2, &PORTD,  0, false, 50);
	qdec_config_phase_pins(&gConfig2, &PORTD,  0, true, 50);
    83b8:	21 e0       	ldi	r18, 0x01	; 1
    83ba:	40 e0       	ldi	r20, 0x00	; 0
    83bc:	60 e6       	ldi	r22, 0x60	; 96
    83be:	76 e0       	ldi	r23, 0x06	; 6
    83c0:	8f e4       	ldi	r24, 0x4F	; 79
    83c2:	9a e2       	ldi	r25, 0x2A	; 42
    83c4:	0e 94 8a 04 	call	0x914	; 0x914 <qdec_config_phase_pins>
	qdec_config_revolution(&gConfig2, 200);	
    83c8:	68 ec       	ldi	r22, 0xC8	; 200
    83ca:	70 e0       	ldi	r23, 0x00	; 0
    83cc:	8f e4       	ldi	r24, 0x4F	; 79
    83ce:	9a e2       	ldi	r25, 0x2A	; 42
    83d0:	0e 94 a0 04 	call	0x940	; 0x940 <qdec_config_revolution>
	qdec_enabled(&gConfig2);
    83d4:	8f e4       	ldi	r24, 0x4F	; 79
    83d6:	9a e2       	ldi	r25, 0x2A	; 42
    83d8:	0e 94 b3 04 	call	0x966	; 0x966 <qdec_enabled>
}

static void qdec3_init(void)
{
	qdec_get_config_defaults(&gConfig3);
    83dc:	8b e8       	ldi	r24, 0x8B	; 139
    83de:	9a e2       	ldi	r25, 0x2A	; 42
    83e0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <qdec_get_config_defaults>
	qdec_config_disable_index_pin (&gConfig3);
    83e4:	8b e8       	ldi	r24, 0x8B	; 139
    83e6:	9a e2       	ldi	r25, 0x2A	; 42
    83e8:	0e 94 96 04 	call	0x92c	; 0x92c <qdec_config_disable_index_pin>
	qdec_config_event_channel(&gConfig3, 4);
    83ec:	64 e0       	ldi	r22, 0x04	; 4
    83ee:	8b e8       	ldi	r24, 0x8B	; 139
    83f0:	9a e2       	ldi	r25, 0x2A	; 42
    83f2:	0e 94 99 04 	call	0x932	; 0x932 <qdec_config_event_channel>
	qdec_config_freq_event_channel(&gConfig3, 5);
    83f6:	65 e0       	ldi	r22, 0x05	; 5
    83f8:	8b e8       	ldi	r24, 0x8B	; 139
    83fa:	9a e2       	ldi	r25, 0x2A	; 42
    83fc:	0e 94 ac 04 	call	0x958	; 0x958 <qdec_config_freq_event_channel>
	qdec_config_enable_freq(&gConfig3, 1200);
    8400:	40 eb       	ldi	r20, 0xB0	; 176
    8402:	54 e0       	ldi	r21, 0x04	; 4
    8404:	60 e0       	ldi	r22, 0x00	; 0
    8406:	70 e0       	ldi	r23, 0x00	; 0
    8408:	8b e8       	ldi	r24, 0x8B	; 139
    840a:	9a e2       	ldi	r25, 0x2A	; 42
    840c:	0e 94 a4 04 	call	0x948	; 0x948 <qdec_config_enable_freq>
	qdec_config_tc(&gConfig3, &TCE0);
    8410:	60 e0       	ldi	r22, 0x00	; 0
    8412:	7a e0       	ldi	r23, 0x0A	; 10
    8414:	8b e8       	ldi	r24, 0x8B	; 139
    8416:	9a e2       	ldi	r25, 0x2A	; 42
    8418:	0e 94 9c 04 	call	0x938	; 0x938 <qdec_config_tc>
	qdec_config_freq_tc(&gConfig3, &TCE1);
    841c:	60 e4       	ldi	r22, 0x40	; 64
    841e:	7a e0       	ldi	r23, 0x0A	; 10
    8420:	8b e8       	ldi	r24, 0x8B	; 139
    8422:	9a e2       	ldi	r25, 0x2A	; 42
    8424:	0e 94 af 04 	call	0x95e	; 0x95e <qdec_config_freq_tc>
	//qdec_config_phase_pins(&gConfig3, &PORTD, 4, false, 50);
	qdec_config_phase_pins(&gConfig3, &PORTD, 4, true, 50);
    8428:	21 e0       	ldi	r18, 0x01	; 1
    842a:	44 e0       	ldi	r20, 0x04	; 4
    842c:	60 e6       	ldi	r22, 0x60	; 96
    842e:	76 e0       	ldi	r23, 0x06	; 6
    8430:	8b e8       	ldi	r24, 0x8B	; 139
    8432:	9a e2       	ldi	r25, 0x2A	; 42
    8434:	0e 94 8a 04 	call	0x914	; 0x914 <qdec_config_phase_pins>
	qdec_config_revolution(&gConfig3, 200);
    8438:	68 ec       	ldi	r22, 0xC8	; 200
    843a:	70 e0       	ldi	r23, 0x00	; 0
    843c:	8b e8       	ldi	r24, 0x8B	; 139
    843e:	9a e2       	ldi	r25, 0x2A	; 42
    8440:	0e 94 a0 04 	call	0x940	; 0x940 <qdec_config_revolution>
	qdec_enabled(&gConfig3);
    8444:	8b e8       	ldi	r24, 0x8B	; 139
    8446:	9a e2       	ldi	r25, 0x2A	; 42
    8448:	0e 94 b3 04 	call	0x966	; 0x966 <qdec_enabled>
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	
	adc_read_configuration(&JOY_ADC_MODULE, &adc_conf);
    844c:	be 01       	movw	r22, r28
    844e:	6f 5f       	subi	r22, 0xFF	; 255
    8450:	7f 4f       	sbci	r23, 0xFF	; 255
    8452:	80 e0       	ldi	r24, 0x00	; 0
    8454:	92 e0       	ldi	r25, 0x02	; 2
    8456:	0e 94 9f 03 	call	0x73e	; 0x73e <adc_read_configuration>
	adcch_read_configuration(&JOY_ADC_MODULE, ADC_CH0, &adcch_conf);
    845a:	ae 01       	movw	r20, r28
    845c:	48 5f       	subi	r20, 0xF8	; 248
    845e:	5f 4f       	sbci	r21, 0xFF	; 255
    8460:	61 e0       	ldi	r22, 0x01	; 1
    8462:	80 e0       	ldi	r24, 0x00	; 0
    8464:	92 e0       	ldi	r25, 0x02	; 2
    8466:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    846a:	8a 81       	ldd	r24, Y+2	; 0x02
    846c:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    846e:	9b 81       	ldd	r25, Y+3	; 0x03
    8470:	9f 78       	andi	r25, 0x8F	; 143
    8472:	90 63       	ori	r25, 0x30	; 48
    8474:	9b 83       	std	Y+3, r25	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    8476:	88 60       	ori	r24, 0x08	; 8
    8478:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    847a:	80 ec       	ldi	r24, 0xC0	; 192
    847c:	8c 83       	std	Y+4, r24	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    847e:	07 e0       	ldi	r16, 0x07	; 7
    8480:	0d 83       	std	Y+5, r16	; 0x05

	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_AREFB);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN_SWEEP, 4, 0);
	adc_set_clock_rate(&adc_conf, 5000UL);
	adc_set_callback(&JOY_ADC_MODULE, &adc_handler);
    8482:	6a e7       	ldi	r22, 0x7A	; 122
    8484:	72 e2       	ldi	r23, 0x22	; 34
    8486:	80 e0       	ldi	r24, 0x00	; 0
    8488:	92 e0       	ldi	r25, 0x02	; 2
    848a:	0e 94 4e 01 	call	0x29c	; 0x29c <adc_set_callback>
	adc_write_configuration(&JOY_ADC_MODULE, &adc_conf);
    848e:	be 01       	movw	r22, r28
    8490:	6f 5f       	subi	r22, 0xFF	; 255
    8492:	7f 4f       	sbci	r23, 0xFF	; 255
    8494:	80 e0       	ldi	r24, 0x00	; 0
    8496:	92 e0       	ldi	r25, 0x02	; 2
    8498:	0e 94 4f 03 	call	0x69e	; 0x69e <adc_write_configuration>
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    849c:	8a 85       	ldd	r24, Y+10	; 0x0a
    849e:	8c 7f       	andi	r24, 0xFC	; 252
    84a0:	81 60       	ori	r24, 0x01	; 1
    84a2:	8a 87       	std	Y+10, r24	; 0x0a

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84a4:	11 e0       	ldi	r17, 0x01	; 1
    84a6:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84a8:	88 e2       	ldi	r24, 0x28	; 40
    84aa:	89 87       	std	Y+9, r24	; 0x09
	
	adcch_enable_interrupt(&adcch_conf);
	adcch_set_input(&adcch_conf, JOY1_U_ADC_INPUT, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&JOY_ADC_MODULE, ADC_CH0, &adcch_conf);
    84ac:	ae 01       	movw	r20, r28
    84ae:	48 5f       	subi	r20, 0xF8	; 248
    84b0:	5f 4f       	sbci	r21, 0xFF	; 255
    84b2:	61 e0       	ldi	r22, 0x01	; 1
    84b4:	80 e0       	ldi	r24, 0x00	; 0
    84b6:	92 e0       	ldi	r25, 0x02	; 2
    84b8:	0e 94 c2 03 	call	0x784	; 0x784 <adcch_write_configuration>

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84bc:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84be:	80 e2       	ldi	r24, 0x20	; 32
    84c0:	89 87       	std	Y+9, r24	; 0x09
	
	adcch_set_input(&adcch_conf, JOY1_D_ADC_INPUT, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&JOY_ADC_MODULE, ADC_CH1, &adcch_conf);
    84c2:	ae 01       	movw	r20, r28
    84c4:	48 5f       	subi	r20, 0xF8	; 248
    84c6:	5f 4f       	sbci	r21, 0xFF	; 255
    84c8:	62 e0       	ldi	r22, 0x02	; 2
    84ca:	80 e0       	ldi	r24, 0x00	; 0
    84cc:	92 e0       	ldi	r25, 0x02	; 2
    84ce:	0e 94 c2 03 	call	0x784	; 0x784 <adcch_write_configuration>

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84d2:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84d4:	88 e3       	ldi	r24, 0x38	; 56
    84d6:	89 87       	std	Y+9, r24	; 0x09
	
	adcch_set_input(&adcch_conf, JOY1_L_ADC_INPUT, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&JOY_ADC_MODULE, ADC_CH2, &adcch_conf);
    84d8:	ae 01       	movw	r20, r28
    84da:	48 5f       	subi	r20, 0xF8	; 248
    84dc:	5f 4f       	sbci	r21, 0xFF	; 255
    84de:	64 e0       	ldi	r22, 0x04	; 4
    84e0:	80 e0       	ldi	r24, 0x00	; 0
    84e2:	92 e0       	ldi	r25, 0x02	; 2
    84e4:	0e 94 c2 03 	call	0x784	; 0x784 <adcch_write_configuration>

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    84e8:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    84ea:	80 e3       	ldi	r24, 0x30	; 48
    84ec:	89 87       	std	Y+9, r24	; 0x09
	
	adcch_set_input(&adcch_conf, JOY1_R_ADC_INPUT, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&JOY_ADC_MODULE, ADC_CH3, &adcch_conf);
    84ee:	ae 01       	movw	r20, r28
    84f0:	48 5f       	subi	r20, 0xF8	; 248
    84f2:	5f 4f       	sbci	r21, 0xFF	; 255
    84f4:	68 e0       	ldi	r22, 0x08	; 8
    84f6:	80 e0       	ldi	r24, 0x00	; 0
    84f8:	92 e0       	ldi	r25, 0x02	; 2
    84fa:	0e 94 c2 03 	call	0x784	; 0x784 <adcch_write_configuration>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    84fe:	00 93 a2 00 	sts	0x00A2, r16	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	adc_init();
	
	pmic_init();
	
	cpu_irq_enable();
    8502:	78 94       	sei
	
	adc_enable(&JOY_ADC_MODULE);
    8504:	80 e0       	ldi	r24, 0x00	; 0
    8506:	92 e0       	ldi	r25, 0x02	; 2
    8508:	0e 94 a8 01 	call	0x350	; 0x350 <adc_enable>
	
	//check to see if eeprom is empty, if so initialize to defaults
	if((eeprom_read_byte(eeprom_input_type_look_up[0]) == 0xFF)&&(eeprom_read_byte(eeprom_input_type_look_up[44]) == 0xFF)&&(eeprom_read_byte(eeprom_input_value_look_up[0]) == 0xFF)&&(eeprom_read_byte(eeprom_input_value_look_up[44]) == 0xFF)){
    850c:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <eeprom_input_type_look_up>
    8510:	90 91 25 23 	lds	r25, 0x2325	; 0x802325 <eeprom_input_type_look_up+0x1>
    8514:	b8 d1       	rcall	.+880    	; 0x8886 <eeprom_read_byte>
    8516:	8f 3f       	cpi	r24, 0xFF	; 255
    8518:	09 f0       	breq	.+2      	; 0x851c <main+0x246>
    851a:	88 c0       	rjmp	.+272    	; 0x862c <main+0x356>
    851c:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <eeprom_input_type_look_up+0x58>
    8520:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <eeprom_input_type_look_up+0x59>
    8524:	b0 d1       	rcall	.+864    	; 0x8886 <eeprom_read_byte>
    8526:	8f 3f       	cpi	r24, 0xFF	; 255
    8528:	09 f0       	breq	.+2      	; 0x852c <main+0x256>
    852a:	80 c0       	rjmp	.+256    	; 0x862c <main+0x356>
    852c:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <eeprom_input_value_look_up>
    8530:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <eeprom_input_value_look_up+0x1>
    8534:	a8 d1       	rcall	.+848    	; 0x8886 <eeprom_read_byte>
    8536:	8f 3f       	cpi	r24, 0xFF	; 255
    8538:	09 f0       	breq	.+2      	; 0x853c <main+0x266>
    853a:	78 c0       	rjmp	.+240    	; 0x862c <main+0x356>
    853c:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <eeprom_input_value_look_up+0x58>
    8540:	90 91 31 24 	lds	r25, 0x2431	; 0x802431 <eeprom_input_value_look_up+0x59>
    8544:	a0 d1       	rcall	.+832    	; 0x8886 <eeprom_read_byte>
    8546:	8f 3f       	cpi	r24, 0xFF	; 255
    8548:	09 f0       	breq	.+2      	; 0x854c <main+0x276>
    854a:	70 c0       	rjmp	.+224    	; 0x862c <main+0x356>
		setInputDefaults();
    854c:	0e 94 cd 32 	call	0x659a	; 0x659a <setInputDefaults>
		setLedDefaults();
    8550:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <setLedDefaults>
    8554:	6b c0       	rjmp	.+214    	; 0x862c <main+0x356>
	}	
		
	//get eeprom memory to sram
	for(cnt = 0; cnt < NUM_INPUTS; cnt++){
		input_type_lookup[cnt] = eeprom_read_byte(eeprom_input_type_look_up[cnt]);
    8556:	f8 01       	movw	r30, r16
    8558:	81 91       	ld	r24, Z+
    855a:	91 91       	ld	r25, Z+
    855c:	8f 01       	movw	r16, r30
    855e:	93 d1       	rcall	.+806    	; 0x8886 <eeprom_read_byte>
    8560:	f4 01       	movw	r30, r8
    8562:	81 93       	st	Z+, r24
    8564:	4f 01       	movw	r8, r30
		input_value_lookup[cnt] = eeprom_read_byte(eeprom_input_value_look_up[cnt]);
    8566:	f5 01       	movw	r30, r10
    8568:	81 91       	ld	r24, Z+
    856a:	91 91       	ld	r25, Z+
    856c:	5f 01       	movw	r10, r30
    856e:	8b d1       	rcall	.+790    	; 0x8886 <eeprom_read_byte>
    8570:	f6 01       	movw	r30, r12
    8572:	81 93       	st	Z+, r24
    8574:	6f 01       	movw	r12, r30
		input_value2_lookup[cnt] = eeprom_read_byte(eeprom_input_value2_look_up[cnt]);
    8576:	f7 01       	movw	r30, r14
    8578:	81 91       	ld	r24, Z+
    857a:	91 91       	ld	r25, Z+
    857c:	7f 01       	movw	r14, r30
    857e:	83 d1       	rcall	.+774    	; 0x8886 <eeprom_read_byte>
    8580:	f3 01       	movw	r30, r6
    8582:	81 93       	st	Z+, r24
    8584:	3f 01       	movw	r6, r30
		setInputDefaults();
		setLedDefaults();
	}	
		
	//get eeprom memory to sram
	for(cnt = 0; cnt < NUM_INPUTS; cnt++){
    8586:	04 15       	cp	r16, r4
    8588:	15 05       	cpc	r17, r5
    858a:	29 f7       	brne	.-54     	; 0x8556 <main+0x280>
		input_type_lookup[cnt] = eeprom_read_byte(eeprom_input_type_look_up[cnt]);
		input_value_lookup[cnt] = eeprom_read_byte(eeprom_input_value_look_up[cnt]);
		input_value2_lookup[cnt] = eeprom_read_byte(eeprom_input_value2_look_up[cnt]);
	}
	gAccelMinTrig[0] = eeprom_read_byte(ACCEL_XAXIS_MIN_TRIG_ADDR);
    858c:	87 ee       	ldi	r24, 0xE7	; 231
    858e:	90 e0       	ldi	r25, 0x00	; 0
    8590:	7a d1       	rcall	.+756    	; 0x8886 <eeprom_read_byte>
    8592:	05 e4       	ldi	r16, 0x45	; 69
    8594:	19 e2       	ldi	r17, 0x29	; 41
    8596:	f8 01       	movw	r30, r16
    8598:	80 83       	st	Z, r24
	gAccelMinTrig[1] = eeprom_read_byte(ACCEL_YAXIS_MIN_TRIG_ADDR);
    859a:	88 ee       	ldi	r24, 0xE8	; 232
    859c:	90 e0       	ldi	r25, 0x00	; 0
    859e:	73 d1       	rcall	.+742    	; 0x8886 <eeprom_read_byte>
    85a0:	f8 01       	movw	r30, r16
    85a2:	81 83       	std	Z+1, r24	; 0x01
	gAccelMinTrig[2] = eeprom_read_byte(ACCEL_ZAXIS_MIN_TRIG_ADDR);
    85a4:	89 ee       	ldi	r24, 0xE9	; 233
    85a6:	90 e0       	ldi	r25, 0x00	; 0
    85a8:	6e d1       	rcall	.+732    	; 0x8886 <eeprom_read_byte>
    85aa:	f8 01       	movw	r30, r16
    85ac:	82 83       	std	Z+2, r24	; 0x02
	gAccelMaxTrig[0] = eeprom_read_byte(ACCEL_XAXIS_MAX_TRIG_ADDR);
    85ae:	8a ee       	ldi	r24, 0xEA	; 234
    85b0:	90 e0       	ldi	r25, 0x00	; 0
    85b2:	69 d1       	rcall	.+722    	; 0x8886 <eeprom_read_byte>
    85b4:	02 e4       	ldi	r16, 0x42	; 66
    85b6:	19 e2       	ldi	r17, 0x29	; 41
    85b8:	f8 01       	movw	r30, r16
    85ba:	80 83       	st	Z, r24
	gAccelMaxTrig[1] = eeprom_read_byte(ACCEL_YAXIS_MAX_TRIG_ADDR);
    85bc:	8b ee       	ldi	r24, 0xEB	; 235
    85be:	90 e0       	ldi	r25, 0x00	; 0
    85c0:	62 d1       	rcall	.+708    	; 0x8886 <eeprom_read_byte>
    85c2:	f8 01       	movw	r30, r16
    85c4:	81 83       	std	Z+1, r24	; 0x01
    85c6:	8c ee       	ldi	r24, 0xEC	; 236
	gAccelMaxTrig[2] = eeprom_read_byte(ACCEL_ZAXIS_MAX_TRIG_ADDR);
    85c8:	90 e0       	ldi	r25, 0x00	; 0
    85ca:	5d d1       	rcall	.+698    	; 0x8886 <eeprom_read_byte>
    85cc:	f8 01       	movw	r30, r16
    85ce:	82 83       	std	Z+2, r24	; 0x02
    85d0:	87 e0       	ldi	r24, 0x07	; 7
    85d2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	
	irq_initialize_vectors();
    85d6:	78 94       	sei
    85d8:	e9 e4       	ldi	r30, 0x49	; 73
	cpu_irq_enable();
    85da:	fa e2       	ldi	r31, 0x2A	; 42
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    85dc:	10 82       	st	Z, r1
    85de:	11 82       	std	Z+1, r1	; 0x01
    85e0:	12 82       	std	Z+2, r1	; 0x02
    85e2:	13 82       	std	Z+3, r1	; 0x03
    85e4:	14 82       	std	Z+4, r1	; 0x04
    85e6:	81 e0       	ldi	r24, 0x01	; 1
    85e8:	85 83       	std	Z+5, r24	; 0x05
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    85ea:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <setLeds>
	sleepmgr_init();
	
	//Set LEDs from eeprom
	setLeds();
    85ee:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <udc_start>

	udc_start();
    85f2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <udd_attach>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    85f6:	0e 94 e7 35 	call	0x6bce	; 0x6bce <parseHidReport>
	udc_attach();
			
	while(1){

		parseHidReport();
    85fa:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <gTestTimer>

		if(gTestTimer == 200){
    85fe:	90 91 4c 29 	lds	r25, 0x294C	; 0x80294c <gTestTimer+0x1>
    8602:	88 3c       	cpi	r24, 0xC8	; 200
    8604:	91 05       	cpc	r25, r1
    8606:	41 f4       	brne	.+16     	; 0x8618 <main+0x342>
    8608:	10 92 4b 29 	sts	0x294B, r1	; 0x80294b <gTestTimer>
			gTestTimer= 0;
    860c:	10 92 4c 29 	sts	0x294C, r1	; 0x80294c <gTestTimer+0x1>
    8610:	88 e4       	ldi	r24, 0x48	; 72
    8612:	99 e2       	ldi	r25, 0x29	; 41
			MMA8453_Read_XYZ(gAccelData);
    8614:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <MMA8453_Read_XYZ>
    8618:	80 91 4b 29 	lds	r24, 0x294B	; 0x80294b <gTestTimer>
		}
		gTestTimer++;
    861c:	90 91 4c 29 	lds	r25, 0x294C	; 0x80294c <gTestTimer+0x1>
    8620:	01 96       	adiw	r24, 0x01	; 1
    8622:	80 93 4b 29 	sts	0x294B, r24	; 0x80294b <gTestTimer>
    8626:	90 93 4c 29 	sts	0x294C, r25	; 0x80294c <gTestTimer+0x1>
    862a:	e5 cf       	rjmp	.-54     	; 0x85f6 <main+0x320>
    862c:	04 e2       	ldi	r16, 0x24	; 36
		
	}
    862e:	13 e2       	ldi	r17, 0x23	; 35
    8630:	0f 2e       	mov	r0, r31
    8632:	f0 ed       	ldi	r31, 0xD0	; 208
    8634:	8f 2e       	mov	r8, r31
    8636:	f9 e2       	ldi	r31, 0x29	; 41
    8638:	9f 2e       	mov	r9, r31
    863a:	f0 2d       	mov	r31, r0
    863c:	0f 2e       	mov	r0, r31
    863e:	f8 ed       	ldi	r31, 0xD8	; 216
    8640:	af 2e       	mov	r10, r31
    8642:	f3 e2       	ldi	r31, 0x23	; 35
    8644:	bf 2e       	mov	r11, r31
    8646:	f0 2d       	mov	r31, r0
    8648:	0f 2e       	mov	r0, r31
    864a:	f3 ea       	ldi	r31, 0xA3	; 163
    864c:	cf 2e       	mov	r12, r31
    864e:	f9 e2       	ldi	r31, 0x29	; 41
    8650:	df 2e       	mov	r13, r31
    8652:	f0 2d       	mov	r31, r0
    8654:	0f 2e       	mov	r0, r31
    8656:	fe e7       	ldi	r31, 0x7E	; 126
    8658:	ef 2e       	mov	r14, r31
    865a:	f3 e2       	ldi	r31, 0x23	; 35
    865c:	ff 2e       	mov	r15, r31
    865e:	f0 2d       	mov	r31, r0
    8660:	0f 2e       	mov	r0, r31
    8662:	f6 e7       	ldi	r31, 0x76	; 118
    8664:	6f 2e       	mov	r6, r31
    8666:	f9 e2       	ldi	r31, 0x29	; 41
    8668:	7f 2e       	mov	r7, r31
    866a:	f0 2d       	mov	r31, r0
    866c:	0f 2e       	mov	r0, r31
    866e:	fe e7       	ldi	r31, 0x7E	; 126
    8670:	4f 2e       	mov	r4, r31
    8672:	f3 e2       	ldi	r31, 0x23	; 35
    8674:	5f 2e       	mov	r5, r31
    8676:	f0 2d       	mov	r31, r0
    8678:	6e cf       	rjmp	.-292    	; 0x8556 <main+0x280>

0000867a <main_hid_set_feature>:
    867a:	fc 01       	movw	r30, r24
    867c:	20 81       	ld	r18, Z
	
}

//Generic HID callbacks 
void main_hid_set_feature(uint8_t* report){
	if (report[0] == 0xAA && report[1] == 0x55
    867e:	2a 3a       	cpi	r18, 0xAA	; 170
    8680:	59 f4       	brne	.+22     	; 0x8698 <main_hid_set_feature+0x1e>
    8682:	21 81       	ldd	r18, Z+1	; 0x01
    8684:	25 35       	cpi	r18, 0x55	; 85
    8686:	41 f4       	brne	.+16     	; 0x8698 <main_hid_set_feature+0x1e>
	&& report[2] == 0xAA && report[3] == 0x55) {
    8688:	22 81       	ldd	r18, Z+2	; 0x02
    868a:	2a 3a       	cpi	r18, 0xAA	; 170
    868c:	29 f4       	brne	.+10     	; 0x8698 <main_hid_set_feature+0x1e>
    868e:	83 81       	ldd	r24, Z+3	; 0x03
    8690:	85 35       	cpi	r24, 0x55	; 85
    8692:	11 f4       	brne	.+4      	; 0x8698 <main_hid_set_feature+0x1e>
		// Disconnect USB Device
		udc_stop();
    8694:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <udc_stop>
    8698:	08 95       	ret

0000869a <usb_generic_hid_out>:
	}

}

void usb_generic_hid_out(uint8_t* report){
    869a:	dc 01       	movw	r26, r24
    869c:	e0 e5       	ldi	r30, 0x50	; 80
    869e:	f9 e2       	ldi	r31, 0x29	; 41
    86a0:	28 e6       	ldi	r18, 0x68	; 104
    86a2:	39 e2       	ldi	r19, 0x29	; 41
	//get report to global buffer
	
	int cnt  = 0;
	
	for(cnt = 0; cnt < UDI_HID_REPORT_OUT_SIZE; cnt++){
		gReport[cnt] = report[cnt];
    86a4:	8d 91       	ld	r24, X+
    86a6:	81 93       	st	Z+, r24
void usb_generic_hid_out(uint8_t* report){
	//get report to global buffer
	
	int cnt  = 0;
	
	for(cnt = 0; cnt < UDI_HID_REPORT_OUT_SIZE; cnt++){
    86a8:	e2 17       	cp	r30, r18
    86aa:	f3 07       	cpc	r31, r19
    86ac:	d9 f7       	brne	.-10     	; 0x86a4 <usb_generic_hid_out+0xa>
		gReport[cnt] = report[cnt];
	}

	gHidData = 1;	
    86ae:	81 e0       	ldi	r24, 0x01	; 1
    86b0:	80 93 4f 29 	sts	0x294F, r24	; 0x80294f <gHidData>
    86b4:	08 95       	ret

000086b6 <__udivmodhi4>:
    86b6:	aa 1b       	sub	r26, r26
    86b8:	bb 1b       	sub	r27, r27
    86ba:	51 e1       	ldi	r21, 0x11	; 17
    86bc:	07 c0       	rjmp	.+14     	; 0x86cc <__udivmodhi4_ep>

000086be <__udivmodhi4_loop>:
    86be:	aa 1f       	adc	r26, r26
    86c0:	bb 1f       	adc	r27, r27
    86c2:	a6 17       	cp	r26, r22
    86c4:	b7 07       	cpc	r27, r23
    86c6:	10 f0       	brcs	.+4      	; 0x86cc <__udivmodhi4_ep>
    86c8:	a6 1b       	sub	r26, r22
    86ca:	b7 0b       	sbc	r27, r23

000086cc <__udivmodhi4_ep>:
    86cc:	88 1f       	adc	r24, r24
    86ce:	99 1f       	adc	r25, r25
    86d0:	5a 95       	dec	r21
    86d2:	a9 f7       	brne	.-22     	; 0x86be <__udivmodhi4_loop>
    86d4:	80 95       	com	r24
    86d6:	90 95       	com	r25
    86d8:	bc 01       	movw	r22, r24
    86da:	cd 01       	movw	r24, r26
    86dc:	08 95       	ret

000086de <__udivmodsi4>:
    86de:	a1 e2       	ldi	r26, 0x21	; 33
    86e0:	1a 2e       	mov	r1, r26
    86e2:	aa 1b       	sub	r26, r26
    86e4:	bb 1b       	sub	r27, r27
    86e6:	fd 01       	movw	r30, r26
    86e8:	0d c0       	rjmp	.+26     	; 0x8704 <__udivmodsi4_ep>

000086ea <__udivmodsi4_loop>:
    86ea:	aa 1f       	adc	r26, r26
    86ec:	bb 1f       	adc	r27, r27
    86ee:	ee 1f       	adc	r30, r30
    86f0:	ff 1f       	adc	r31, r31
    86f2:	a2 17       	cp	r26, r18
    86f4:	b3 07       	cpc	r27, r19
    86f6:	e4 07       	cpc	r30, r20
    86f8:	f5 07       	cpc	r31, r21
    86fa:	20 f0       	brcs	.+8      	; 0x8704 <__udivmodsi4_ep>
    86fc:	a2 1b       	sub	r26, r18
    86fe:	b3 0b       	sbc	r27, r19
    8700:	e4 0b       	sbc	r30, r20
    8702:	f5 0b       	sbc	r31, r21

00008704 <__udivmodsi4_ep>:
    8704:	66 1f       	adc	r22, r22
    8706:	77 1f       	adc	r23, r23
    8708:	88 1f       	adc	r24, r24
    870a:	99 1f       	adc	r25, r25
    870c:	1a 94       	dec	r1
    870e:	69 f7       	brne	.-38     	; 0x86ea <__udivmodsi4_loop>
    8710:	60 95       	com	r22
    8712:	70 95       	com	r23
    8714:	80 95       	com	r24
    8716:	90 95       	com	r25
    8718:	9b 01       	movw	r18, r22
    871a:	ac 01       	movw	r20, r24
    871c:	bd 01       	movw	r22, r26
    871e:	cf 01       	movw	r24, r30
    8720:	08 95       	ret

00008722 <__tablejump2__>:
    8722:	ee 0f       	add	r30, r30
    8724:	ff 1f       	adc	r31, r31
    8726:	88 1f       	adc	r24, r24
    8728:	8b bf       	out	0x3b, r24	; 59
    872a:	07 90       	elpm	r0, Z+
    872c:	f6 91       	elpm	r31, Z
    872e:	e0 2d       	mov	r30, r0
    8730:	19 94       	eijmp

00008732 <__umulhisi3>:
    8732:	a2 9f       	mul	r26, r18
    8734:	b0 01       	movw	r22, r0
    8736:	b3 9f       	mul	r27, r19
    8738:	c0 01       	movw	r24, r0
    873a:	a3 9f       	mul	r26, r19
    873c:	70 0d       	add	r23, r0
    873e:	81 1d       	adc	r24, r1
    8740:	11 24       	eor	r1, r1
    8742:	91 1d       	adc	r25, r1
    8744:	b2 9f       	mul	r27, r18
    8746:	70 0d       	add	r23, r0
    8748:	81 1d       	adc	r24, r1
    874a:	11 24       	eor	r1, r1
    874c:	91 1d       	adc	r25, r1
    874e:	08 95       	ret

00008750 <__umoddi3>:
    8750:	68 94       	set
    8752:	01 c0       	rjmp	.+2      	; 0x8756 <__udivdi3_umoddi3>

00008754 <__udivdi3>:
    8754:	e8 94       	clt

00008756 <__udivdi3_umoddi3>:
    8756:	8f 92       	push	r8
    8758:	9f 92       	push	r9
    875a:	cf 93       	push	r28
    875c:	df 93       	push	r29
    875e:	05 d0       	rcall	.+10     	; 0x876a <__udivmod64>
    8760:	df 91       	pop	r29
    8762:	cf 91       	pop	r28
    8764:	9f 90       	pop	r9
    8766:	8f 90       	pop	r8
    8768:	08 95       	ret

0000876a <__udivmod64>:
    876a:	88 24       	eor	r8, r8
    876c:	99 24       	eor	r9, r9
    876e:	f4 01       	movw	r30, r8
    8770:	e4 01       	movw	r28, r8
    8772:	b0 e4       	ldi	r27, 0x40	; 64
    8774:	9f 93       	push	r25
    8776:	aa 27       	eor	r26, r26
    8778:	9a 15       	cp	r25, r10
    877a:	8b 04       	cpc	r8, r11
    877c:	9c 04       	cpc	r9, r12
    877e:	ed 05       	cpc	r30, r13
    8780:	fe 05       	cpc	r31, r14
    8782:	cf 05       	cpc	r28, r15
    8784:	d0 07       	cpc	r29, r16
    8786:	a1 07       	cpc	r26, r17
    8788:	98 f4       	brcc	.+38     	; 0x87b0 <__udivmod64+0x46>
    878a:	ad 2f       	mov	r26, r29
    878c:	dc 2f       	mov	r29, r28
    878e:	cf 2f       	mov	r28, r31
    8790:	fe 2f       	mov	r31, r30
    8792:	e9 2d       	mov	r30, r9
    8794:	98 2c       	mov	r9, r8
    8796:	89 2e       	mov	r8, r25
    8798:	98 2f       	mov	r25, r24
    879a:	87 2f       	mov	r24, r23
    879c:	76 2f       	mov	r23, r22
    879e:	65 2f       	mov	r22, r21
    87a0:	54 2f       	mov	r21, r20
    87a2:	43 2f       	mov	r20, r19
    87a4:	32 2f       	mov	r19, r18
    87a6:	22 27       	eor	r18, r18
    87a8:	b8 50       	subi	r27, 0x08	; 8
    87aa:	31 f7       	brne	.-52     	; 0x8778 <__udivmod64+0xe>
    87ac:	bf 91       	pop	r27
    87ae:	27 c0       	rjmp	.+78     	; 0x87fe <__udivmod64+0x94>
    87b0:	1b 2e       	mov	r1, r27
    87b2:	bf 91       	pop	r27
    87b4:	bb 27       	eor	r27, r27
    87b6:	22 0f       	add	r18, r18
    87b8:	33 1f       	adc	r19, r19
    87ba:	44 1f       	adc	r20, r20
    87bc:	55 1f       	adc	r21, r21
    87be:	66 1f       	adc	r22, r22
    87c0:	77 1f       	adc	r23, r23
    87c2:	88 1f       	adc	r24, r24
    87c4:	99 1f       	adc	r25, r25
    87c6:	88 1c       	adc	r8, r8
    87c8:	99 1c       	adc	r9, r9
    87ca:	ee 1f       	adc	r30, r30
    87cc:	ff 1f       	adc	r31, r31
    87ce:	cc 1f       	adc	r28, r28
    87d0:	dd 1f       	adc	r29, r29
    87d2:	aa 1f       	adc	r26, r26
    87d4:	bb 1f       	adc	r27, r27
    87d6:	8a 14       	cp	r8, r10
    87d8:	9b 04       	cpc	r9, r11
    87da:	ec 05       	cpc	r30, r12
    87dc:	fd 05       	cpc	r31, r13
    87de:	ce 05       	cpc	r28, r14
    87e0:	df 05       	cpc	r29, r15
    87e2:	a0 07       	cpc	r26, r16
    87e4:	b1 07       	cpc	r27, r17
    87e6:	48 f0       	brcs	.+18     	; 0x87fa <__udivmod64+0x90>
    87e8:	8a 18       	sub	r8, r10
    87ea:	9b 08       	sbc	r9, r11
    87ec:	ec 09       	sbc	r30, r12
    87ee:	fd 09       	sbc	r31, r13
    87f0:	ce 09       	sbc	r28, r14
    87f2:	df 09       	sbc	r29, r15
    87f4:	a0 0b       	sbc	r26, r16
    87f6:	b1 0b       	sbc	r27, r17
    87f8:	21 60       	ori	r18, 0x01	; 1
    87fa:	1a 94       	dec	r1
    87fc:	e1 f6       	brne	.-72     	; 0x87b6 <__udivmod64+0x4c>
    87fe:	2e f4       	brtc	.+10     	; 0x880a <__udivmod64+0xa0>
    8800:	94 01       	movw	r18, r8
    8802:	af 01       	movw	r20, r30
    8804:	be 01       	movw	r22, r28
    8806:	cd 01       	movw	r24, r26
    8808:	00 0c       	add	r0, r0
    880a:	08 95       	ret

0000880c <__ashldi3>:
    880c:	0f 93       	push	r16
    880e:	08 30       	cpi	r16, 0x08	; 8
    8810:	90 f0       	brcs	.+36     	; 0x8836 <__ashldi3+0x2a>
    8812:	98 2f       	mov	r25, r24
    8814:	87 2f       	mov	r24, r23
    8816:	76 2f       	mov	r23, r22
    8818:	65 2f       	mov	r22, r21
    881a:	54 2f       	mov	r21, r20
    881c:	43 2f       	mov	r20, r19
    881e:	32 2f       	mov	r19, r18
    8820:	22 27       	eor	r18, r18
    8822:	08 50       	subi	r16, 0x08	; 8
    8824:	f4 cf       	rjmp	.-24     	; 0x880e <__ashldi3+0x2>
    8826:	22 0f       	add	r18, r18
    8828:	33 1f       	adc	r19, r19
    882a:	44 1f       	adc	r20, r20
    882c:	55 1f       	adc	r21, r21
    882e:	66 1f       	adc	r22, r22
    8830:	77 1f       	adc	r23, r23
    8832:	88 1f       	adc	r24, r24
    8834:	99 1f       	adc	r25, r25
    8836:	0a 95       	dec	r16
    8838:	b2 f7       	brpl	.-20     	; 0x8826 <__ashldi3+0x1a>
    883a:	0f 91       	pop	r16
    883c:	08 95       	ret

0000883e <__adddi3>:
    883e:	2a 0d       	add	r18, r10
    8840:	3b 1d       	adc	r19, r11
    8842:	4c 1d       	adc	r20, r12
    8844:	5d 1d       	adc	r21, r13
    8846:	6e 1d       	adc	r22, r14
    8848:	7f 1d       	adc	r23, r15
    884a:	80 1f       	adc	r24, r16
    884c:	91 1f       	adc	r25, r17
    884e:	08 95       	ret

00008850 <__subdi3>:
    8850:	2a 19       	sub	r18, r10
    8852:	3b 09       	sbc	r19, r11
    8854:	4c 09       	sbc	r20, r12
    8856:	5d 09       	sbc	r21, r13
    8858:	6e 09       	sbc	r22, r14
    885a:	7f 09       	sbc	r23, r15
    885c:	80 0b       	sbc	r24, r16
    885e:	91 0b       	sbc	r25, r17
    8860:	08 95       	ret

00008862 <__cmpdi2>:
    8862:	2a 15       	cp	r18, r10
    8864:	3b 05       	cpc	r19, r11
    8866:	4c 05       	cpc	r20, r12
    8868:	5d 05       	cpc	r21, r13
    886a:	6e 05       	cpc	r22, r14
    886c:	7f 05       	cpc	r23, r15
    886e:	80 07       	cpc	r24, r16
    8870:	91 07       	cpc	r25, r17
    8872:	08 95       	ret

00008874 <memcpy>:
    8874:	fb 01       	movw	r30, r22
    8876:	dc 01       	movw	r26, r24
    8878:	02 c0       	rjmp	.+4      	; 0x887e <memcpy+0xa>
    887a:	01 90       	ld	r0, Z+
    887c:	0d 92       	st	X+, r0
    887e:	41 50       	subi	r20, 0x01	; 1
    8880:	50 40       	sbci	r21, 0x00	; 0
    8882:	d8 f7       	brcc	.-10     	; 0x887a <memcpy+0x6>
    8884:	08 95       	ret

00008886 <eeprom_read_byte>:
    8886:	03 d0       	rcall	.+6      	; 0x888e <eeprom_mapen>
    8888:	80 81       	ld	r24, Z
    888a:	99 27       	eor	r25, r25
    888c:	08 95       	ret

0000888e <eeprom_mapen>:
    888e:	e0 ec       	ldi	r30, 0xC0	; 192
    8890:	f1 e0       	ldi	r31, 0x01	; 1
    8892:	37 85       	ldd	r19, Z+15	; 0x0f
    8894:	37 fd       	sbrc	r19, 7
    8896:	fd cf       	rjmp	.-6      	; 0x8892 <eeprom_mapen+0x4>
    8898:	34 85       	ldd	r19, Z+12	; 0x0c
    889a:	38 60       	ori	r19, 0x08	; 8
    889c:	34 87       	std	Z+12, r19	; 0x0c
    889e:	fc 01       	movw	r30, r24
    88a0:	e0 50       	subi	r30, 0x00	; 0
    88a2:	f0 4f       	sbci	r31, 0xF0	; 240
    88a4:	08 95       	ret

000088a6 <eeprom_update_byte>:
    88a6:	26 2f       	mov	r18, r22

000088a8 <eeprom_update_r18>:
    88a8:	f2 df       	rcall	.-28     	; 0x888e <eeprom_mapen>
    88aa:	00 80       	ld	r0, Z
    88ac:	02 16       	cp	r0, r18
    88ae:	11 f0       	breq	.+4      	; 0x88b4 <eeprom_update_r18+0xc>
    88b0:	04 d0       	rcall	.+8      	; 0x88ba <eeprom_write_r18>
    88b2:	01 97       	sbiw	r24, 0x01	; 1
    88b4:	01 97       	sbiw	r24, 0x01	; 1
    88b6:	08 95       	ret

000088b8 <eeprom_write_byte>:
    88b8:	26 2f       	mov	r18, r22

000088ba <eeprom_write_r18>:
    88ba:	e0 ec       	ldi	r30, 0xC0	; 192
    88bc:	f1 e0       	ldi	r31, 0x01	; 1
    88be:	37 85       	ldd	r19, Z+15	; 0x0f
    88c0:	37 fd       	sbrc	r19, 7
    88c2:	fd cf       	rjmp	.-6      	; 0x88be <eeprom_write_r18+0x4>
    88c4:	34 85       	ldd	r19, Z+12	; 0x0c
    88c6:	37 7f       	andi	r19, 0xF7	; 247
    88c8:	34 87       	std	Z+12, r19	; 0x0c
    88ca:	37 85       	ldd	r19, Z+15	; 0x0f
    88cc:	31 ff       	sbrs	r19, 1
    88ce:	09 c0       	rjmp	.+18     	; 0x88e2 <eeprom_write_r18+0x28>
    88d0:	36 e3       	ldi	r19, 0x36	; 54
    88d2:	32 87       	std	Z+10, r19	; 0x0a
    88d4:	38 ed       	ldi	r19, 0xD8	; 216
    88d6:	34 bf       	out	0x34, r19	; 52
    88d8:	31 e0       	ldi	r19, 0x01	; 1
    88da:	33 87       	std	Z+11, r19	; 0x0b
    88dc:	37 85       	ldd	r19, Z+15	; 0x0f
    88de:	37 fd       	sbrc	r19, 7
    88e0:	fd cf       	rjmp	.-6      	; 0x88dc <eeprom_write_r18+0x22>
    88e2:	33 e3       	ldi	r19, 0x33	; 51
    88e4:	32 87       	std	Z+10, r19	; 0x0a
    88e6:	80 83       	st	Z, r24
    88e8:	91 83       	std	Z+1, r25	; 0x01
    88ea:	12 82       	std	Z+2, r1	; 0x02
    88ec:	24 83       	std	Z+4, r18	; 0x04
    88ee:	25 e3       	ldi	r18, 0x35	; 53
    88f0:	22 87       	std	Z+10, r18	; 0x0a
    88f2:	28 ed       	ldi	r18, 0xD8	; 216
    88f4:	31 e0       	ldi	r19, 0x01	; 1
    88f6:	24 bf       	out	0x34, r18	; 52
    88f8:	33 87       	std	Z+11, r19	; 0x0b
    88fa:	01 96       	adiw	r24, 0x01	; 1
    88fc:	08 95       	ret

000088fe <_exit>:
    88fe:	f8 94       	cli

00008900 <__stop_program>:
    8900:	ff cf       	rjmp	.-2      	; 0x8900 <__stop_program>
